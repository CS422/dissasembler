00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2017-05-22 ¿ÀÈÄ 5:59:35

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  *-----------------------------------------------------------
00001000                            15  * Title      : (!!!!!!STABLE!!!!) Master branch
00001000                            16  * Written by : Danny Ly & Edward Chang
00001000                            17  * Date       : 4/27/2017
00001000                            18  * Description: Our dissasembler for 68K
00001000                            19  *-----------------------------------------------------------
00001000                            20  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                            21      ORG    $1000
00001000                            22      
00001000  =0000000D                 23  CR  EQU $0D
00001000  =0000000A                 24  LF  EQU $0A
00001000  =00007000                 25  startLoc    EQU $7000
00001000                            26  
00001000                            27  *--- Notes
00001000                            28  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            29  * A4 will be our main pointer to current memory address and current data
00001000                            30  * D3 will be dedicated register to manipulate our data in
00001000                            31  *
00001000                            32  *
00001000                            33  *---------
00001000                            34  START:                  
00001000                            35              ; first instruction of program
00001000                            36              ;LEA     stack,SP
00001000                            37              *-present the hello message
00001000  43F9 000005E8             38              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 39              MOVE.B  #14,D0
0000100A  4E4F                      40              TRAP    #15
0000100C                            41              
0000100C                            42  *           
0000100C                            43  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            44  *
0000100C                            45  ** Put program code here
0000100C                            46  **-----
0000100C                            47  **This program starts by given a starting address and an ending address disassemble
0000100C                            48  **the binary code that is at that location.
0000100C                            49  **
0000100C                            50  **
0000100C                            51  **----
0000100C                            52  *
0000100C                            53  **-------
0000100C                            54  ** Needs to check for odd addressing**
0000100C                            55  **
0000100C                            56  **
0000100C                            57  **-----
0000100C                            58  *                *---------------------I/O SECTION
0000100C                            59  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            60  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            61  *                * statically in memory and retrieved when needed to compare
0000100C                            62  *                * this free's up a adress/data register to use
0000100C                            63  *                *-----------------------
0000100C                            64  *                
0000100C                            65  *                
0000100C                            66  *get_input_start_addr 
0000100C                            67  *                MOVE.L  #0,A3
0000100C                            68  *                CLR     D1
0000100C                            69  *                LEA     enter_start_AD,A1
0000100C                            70  *                MOVE.L  #14,D0
0000100C                            71  *                TRAP    #15
0000100C                            72  *                
0000100C                            73  *                
0000100C                            74  *
0000100C                            75  *      
0000100C                            76  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            77  *                MOVE.L  #2,D0
0000100C                            78  *                TRAP    #15
0000100C                            79  *                JSR     parse_input             parse the starting address
0000100C                            80  *                
0000100C                            81  *                
0000100C                            82  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            83  *                
0000100C                            84  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            85  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            86  *
0000100C                            87  *
0000100C                            88  *get_input_end_addr
0000100C                            89  *                MOVE.L  #0,A3
0000100C                            90  *                CLR     D1
0000100C                            91  *                LEA     userEnd,A1
0000100C                            92  *                MOVE.L  #14,D0
0000100C                            93  *                TRAP    #15
0000100C                            94  *                
0000100C                            95  *
0000100C                            96  *
0000100C                            97  *                LEA     userEndAddrInput,A1
0000100C                            98  *                MOVE.B  userEnd,D1
0000100C                            99  *                MOVE.L  #2,D0
0000100C                           100  *                TRAP    #15
0000100C                           101  *                JSR     parse_end
0000100C                           102  *
0000100C                           103  *                
0000100C                           104  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                           105  *  
0000100C                           106  *             
0000100C                           107  *STORE_SRT_END:
0000100C                           108  *               
0000100C                           109  *                      ;store the starting and ending address into memory out of range
0000100C                           110  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                           111  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           112  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           113  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           114  *            MOVE.L  A5,A4
0000100C                           115              
0000100C                           116              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           117              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           118              *
0000100C  2C3C 00000996            119              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     120              MOVE.L  D6,A5       Move D6 into a5
00001014                           121              
00001014  2C3C 000009CF            122              MOVE.L  #$9CF,D6
0000101A  2C46                     123              MOVE.L  D6,A6
0000101C                           124              
0000101C                           125              
0000101C  23CD 00FFFF00            126              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            127              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     128              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           129              *
0000102A                           130              *
0000102A                           131              *-------------END OF TESING CODE-----------
0000102A                           132          
0000102A  6000 0032                133              BRA get_next_instruction
0000102E                           134                           
0000102E                           135                           
0000102E                           136     
0000102E                           137  *---move_addresses:
0000102E                           138                                  
0000102E                           139                  *-MOVE 2 INTO DATA REG
0000102E                           140                  
0000102E                           141                  ;JSR     LOOP
0000102E                           142                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           143                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           144                  
0000102E                           145                  *----MOVE.W  A4,A0
0000102E                           146                  
0000102E                           147                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           148                  *----MOVE.B  #2,D4
0000102E                           149                  
0000102E                           150                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           151                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           152                  *------MOVE.L  D3,D7
0000102E                           153                  
0000102E                           154  
0000102E                           155  
0000102E                           156  
0000102E                           157                  *------LEA     good_code_buffer,A2 load again
0000102E                           158                  *------JSR     print_d3
0000102E                           159                  
0000102E                           160                  
0000102E                           161                  ;JSR     get_opcode 
0000102E                           162  
0000102E                           163                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           164                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           165                  ;SIMHALT
0000102E                           166  
0000102E                           167  
0000102E                           168  * ---------------------------------------------------------- 
0000102E                           169  * Decode ---------------------------------------------------
0000102E  49F8 7000                170              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 002A                171              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           172       
00001036                           173  mainLoop          
00001036                           174              *-----
00001036                           175              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           176              *- listing of finished and un finished work
00001036                           177              *-          ***Machine Code saved in D6*****
00001036                           178              *-----
00001036                           179  
00001036  E84B                     180              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           181              
00001038                           182              ;compare bits to instructions
00001038                           183              
00001038  B63C 0001                184              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           185              *- Machine code saved in D6
0000103C  6700 04A6                186              BEQ     op0001      ;branch to op0001
00001040                           187              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           188              ;BEQ     op0011      ;branch to op0011
00001040                           189              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           190              ;BEQ     op0010      ;branch to op0010           
00001040                           191              ;CMP.B   #bin0111,D3 ;MOVEQ
00001040                           192              ;BEQ     op0111      ;branch to op0111                        
00001040  B63C 0004                193              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
00001044  6700 0442                194              BEQ     op0100          branch to op0100                        
00001048                           195              ;CMP.B   #bin1101,D3 ;ADD, ADDA
00001048                           196              ;BEQ     op1101      ;branch to op1101            
00001048                           197              ;CMP.B   #bin1001,D3 ;SUB, SUBA
00001048                           198              ;BEQ     op1001      ;branch to op1001                        
00001048                           199              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001048                           200              ;BEQ     op0000      ;branch to op0000                       
00001048                           201              ;CMP.B   #bin0101,D3 ;SUBQ
00001048                           202              ;BEQ     op0101      ;branch to op0101                         
00001048                           203              ;CMP.B   #bin0110,D3 ;Bcc
00001048                           204              ;BEQ     op0110      ;branch to op0110            
00001048                           205              ;CMP.B   #bin1000,D3 ;DIVU.W
00001048                           206              ;BEQ     op1000      ;branch to op1000                                      
00001048                           207              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001048                           208              ;BEQ     op1011      ;branch to op1011 
00001048                           209              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001048                           210              ;BEQ     op1100      ;branch to op1100                                    
00001048                           211              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001048                           212              ;BEQ     op1110      ;branch to op1110            
00001048                           213              
00001048  6000 066A                214              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
0000104C                           215              
0000104C                           216              ;branch to display opError display
0000104C                           217              
0000104C                           218              ;print all the things...
0000104C                           219   *******************************************************************************
0000104C                           220  *
0000104C                           221  *******************************************************************************
0000104C                           222  addressCount 
0000104C                           223              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
0000104C                           224              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
0000104C                           225              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
0000104C                           226              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
0000104C                           227              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
0000104C                           228              
0000104C  4BF9 00FFFF10            229              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
00001052  2215                     230              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
00001054  2A0C                     231              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
00001056  B285                     232              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001058  6F00 F47A                233              BLE     FINISH      * branch to end if ending address reached
0000105C  4E75                     234              RTS                 * return IF WE HAVE NOT FINISHED
0000105E                           235              
0000105E                           236  get_next_instruction:
0000105E  4EB8 104C                237                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
00001062                           238                  *-line count
00001062  4245                     239                  CLR D5             *-CLEAR THIS REGISTER/
00001064                           240                  
00001064  45F9 00000624            241                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
0000106A  304C                     242                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
0000106C  7E02                     243                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
0000106E  2608                     244                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001070  2C03                     245                  MOVE.L  D3,D6   
00001072  45F9 00000624            246                  LEA     good_code_buffer,A2
00001078                           247                                  *-write the current data moved to data register d3
00001078  4EB9 0000109E            248                  JSR     write_data_in_D3_to_buffer
0000107E                           249                  
0000107E  14BC 0020                250                  MOVE.B  #' ',(A2)
00001082  14BC 0020                251                  MOVE.B  #' ',(A2)
00001086  14BC 0020                252                  MOVE.B  #' ',(A2)
0000108A  14BC 0020                253                  MOVE.B  #' ',(A2)
0000108E                           254                  
0000108E  4286                     255                  CLR.L   D6
00001090  4283                     256                  CLR.L   D3
00001092                           257                  
00001092  3A4C                     258                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
00001094                           259                  
00001094  3C1C                     260                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001096                           261                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
00001096                           262  
00001096  2814                     263                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
00001098  3606                     264                  MOVE.W  D6,D3
0000109A  E04B                     265                  LSR.W   #8,D3
0000109C                           266                  
0000109C  6098                     267                  BRA     mainLoop
0000109E                           268                  
0000109E                           269  write_data_in_D3_to_buffer:
0000109E                           270              *------
0000109E                           271              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
0000109E                           272              *
0000109E                           273              *
0000109E                           274              *---------
0000109E  BE7C 0002                275                  CMP.W   #2,D7 ERROR checking
000010A2  6600 0010                276                  BNE     print_word branch off to write the first word of the line
000010A6  4843                     277                  SWAP    D3
000010A8  4846                     278                  SWAP    D6
000010AA  4EB9 000010B4            279                  JSR     print_word
000010B0  4846                     280                  SWAP    D6
000010B2  2606                     281                  MOVE.L  D6,D3
000010B4                           282                  
000010B4                           283   print_word:
000010B4                           284                  *-****
000010B4                           285                  * called 4 times to decode from hex to ascii the first word 
000010B4                           286                  *   using the below jump table
000010B4                           287                  *
000010B4                           288                  *-------
000010B4  E04B                     289                  LSR.W   #8,D3
000010B6  E84B                     290                  LSR.W   #4,D3
000010B8  C6FC 0008                291                  MULU.W  #8,D3
000010BC  4DF9 000013A8            292                  LEA     numTable,A6
000010C2  4EB6 3000                293                  JSR     (A6,D3)
000010C6                           294                  
000010C6  3606                     295                  MOVE.W  D6,D3   COPY DATA
000010C8  E94B                     296                  LSL.W   #4,D3
000010CA  E04B                     297                  LSR.W   #8,D3
000010CC  E84B                     298                  LSR.W   #4,D3
000010CE  C6FC 0008                299                  MULU.W  #8,D3
000010D2  4DF9 000013A8            300                  LEA     numTable,A6
000010D8  4EB6 3000                301                  JSR     (A6,D3)
000010DC                           302                  
000010DC  3606                     303                  MOVE.W  D6,D3
000010DE                           304                  
000010DE  E14B                     305                  LSL.W   #8,D3
000010E0  E04B                     306                  LSR.W   #8,D3
000010E2  E84B                     307                  LSR.W   #4,D3
000010E4  C6FC 0008                308                  MULU.W  #8,D3
000010E8  4DF9 000013A8            309                  LEA numTable,A6
000010EE  4EB6 3000                310                  JSR     (A6,D3)
000010F2                           311                  
000010F2                           312                  
000010F2  3606                     313                  MOVE.W  D6,D3
000010F4  E94B                     314                  LSL.W   #4,D3
000010F6  E14B                     315                  LSL.W   #8,D3
000010F8  E04B                     316                  LSR.W   #8,D3
000010FA  E84B                     317                  LSR.W   #4,D3
000010FC  C6FC 0008                318                  MULU.W  #8,D3
00001100  4DF9 000013A8            319                  LEA     numTable,A6
00001106  4EB6 3000                320                  JSR     (A6,D3)
0000110A  5805                     321                  ADDI.B  #4,D5
0000110C  4E75                     322                  RTS
0000110E                           323  * -----------------------------------------------------------            
0000110E                           324  * Jump Table immAbTable *************************************
0000110E                           325  *** matches the associated Addressing mode     
0000110E                           326  *************************************************************
0000110E  4EB9 0000113A            327  immAbTable  JSR     IA000   ;Absoulute Word
00001114  4E75                     328              RTS             ;return, done printing
00001116  4EB9 0000119C            329              JSR     IA001   ;Aboulute Long
0000111C  4E75                     330              RTS             ;return, done printing
0000111E  4EB9 00001136            331              JSR     IA010   ;blank
00001124  4E75                     332              RTS             ;return, done printing
00001126  4EB9 00001138            333              JSR     IA011   ;blank
0000112C  4E75                     334              RTS             ;return, done printing  
0000112E  4EB9 0000125C            335              JSR     IA100   ;immediate Data
00001134  4E75                     336              RTS             ;return, done printing
00001136                           337  * -----------------------------------------------------------            
00001136  4E75                     338  IA010       RTS
00001138  4E75                     339  IA011       RTS
0000113A                           340  * -----------------------------------------------------------            
0000113A                           341  * Subroutine IA000   ------------------------------------------
0000113A                           342  IA000                               ;absoulteWord   
0000113A  14FC 0024                343              MOVE.B  #'$',(A2)+ 
0000113E  E08C                     344              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001140  E08C                     345              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001142                           346              *4MSB   X***
00001142  4241                     347              CLR     D1
00001144  3204                     348              MOVE.W  D4,D1       X***
00001146  E049                     349              LSR.W   #8,D1       00X*
00001148  E849                     350              LSR.W   #4,D1       000X
0000114A  4FF9 000013A8            351              LEA     numTable ,A7 Load the table into A7
00001150  C2FC 0008                352              MULU    #8,D1
00001154  4EB7 1000                353              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001158                           354              *next 4MSB  *X**
00001158  4241                     355              CLR     D1
0000115A  3204                     356              MOVE.W  D4,D1       *X**
0000115C  E949                     357              LSL.W   #4,D1       X**0        
0000115E  E049                     358              LSR.W   #8,D1       00X*
00001160  E849                     359              LSR.W   #4,D1       000X
00001162  4FF9 000013A8            360              LEA     numTable ,A7 Load the table into A7
00001168  C2FC 0008                361              MULU    #8,D1
0000116C  4EB7 1000                362              JSR     (A7,D1)     Jump to subroutine of value at D1
00001170                           363              *next 4MSB  **X*
00001170  4241                     364              CLR     D1
00001172  1204                     365              MOVE.B  D4,D1       00X*
00001174  E809                     366              LSR.B   #4,D1       000X
00001176  4FF9 000013A8            367              LEA     numTable ,A7 Load the table into A7
0000117C  C2FC 0008                368                          MULU    #8,D1
00001180  4EB7 1000                369              JSR     (A7,D1)     Jump to subroutine of value at D1
00001184                           370              *last 4  bits   ***X
00001184  4241                     371              CLR     D1
00001186  1204                     372              MOVE.B  D4,D1       00*X
00001188  E909                     373              LSL.B   #4,D1       00X0    
0000118A  E809                     374              LSR.B   #4,D1       000X
0000118C  4FF9 000013A8            375              LEA     numTable ,A7 Load the table into A7
00001192  C2FC 0008                376                          MULU    #8,D1
00001196  4EB7 1000                377              JSR     (A7,D1)     Jump to subroutine of value at D1
0000119A  4E75                     378              RTS           
0000119C                           379  * -----------------------------------------------------------            
0000119C                           380  * Subroutine IA001   ------------------------------------------
0000119C                           381  IA001                               ;absoulteLong
0000119C  4241                     382              CLR     D1
0000119E  4242                     383              CLR     D2 
000011A0  14FC 0024                384              MOVE.B  #'$',(A2)+ 
000011A4  2404                     385              MOVE.L  D4,D2       D2 will be used for later
000011A6                           386  *----------- first Word Value D4
000011A6  E08C                     387              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011A8  E08C                     388              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011AA                           389              *4MSB   X***
000011AA  4241                     390              CLR     D1
000011AC  3204                     391              MOVE.W  D4,D1       X***
000011AE  E049                     392              LSR.W   #8,D1       00X*
000011B0  E849                     393              LSR.W   #4,D1       000X
000011B2  4FF9 000013A8            394              LEA     numTable ,A7 Load the table into A7
000011B8  C2FC 0008                395              MULU    #8,D1
000011BC  4EB7 1000                396              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011C0                           397              *next 4MSB  *X**
000011C0  4241                     398              CLR     D1
000011C2  3204                     399              MOVE.W  D4,D1       *X**
000011C4  E949                     400              LSL.W   #4,D1       X**0        
000011C6  E049                     401              LSR.W   #8,D1       00X*
000011C8  E849                     402              LSR.W   #4,D1       000X
000011CA  4FF9 000013A8            403              LEA     numTable ,A7 Load the table into A7
000011D0  C2FC 0008                404              MULU    #8,D1
000011D4  4EB7 1000                405              JSR     (A7,D1)     Jump to subroutine of value at D1
000011D8                           406              *next 4MSB  **X*
000011D8  4241                     407              CLR     D1
000011DA  1204                     408              MOVE.B  D4,D1       00X*
000011DC  E809                     409              LSR.B   #4,D1       000X
000011DE  4FF9 000013A8            410              LEA     numTable ,A7 Load the table into A7
000011E4  C2FC 0008                411                          MULU    #8,D1
000011E8  4EB7 1000                412              JSR     (A7,D1)     Jump to subroutine of value at D1
000011EC                           413              *last 4  bits   ***X
000011EC  4241                     414              CLR     D1
000011EE  1204                     415              MOVE.B  D4,D1       00*X
000011F0  E909                     416              LSL.B   #4,D1       00X0    
000011F2  E809                     417              LSR.B   #4,D1       000X
000011F4  4FF9 000013A8            418              LEA     numTable ,A7 Load the table into A7
000011FA  C2FC 0008                419                          MULU    #8,D1
000011FE  4EB7 1000                420              JSR     (A7,D1)     Jump to subroutine of value at D1
00001202                           421  *---------  Second Word Value D2    **** XXXX
00001202                           422              *4MSB   X***
00001202  4241                     423              CLR     D1
00001204  3202                     424              MOVE.W  D2,D1
00001206  E049                     425              LSR.W   #8,D1            00X*
00001208  E849                     426              LSR.W   #4,D1            000X
0000120A  C2FC 0008                427              MULU    #8,D1
0000120E  4FF9 000013A8            428              LEA     numTable ,A7 Load the table into A7
00001214  4EB7 1000                429              JSR     (A7,D1)     Jump to subroutine of value at D1
00001218                           430              *next 4MSB  *X**
00001218  4241                     431              CLR     D1
0000121A  3202                     432              MOVE.W  D2,D1
0000121C  E949                     433              LSL.W   #4,D1       X**0
0000121E  E049                     434              LSR.W   #8,D1       00X*
00001220  E809                     435              LSR.B   #4,D1       000X
00001222  C2FC 0008                436              MULU    #8,D1
00001226  4FF9 000013A8            437              LEA     numTable ,A7 Load the table into A7
0000122C  4EB7 1000                438              JSR     (A7,D1)     Jump to subroutine of value at D1
00001230                           439              *next 4MSB  **X*
00001230  4241                     440              CLR     D1
00001232  1202                     441              MOVE.B  D2,D1       00X*
00001234  E809                     442              LSR.B   #4,D1       000X
00001236  C2FC 0008                443              MULU    #8,D1
0000123A  4FF9 000013A8            444              LEA     numTable ,A7 Load the table into A7
00001240  4EB7 1000                445              JSR     (A7,D1)     Jump to subroutine of value at D1
00001244                           446              *next 4MSB  ***X
00001244  4241                     447              CLR     D1
00001246  1202                     448              MOVE.B  D2,D1       00*X
00001248  E909                     449              LSL.B   #4,D1       00X0
0000124A  E809                     450              LSR.B   #4,D1       000X
0000124C  C2FC 0008                451              MULU    #8,D1
00001250  4FF9 000013A8            452              LEA     numTable ,A7 Load the table into A7
00001256  4EB7 1000                453              JSR     (A7,D1)     Jump to subroutine of value at D1
0000125A                           454             
0000125A                           455  
0000125A  4E75                     456              RTS
0000125C                           457   
0000125C                           458  * -----------------------------------------------------------            
0000125C                           459  * Subroutine IA100   ------------------------------------------
0000125C                           460  IA100                               ;immediateData
0000125C  14FC 0023                461              MOVE.B  #'#',(A2)+ 
00001260  381D                     462              MOVE.W  (A5)+,D4    WE got the address for the operand
00001262  3815                     463              MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001264                           464              *4MSB   00X*
00001264  4242                     465              CLR     D2
00001266  1404                     466              MOVE.B  D4,D2       00X*
00001268  E80A                     467              LSR.B   #4,D2       000X
0000126A  C4FC 0008                468              MULU    #8,D2   
0000126E  4FF9 000013A8            469              LEA     numTable ,A7 Load the table into A7
00001274  4EB7 2000                470              JSR     (A7,D2)     Jump to subroutine of value at D2
00001278                           471              *last 4bits 00*X
00001278  4242                     472              CLR     D2
0000127A  1404                     473              MOVE.B  D4,D2       00*X
0000127C  E90A                     474              LSL.B   #4,D2       00X*
0000127E  E80A                     475              LSR.B   #4,D2       000X
00001280  C4FC 0008                476              MULU    #8,D2   
00001284                           477             
00001284  4EB7 2000                478              JSR     (A7,D2)     Jump to subroutine of value at D2
00001288                           479  
00001288  4E75                     480              RTS
0000128A                           481  
0000128A                           482                            
0000128A                           483  * -----------------------------------------------------------            
0000128A                           484  * Jump Table modeTable ***************************************
0000128A                           485  *** matches the associated Addressing mode     
0000128A                           486  *************************************************************
0000128A  4EB9 000012CA            487  modeTable   JSR     M0000   ;Dn, Data Register 
00001290  4E75                     488              RTS             ;return, done printing
00001292  4EB9 000012D6            489              JSR     M0001   ;An, Address Register 
00001298  4E75                     490              RTS             ;return, done printing
0000129A  4EB9 000012E2            491              JSR     M0010   ;(An), Address
000012A0  4E75                     492              RTS             ;return, done printing
000012A2  4EB9 000012F6            493              JSR     M0011   ;(An)+, Address with Postincrement
000012A8  4E75                     494              RTS             ;return, done printing
000012AA                           495              
000012AA  4EB9 0000130E            496              JSR     M0100   ;-(An), Address with Predecrement
000012B0  4E75                     497              RTS             ;return, done printing
000012B2  4EB9 00001326            498              JSR     M0101   ; blank - not assigned for this project
000012B8  4E75                     499              RTS
000012BA  4EB9 00001328            500              JSR     M0110   ; blank - not assigned for this project
000012C0  4E75                     501              RTS
000012C2  4EB9 0000132A            502              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012C8  4E75                     503              RTS             ;return, done printing           
000012CA                           504  * -----------------------------------------------------------            
000012CA                           505  * Subroutine M0000 ------------------------------------------
000012CA                           506  M0000                               ;Dn
000012CA  14FC 0044                507              MOVE.B  #'D',(A2)+      ;display D
000012CE  264A                     508              MOVEA.L A2,A3           ;get address for n
000012D0  14FC 0020                509              MOVE.B  #' ',(A2)+      ;blank
000012D4  4E75                     510              RTS
000012D6                           511  
000012D6                           512  * -----------------------------------------------------------            
000012D6                           513  * Subroutine M0001 ------------------------------------------
000012D6                           514  M0001                               ;An
000012D6  14FC 0041                515              MOVE.B  #'A',(A2)+      ;display A
000012DA  264A                     516              MOVEA.L A2,A3           ;get address for n
000012DC  14FC 0020                517              MOVE.B  #' ',(A2)+      ;blank
000012E0  4E75                     518              RTS
000012E2                           519  
000012E2                           520  * -----------------------------------------------------------            
000012E2                           521  * Subroutine M0010 ------------------------------------------
000012E2                           522  M0010                               ;(An) Address
000012E2  14FC 0028                523              MOVE.B  #'(',(A2)+      ;display (
000012E6  14FC 0041                524              MOVE.B  #'A',(A2)+      ;display A
000012EA  264A                     525              MOVEA.L A2,A3           ;get address for n
000012EC  14FC 0020                526              MOVE.B  #' ',(A2)+      ;blank      
000012F0  14FC 0029                527              MOVE.B  #')',(A2)+      ;display )
000012F4  4E75                     528              RTS
000012F6                           529   
000012F6                           530  * -----------------------------------------------------------            
000012F6                           531  * Subroutine M0011 ------------------------------------------
000012F6                           532  M0011                               ;(An)+ 
000012F6  14FC 0028                533              MOVE.B  #'(',(A2)+      ;display (
000012FA  14FC 0041                534              MOVE.B  #'A',(A2)+      ;display A
000012FE  264A                     535              MOVEA.L A2,A3           ;get address for n 
00001300  14FC 0020                536              MOVE.B  #' ',(A2)+      ;blank     
00001304  14FC 0029                537              MOVE.B  #')',(A2)+      ;display )
00001308  14FC 002B                538              MOVE.B  #'+',(A2)+      ;display +
0000130C  4E75                     539              RTS
0000130E                           540  
0000130E                           541  * -----------------------------------------------------------            
0000130E                           542  * Subroutine M0100 ------------------------------------------
0000130E                           543  M0100                               ;-(An)
0000130E  14FC 002D                544              MOVE.B  #'-',(A2)+      ;display -
00001312  14FC 0028                545              MOVE.B  #'(',(A2)+      ;display (
00001316  14FC 0041                546              MOVE.B  #'A',(A2)+      ;display A
0000131A  264A                     547              MOVEA.L A2,A3           ;get address for n
0000131C  14FC 0020                548              MOVE.B  #' ',(A2)+      ;blank      
00001320  14FC 0029                549              MOVE.B  #')',(A2)+      ;display )
00001324  4E75                     550              RTS
00001326                           551  
00001326                           552  * -----------------------------------------------------------    
00001326                           553  * Subroutine M0101 ------------------------------------------
00001326                           554  M0101                               ;do nothing
00001326  4E75                     555              RTS
00001328                           556  * -----------------------------------------------------------   
00001328                           557  * Subroutine M0110 ------------------------------------------
00001328                           558  M0110                               ;do nothing
00001328  4E75                     559              RTS
0000132A                           560  * -----------------------------------------------------------     
0000132A                           561  * Subroutine M0111 -------------------------Not finished-----
0000132A                           562  * Register is stored at D1
0000132A                           563  * ----case 1 : Register 100 => #imm => #XX 3 spaces
0000132A                           564  * ----case 2 : Register 000 => (XXX).W => 
0000132A                           565  * ----case 3 : Register 001 => (XXX).L
0000132A                           566  * 
0000132A                           567  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
0000132A                           568  
0000132A                           569  M0111                               ;(xxx).W, (xxx).L, #imm
0000132A                           570                                      ; This will be taken care under opcode subroutine
0000132A  4E75                     571              RTS
0000132C                           572  
0000132C                           573  * -----------------------------------------------------------
0000132C                           574  * Subroutine immediateData 
0000132C                           575  ;immediateData     
0000132C                           576  ;            RTS
0000132C                           577  * -----------------------------------------------------------
0000132C                           578  
0000132C                           579  * Subroutine registerPrint----------------------------------- 
0000132C                           580  registerPrint
0000132C  4FF9 000013A8            581              LEA     numTable,A7 Load the table into A7
00001332  4EB7 1000                582              JSR     (A7,D1)     Jump to numTable with value at D1
00001336  4E75                     583              RTS
00001338                           584  
00001338                           585  * -----------------------------------------------------------            
00001338                           586  * Jump Table regNumTable ***************************************
00001338                           587  *** prints the associated number of the register            *
00001338                           588  *** Also prints hex values for data and addresses           *
00001338                           589  *-----see below for decoding of what these sub-routines are
00001338                           590  *************************************************************
00001338  4EB9 00001378            591  regNumTable JSR     RN0000   ;register 0
0000133E  4E75                     592              RTS             ;return, done printing
00001340  4EB9 0000137E            593              JSR     RN0001   ;register 1
00001346  4E75                     594              RTS             ;return, done printing
00001348  4EB9 00001384            595              JSR     RN0010   ;register 2
0000134E  4E75                     596              RTS             ;return, done printing
00001350  4EB9 0000138A            597              JSR     RN0011   ;register 3
00001356  4E75                     598              RTS             ;return, done printing
00001358  4EB9 00001390            599              JSR     RN0100   ;register 4
0000135E  4E75                     600              RTS             ;return, done printing
00001360  4EB9 00001396            601              JSR     RN0101   ;register 5
00001366  4E75                     602              RTS             ;return, done printing
00001368  4EB9 0000139C            603              JSR     RN0110   ;register 6
0000136E  4E75                     604              RTS             ;return, done printing
00001370  4EB9 000013A2            605              JSR     RN0111   ;register 7
00001376  4E75                     606              RTS             ;return, done printing
00001378                           607  * -----------------------------------------------------------            
00001378                           608  * Subroutine RN0000 ------------------------------------------
00001378                           609  RN0000
00001378  16BC 0030                610              MOVE.B  #'0',(A3)      ;display 0
0000137C  4E75                     611              RTS
0000137E                           612  
0000137E                           613  * -----------------------------------------------------------            
0000137E                           614  * Subroutine RN0001 ------------------------------------------
0000137E                           615  RN0001
0000137E  16BC 0031                616              MOVE.B  #'1',(A3)      ;display 1
00001382  4E75                     617              RTS
00001384                           618  
00001384                           619  * -----------------------------------------------------------            
00001384                           620  * Subroutine RN0010 ------------------------------------------
00001384                           621  RN0010
00001384  16BC 0032                622              MOVE.B  #'2',(A3)      ;display 2
00001388  4E75                     623              RTS
0000138A                           624   
0000138A                           625  * -----------------------------------------------------------            
0000138A                           626  * Subroutine RN0011 ------------------------------------------
0000138A                           627  RN0011
0000138A  16BC 0033                628              MOVE.B  #'3',(A3)      ;display 3
0000138E  4E75                     629              RTS
00001390                           630  
00001390                           631  * -----------------------------------------------------------            
00001390                           632  * Subroutine RN0100 ------------------------------------------
00001390                           633  RN0100
00001390  16BC 0034                634              MOVE.B  #'4',(A3)      ;display 4
00001394  4E75                     635              RTS
00001396                           636  
00001396                           637  * -----------------------------------------------------------            
00001396                           638  * Subroutine RN0101 ------------------------------------------
00001396                           639  RN0101
00001396  16BC 0035                640              MOVE.B  #'5',(A3)      ;display 5
0000139A  4E75                     641              RTS
0000139C                           642  
0000139C                           643  * -----------------------------------------------------------            
0000139C                           644  * Subroutine RN0110 ------------------------------------------
0000139C                           645  RN0110
0000139C  16BC 0036                646              MOVE.B  #'6',(A3)      ;display 6
000013A0  4E75                     647              RTS
000013A2                           648              
000013A2                           649  * -----------------------------------------------------------            
000013A2                           650  * Subroutine RN0111 ------------------------------------------
000013A2                           651  RN0111
000013A2  16BC 0037                652              MOVE.B  #'7',(A3)      ;display 7
000013A6  4E75                     653              RTS
000013A8                           654  
000013A8                           655  * -----------------------------------------------------------            
000013A8                           656  * Jump Table numTable ***************************************
000013A8                           657  *** prints the associated number of the register            *
000013A8                           658  *** Also prints hex values for data and addresses           *
000013A8                           659  *-----see below for decoding of what these sub-routines are
000013A8                           660  *************************************************************
000013A8  4EB9 00001428            661  numTable    JSR     N0000   ;register 0
000013AE  4E75                     662              RTS             ;return, done printing
000013B0  4EB9 0000142E            663              JSR     N0001   ;register 1
000013B6  4E75                     664              RTS             ;return, done printing
000013B8  4EB9 00001434            665              JSR     N0010   ;register 2
000013BE  4E75                     666              RTS             ;return, done printing
000013C0  4EB9 0000143A            667              JSR     N0011   ;register 3
000013C6  4E75                     668              RTS             ;return, done printing
000013C8  4EB9 00001440            669              JSR     N0100   ;register 4
000013CE  4E75                     670              RTS             ;return, done printing
000013D0  4EB9 00001446            671              JSR     N0101   ;register 5
000013D6  4E75                     672              RTS             ;return, done printing
000013D8  4EB9 0000144C            673              JSR     N0110   ;register 6
000013DE  4E75                     674              RTS             ;return, done printing
000013E0  4EB9 00001452            675              JSR     N0111   ;register 7
000013E6  4E75                     676              RTS             ;return, done printing
000013E8  4EB9 00001458            677              JSR     N1000   ;num 8
000013EE  4E75                     678              RTS             ;return, done printing
000013F0  4EB9 0000145E            679              JSR     N1001   ;num 9
000013F6  4E75                     680              RTS             ;return, done printing
000013F8  4EB9 00001464            681              JSR     N1010   ;num A
000013FE  4E75                     682              RTS             ;return, done printing
00001400  4EB9 0000146A            683              JSR     N1011   ;num B
00001406  4E75                     684              RTS             ;return, done printing
00001408  4EB9 00001470            685              JSR     N1100   ;num C
0000140E  4E75                     686              RTS             ;return, done printing
00001410  4EB9 00001476            687              JSR     N1101   ;num D
00001416  4E75                     688              RTS             ;return, done printing
00001418  4EB9 0000147C            689              JSR     N1110   ;num E
0000141E  4E75                     690              RTS             ;return, done printing
00001420  4EB9 00001482            691              JSR     N1111   ;num F
00001426  4E75                     692              RTS             ;return, done printing
00001428                           693  * -----------------------------------------------------------            
00001428                           694  * Subroutine N0000 ------------------------------------------
00001428                           695  N0000
00001428  14FC 0030                696              MOVE.B  #'0',(A2)+      ;display 0
0000142C  4E75                     697              RTS
0000142E                           698  
0000142E                           699  * -----------------------------------------------------------            
0000142E                           700  * Subroutine N0001 ------------------------------------------
0000142E                           701  N0001
0000142E  14FC 0031                702              MOVE.B  #'1',(A2)+      ;display 1
00001432  4E75                     703              RTS
00001434                           704  
00001434                           705  * -----------------------------------------------------------            
00001434                           706  * Subroutine N0010 ------------------------------------------
00001434                           707  N0010
00001434  14FC 0032                708              MOVE.B  #'2',(A2)+      ;display 2
00001438  4E75                     709              RTS
0000143A                           710   
0000143A                           711  * -----------------------------------------------------------            
0000143A                           712  * Subroutine N0011 ------------------------------------------
0000143A                           713  N0011
0000143A  14FC 0033                714              MOVE.B  #'3',(A2)+      ;display 3
0000143E  4E75                     715              RTS
00001440                           716  
00001440                           717  * -----------------------------------------------------------            
00001440                           718  * Subroutine N0100 ------------------------------------------
00001440                           719  N0100
00001440  14FC 0034                720              MOVE.B  #'4',(A2)+      ;display 4
00001444  4E75                     721              RTS
00001446                           722  
00001446                           723  * -----------------------------------------------------------            
00001446                           724  * Subroutine N0101 ------------------------------------------
00001446                           725  N0101
00001446  14FC 0035                726              MOVE.B  #'5',(A2)+      ;display 5
0000144A  4E75                     727              RTS
0000144C                           728  
0000144C                           729  * -----------------------------------------------------------            
0000144C                           730  * Subroutine N0110 ------------------------------------------
0000144C                           731  N0110
0000144C  14FC 0036                732              MOVE.B  #'6',(A2)+      ;display 6
00001450  4E75                     733              RTS
00001452                           734              
00001452                           735  * -----------------------------------------------------------            
00001452                           736  * Subroutine N0111 ------------------------------------------
00001452                           737  N0111
00001452  14FC 0037                738              MOVE.B  #'7',(A2)+      ;display 7
00001456  4E75                     739              RTS
00001458                           740  
00001458                           741  * ----------------------------------------------------------- 
00001458                           742  * Subroutine N1000 ------------------------------------------
00001458                           743  N1000       
00001458  14FC 0038                744              MOVE.B  #'8',(A2)+      ;display 8
0000145C  4E75                     745              RTS
0000145E                           746  
0000145E                           747  * -----------------------------------------------------------            
0000145E                           748  * Subroutine N1001 ------------------------------------------
0000145E                           749  N1001   
0000145E  14FC 0039                750              MOVE.B  #'9',(A2)+      ;display 9
00001462  4E75                     751              RTS
00001464                           752  
00001464                           753  * -----------------------------------------------------------            
00001464                           754  * Subroutine N1010 ------------------------------------------
00001464                           755  N1010   
00001464  14FC 0041                756              MOVE.B  #'A',(A2)+      ;display A
00001468  4E75                     757              RTS
0000146A                           758  
0000146A                           759  * -----------------------------------------------------------            
0000146A                           760  * Subroutine N1011 ------------------------------------------
0000146A                           761  N1011   
0000146A  14FC 0042                762              MOVE.B  #'B',(A2)+      ;display B
0000146E  4E75                     763              RTS
00001470                           764  
00001470                           765  * -----------------------------------------------------------            
00001470                           766  * Subroutine N1100 ------------------------------------------
00001470                           767  N1100   
00001470  14FC 0043                768              MOVE.B  #'C',(A2)+      ;display C
00001474  4E75                     769              RTS
00001476                           770  
00001476                           771  * -----------------------------------------------------------            
00001476                           772  * Subroutine N1101 ------------------------------------------
00001476                           773  N1101   
00001476  14FC 0044                774              MOVE.B  #'D',(A2)+      ;display D
0000147A  4E75                     775              RTS
0000147C                           776  
0000147C                           777  * -----------------------------------------------------------            
0000147C                           778  * Subroutine N1110 ------------------------------------------
0000147C                           779  N1110   
0000147C  14FC 0045                780              MOVE.B  #'E',(A2)+      ;display E
00001480  4E75                     781              RTS
00001482                           782  
00001482                           783  * -----------------------------------------------------------            
00001482                           784  * Subroutine N1111 ------------------------------------------
00001482                           785  N1111   
00001482  14FC 0046                786              MOVE.B  #'F',(A2)+      ;display F
00001486  4E75                     787              RTS   
00001488                           788              
00001488                           789              
00001488                           790              
00001488                           791              *---------------------------------------------------------------
00001488                           792              *--------------------------------------------------------
00001488                           793              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
00001488                           794              *-------------------------------------
00001488                           795              INCLUDE 'op0100.x68'    IN a different file, modulated design        
00001488                           796  op0100      
00001488                           797  
00001488                           798  
00001488                           799   
00001488                           800              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
00001488                           801              ;BEQ     jumpToRt            
00001488                           802              ;CMP.W   #$4E75,D6   ;see if it's a RTS
00001488                           803              ;BEQ     returnRt 
00001488                           804             
00001488                           805              ;JSR     WorL        
00001488                           806              ;CMP.B   #hex7,D3    ;see if it's a LEA
00001488                           807              ;BEQ     _lea        ;branch 
00001488                           808              
00001488                           809              ;JSR     clrORmm       
00001488                           810              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
00001488                           811              ;BEQ     _clrB       ;branch             
00001488                           812              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
00001488                           813              ;BEQ     _clrW       ;branch   
00001488                           814              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
00001488                           815              ;BEQ     _clrL       ;branch
00001488                           816    
00001488                           817              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
00001488                           818              ;BEQ     _movemW     ;branch   
00001488                           819              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
00001488                           820              ;BEQ     _movemL     ;branch              
00001488                           821                          
00001488                           822              ;BRA     opError     ;bad opcode branch to error
00001488                           823              
00001488                           824              
00001488  BC7C 4E71                825              CMP.W   #$4E71,D6
0000148C  6700 000A                826              BEQ     _NOP
00001490                           827              
00001490  BC7C 4E75                828              CMP.W   #$4E75,D6   ;see if it's a RTS
00001494  6700 0028                829              BEQ     _RTS        branch to RTS
00001498                           830             
00001498                           831  
00001498                           832              
00001498                           833  _NOP
00001498  7E02                     834              MOVE.L  #2,D7       ;data is not error
0000149A  14FC 0020                835              MOVE.B  #' ',(A2)+      ;print spaces
0000149E  14FC 0020                836              MOVE.B  #' ',(A2)+      ;print spaces
000014A2  14FC 0020                837              MOVE.B  #' ',(A2)+      ;print spaces
000014A6  14FC 0020                838              MOVE.B  #' ',(A2)+      ;print spaces
000014AA  14FC 004E                839              MOVE.B  #'N',(A2)+      ;print N
000014AE  14FC 004F                840              MOVE.B  #'O',(A2)+      ;print O
000014B2  14FC 0050                841              MOVE.B  #'P',(A2)+      ;print P
000014B6  1A3C 0003                842              MOVE.B  #3,D5           ;counter for output
000014BA  6000 025C                843              BRA     printCode
000014BE                           844  
000014BE                           845  _RTS    
000014BE  7E02                     846              MOVE.L  #2,D7       ;data is not error
000014C0  14FC 0020                847              MOVE.B  #' ',(A2)+      ;print spaces
000014C4  14FC 0020                848              MOVE.B  #' ',(A2)+      ;print spaces
000014C8  14FC 0020                849              MOVE.B  #' ',(A2)+      ;print spaces
000014CC  14FC 0020                850              MOVE.B  #' ',(A2)+      ;print spaces
000014D0  14FC 0052                851              MOVE.B  #'R',(A2)+      ;print R
000014D4  14FC 0054                852              MOVE.B  #'T',(A2)+      ;print T
000014D8  14FC 0053                853              MOVE.B  #'S',(A2)+      ;print S
000014DC  1A3C 0003                854              MOVE.B  #3,D5           ;counter for output
000014E0  6000 0236                855              BRA     printCode
000014E0  6000 0236                856  -------------------- end include --------------------
000014E4                           857              INCLUDE 'op0001.x68'    MOVE.b Differetn file
000014E4                           858  
000014E4                           859  
000014E4                           860  
000014E4                           861  
000014E4                           862  op0001
000014E4  7E02                     863              MOVE.L  #2,D7       ;data is not error
000014E6  14FC 0020                864              MOVE.B  #' ',(A2)+      ;print spaces
000014EA  14FC 0020                865              MOVE.B  #' ',(A2)+      ;print spaces
000014EE  14FC 0020                866              MOVE.B  #' ',(A2)+      ;print spaces
000014F2  14FC 0020                867              MOVE.B  #' ',(A2)+      ;print spaces
000014F6  14FC 004D                868              MOVE.B  #'M',(A2)+      ;print M
000014FA  14FC 004F                869              MOVE.B  #'O',(A2)+      ;print O
000014FE  14FC 0056                870              MOVE.B  #'V',(A2)+      ;print V
00001502  14FC 0045                871              MOVE.B  #'E',(A2)+      PRINT  E
00001506  14FC 002E                872              MOVE.B  #'.',(A2)+
0000150A  14FC 0042                873              MOVE.B  #'B',(A2)+
0000150E  14FC 0020                874              MOVE.B  #' ',(A2)+   
00001512  4242                     875              CLR     D2
00001514  4241                     876              CLR     D1
00001516  1406                     877              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001518  E50A                     878              LSL.B   #2,D2       **** **** BIT* **00
0000151A  EA0A                     879              LSR.B   #5,D2       **** **** 0000 0BIT
0000151C  1002                     880              MOVE.B  D2,D0
0000151E  C0FC 0008                881              MULU    #8,D0       value adjusted for jumping
00001522  4DF8 128A                882              LEA     modeTable,A6 Load the table into A6
00001526  4EB6 0000                883              JSR     (A6,D0)     Jump to subroutine of value at D0
0000152A                           884              
0000152A  1206                     885              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000152C  EB09                     886              LSL.B   #5,D1       **** **** BIT0 0000
0000152E  EA09                     887              LSR.B   #5,D1       **** **** 0000 0BIT
00001530  1001                     888              MOVE.B  D1,D0      
00001532  C0FC 0008                889              MULU    #8,D0       value adjusted for jumping
00001536  4FF8 1338                890              LEA     regNumTable ,A7 Load the table into A7
0000153A  4EB7 0000                891              JSR     (A7,D0)     Jump to subroutine of value at D1
0000153E  4FF8 110E                892              LEA     immAbTable, A7
00001542  C2FC 0008                893              MULU    #8,D1
00001546  4EB7 1000                894              JSR     (A7,D1)    
0000154A                           895  
0000154A                           896  
0000154A  14FC 002C                897              MOVE.B  #',',(A2)+  comma between operands
0000154E  4242                     898              CLR     D2
00001550  4241                     899              CLR     D1
00001552  3406                     900              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001554  EF4A                     901              LSL.W   #7,D2       BIT* **** **** 0000
00001556  E04A                     902              LSR.W   #8,D2       0000 0000 BIT* ****
00001558  EA4A                     903              LSR.W   #5,D2       0000 0000 0000 0BIT 
0000155A  C4FC 0008                904              MULU    #8,D2       value adjusted for jumping
0000155E  4DF8 128A                905              LEA     modeTable,A6 Load the table into A6
00001562  4EB6 2000                906              JSR     (A6,D2)     Jump to subroutine of value at D2
00001566                           907             
00001566  3206                     908              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001568  E949                     909              LSL.W   #4,D1       BIT* **** **** 0000
0000156A  E049                     910              LSR.W   #8,D1       0000 0000 BIT* ****
0000156C  EA49                     911              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000156E  C2FC 0008                912              MULU    #8,D1       value adjusted for jumping
00001572  4FF8 1338                913              LEA     regNumTable ,A7 Load the table into A7
00001576  4EB7 1000                914              JSR     (A7,D1)     Jump to subroutine of value at D1    
0000157A  6000 019C                915              BRA     printCode
0000157E                           916  immediateData
0000157E  14FC 0023                917              MOVE.B  #'#',(A2)+ 
00001582  381D                     918              MOVE.W  (A5)+,D4    WE got the address for the operand
00001584  3815                     919              MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001586                           920              *4MSB   00X*
00001586  4242                     921              CLR     D2
00001588  1404                     922              MOVE.B  D4,D2       00X*
0000158A  E80A                     923              LSR.B   #4,D2       000X
0000158C  C4FC 0008                924              MULU    #8,D2   
00001590  4FF8 13A8                925              LEA     numTable ,A7 Load the table into A7
00001594  4EB7 2000                926              JSR     (A7,D2)     Jump to subroutine of value at D2
00001598                           927              *last 4bits 00*X
00001598  4242                     928              CLR     D2
0000159A  1404                     929              MOVE.B  D4,D2       00*X
0000159C  E90A                     930              LSL.B   #4,D2       00X*
0000159E  E80A                     931              LSR.B   #4,D2       000X
000015A0  C4FC 0008                932              MULU    #8,D2   
000015A4                           933             
000015A4  4EB7 2000                934              JSR     (A7,D2)     Jump to subroutine of value at D2
000015A8                           935  
000015A8  4E75                     936              RTS
000015AA                           937              
000015AA                           938  absoulteWord   
000015AA  14FC 0024                939              MOVE.B  #'$',(A2)+ 
000015AE  E08C                     940              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015B0  E08C                     941              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015B2                           942              *4MSB   X***
000015B2  4241                     943              CLR     D1
000015B4  3204                     944              MOVE.W  D4,D1       X***
000015B6  E049                     945              LSR.W   #8,D1       00X*
000015B8  E849                     946              LSR.W   #4,D1       000X
000015BA  4FF8 13A8                947              LEA     numTable ,A7 Load the table into A7
000015BE  C2FC 0008                948              MULU    #8,D1
000015C2  4EB7 1000                949              JSR     (A7,D1)     Jump to subroutine of value at D1 
000015C6                           950              *next 4MSB  *X**
000015C6  4241                     951              CLR     D1
000015C8  3204                     952              MOVE.W  D4,D1       *X**
000015CA  E949                     953              LSL.W   #4,D1       X**0        
000015CC  E049                     954              LSR.W   #8,D1       00X*
000015CE  E849                     955              LSR.W   #4,D1       000X
000015D0  4FF8 13A8                956              LEA     numTable ,A7 Load the table into A7
000015D4  C2FC 0008                957              MULU    #8,D1
000015D8  4EB7 1000                958              JSR     (A7,D1)     Jump to subroutine of value at D1
000015DC                           959              *next 4MSB  **X*
000015DC  4241                     960              CLR     D1
000015DE  1204                     961              MOVE.B  D4,D1       00X*
000015E0  E809                     962              LSR.B   #4,D1       000X
000015E2  4FF8 13A8                963              LEA     numTable ,A7 Load the table into A7
000015E6  C2FC 0008                964                          MULU    #8,D1
000015EA  4EB7 1000                965              JSR     (A7,D1)     Jump to subroutine of value at D1
000015EE                           966              *last 4  bits   ***X
000015EE  4241                     967              CLR     D1
000015F0  1204                     968              MOVE.B  D4,D1       00*X
000015F2  E909                     969              LSL.B   #4,D1       00X0    
000015F4  E809                     970              LSR.B   #4,D1       000X
000015F6  4FF8 13A8                971              LEA     numTable ,A7 Load the table into A7
000015FA  C2FC 0008                972                          MULU    #8,D1
000015FE  4EB7 1000                973              JSR     (A7,D1)     Jump to subroutine of value at D1
00001602  4E75                     974              RTS            
00001604                           975  absoulteLong   
00001604  4241                     976              CLR     D1
00001606  4242                     977              CLR     D2 
00001608  14FC 0024                978              MOVE.B  #'$',(A2)+ 
0000160C  2404                     979              MOVE.L  D4,D2       D2 will be used for later
0000160E  E08C                     980              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001610  E08C                     981              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001612                           982              *4MSB   X***
00001612  4241                     983              CLR     D1
00001614  3204                     984              MOVE.W  D4,D1       X***
00001616  E049                     985              LSR.W   #8,D1       00X*
00001618  E849                     986              LSR.W   #4,D1       000X
0000161A  4FF8 13A8                987              LEA     numTable ,A7 Load the table into A7
0000161E  C2FC 0008                988              MULU    #8,D1
00001622  4EB7 1000                989              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001626                           990              *next 4MSB  *X**
00001626  4241                     991              CLR     D1
00001628  3204                     992              MOVE.W  D4,D1       *X**
0000162A  E949                     993              LSL.W   #4,D1       X**0        
0000162C  E049                     994              LSR.W   #8,D1       00X*
0000162E  E849                     995              LSR.W   #4,D1       000X
00001630  4FF8 13A8                996              LEA     numTable ,A7 Load the table into A7
00001634  C2FC 0008                997              MULU    #8,D1
00001638  4EB7 1000                998              JSR     (A7,D1)     Jump to subroutine of value at D1
0000163C                           999              *next 4MSB  **X*
0000163C  4241                    1000              CLR     D1
0000163E  1204                    1001              MOVE.B  D4,D1       00X*
00001640  E809                    1002              LSR.B   #4,D1       000X
00001642  4FF8 13A8               1003              LEA     numTable ,A7 Load the table into A7
00001646  C2FC 0008               1004                          MULU    #8,D1
0000164A  4EB7 1000               1005              JSR     (A7,D1)     Jump to subroutine of value at D1
0000164E                          1006              *last 4  bits   ***X
0000164E  4241                    1007              CLR     D1
00001650  1204                    1008              MOVE.B  D4,D1       00*X
00001652  E909                    1009              LSL.B   #4,D1       00X0    
00001654  E809                    1010              LSR.B   #4,D1       000X
00001656  4FF8 13A8               1011              LEA     numTable ,A7 Load the table into A7
0000165A  C2FC 0008               1012                          MULU    #8,D1
0000165E  4EB7 1000               1013              JSR     (A7,D1)     Jump to subroutine of value at D1
00001662                          1014              *4MSB   X***
00001662  4241                    1015              CLR     D1
00001664  3202                    1016              MOVE.W  D2,D1
00001666  E049                    1017              LSR.W   #8,D1            00X*
00001668  E849                    1018              LSR.W   #4,D1            000X
0000166A  C2FC 0008               1019              MULU    #8,D1
0000166E  4FF8 13A8               1020              LEA     numTable ,A7 Load the table into A7
00001672  4EB7 1000               1021              JSR     (A7,D1)     Jump to subroutine of value at D1
00001676                          1022              *next 4MSB  *X**
00001676  4241                    1023              CLR     D1
00001678  3202                    1024              MOVE.W  D2,D1
0000167A  E949                    1025              LSL.W   #4,D1       X**0
0000167C  E049                    1026              LSR.W   #8,D1       00X*
0000167E  E809                    1027              LSR.B   #4,D1       000X
00001680  C2FC 0008               1028              MULU    #8,D1
00001684  4FF8 13A8               1029              LEA     numTable ,A7 Load the table into A7
00001688  4EB7 1000               1030              JSR     (A7,D1)     Jump to subroutine of value at D1
0000168C                          1031              *next 4MSB  **X*
0000168C  4241                    1032              CLR     D1
0000168E  1202                    1033              MOVE.B  D2,D1       00X*
00001690  E809                    1034              LSR.B   #4,D1       000X
00001692  C2FC 0008               1035              MULU    #8,D1
00001696  4FF8 13A8               1036              LEA     numTable ,A7 Load the table into A7
0000169A  4EB7 1000               1037              JSR     (A7,D1)     Jump to subroutine of value at D1
0000169E                          1038              *next 4MSB  ***X
0000169E  4241                    1039              CLR     D1
000016A0  1202                    1040              MOVE.B  D2,D1       00*X
000016A2  E909                    1041              LSL.B   #4,D1       00X0
000016A4  E809                    1042              LSR.B   #4,D1       000X
000016A6  C2FC 0008               1043              MULU    #8,D1
000016AA  4FF8 13A8               1044              LEA     numTable ,A7 Load the table into A7
000016AE  4EB7 1000               1045              JSR     (A7,D1)     Jump to subroutine of value at D1
000016B2                          1046             
000016B2                          1047  
000016B2  4E75                    1048              RTS
000016B4                          1049  
000016B4                          1050  
000016B4                          1051  
000016B4                          1052  
000016B4                          1053  
000016B4                          1054  
000016B4                          1055  
000016B4                          1056  
000016B4                          1057  
000016B4                          1058  
000016B4                          1059  
000016B4                          1060  
000016B4                          1061  
000016B4                          1062  
000016B4                          1063  
000016B4                          1064  
000016B4                          1065  
000016B4                          1066  
000016B4                          1067  
000016B4                          1068  
000016B4                          1069  
000016B4                          1070  
000016B4                          1071  
000016B4                          1072  -------------------- end include --------------------
000016B4                          1073  
000016B4                          1074  
000016B4                          1075              
000016B4                          1076  opError                             
000016B4  2608                    1077              MOVE.L  A0,D3
000016B6  2C03                    1078              MOVE.L  D3,D6
000016B8  45F9 0000067C           1079              LEA     bad_code_buffer,A2
000016BE  7E02                    1080              MOVE.L  #2,D7
000016C0  4EB8 109E               1081              JSR     write_data_in_D3_to_buffer
000016C4                          1082              
000016C4  14FC 0020               1083              MOVE.B  #' ',(A2)+      ;print spaces
000016C8  14FC 0020               1084              MOVE.B  #' ',(A2)+      ;print spaces
000016CC  14FC 0020               1085              MOVE.B  #' ',(A2)+      ;print spaces
000016D0  14FC 0020               1086              MOVE.B  #' ',(A2)+      ;print spaces
000016D4  14FC 0044               1087              MOVE.B  #'D',(A2)+      ;print D
000016D8  14FC 0041               1088              MOVE.B  #'A',(A2)+      ;print A
000016DC  14FC 0054               1089              MOVE.B  #'T',(A2)+      ;print T
000016E0  14FC 0041               1090              MOVE.B  #'A',(A2)+      ;print A
000016E4  14FC 0020               1091              MOVE.B  #' ',(A2)+      ;print spaces
000016E8  14FC 0020               1092              MOVE.B  #' ',(A2)+      ;print spaces
000016EC  14FC 0020               1093              MOVE.B  #' ',(A2)+      ;print spaces
000016F0  14FC 0020               1094              MOVE.B  #' ',(A2)+      ;print spaces
000016F4                          1095              
000016F4                          1096              
000016F4  14FC 0046               1097              MOVE.B  #'F',(A2)+      ;print spaces
000016F8  14FC 0046               1098              MOVE.B  #'F',(A2)+      ;print spaces
000016FC  14FC 0046               1099              MOVE.B  #'F',(A2)+      ;print spaces
00001700  14FC 0046               1100              MOVE.B  #'F',(A2)+      ;print spaces
00001704                          1101              
00001704                          1102              
00001704                          1103              ;MOVE.L  (A0),D3
00001704                          1104              ;MOVE.L  D3,D6
00001704                          1105              ;MOVE.L  #1,D7
00001704                          1106              ;JSR     write_data_in_D3_to_buffer
00001704                          1107              
00001704  14BC 0000               1108              MOVE.B  #$00,(A2) * add NULL value to print string
00001708  43F9 0000067C           1109              LEA     bad_code_buffer,A1
0000170E  103C 000D               1110              MOVE.B  #13,D0
00001712  4E4F                    1111              TRAP    #15   
00001714                          1112           
00001714  6000 F948               1113              BRA     get_next_instruction           
00001718                          1114  printCode   
00001718  14BC 0000               1115              MOVE.B  #$00,(A2)   * add NULL value to print string
0000171C  070A 0000               1116              MOVEP   (A2),D3
00001720  43F9 00000624           1117              LEA     good_code_buffer,A1 * load buffer for good code to print
00001726  700D                    1118              MOVEQ   #13,D0
00001728  4E4F                    1119              TRAP    #15         * display code
0000172A                          1120    
0000172A  6000 F932               1121              BRA     get_next_instruction                     
0000172E                          1122  * OP Codes -------------------------------------------------
0000172E  =00000000               1123  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
0000172E  =00000001               1124  bin0001     EQU     %0001   ;MOVE.B
0000172E  =00000002               1125  bin0010     EQU     %0010   ;MOVE.L
0000172E  =00000003               1126  bin0011     EQU     %0011   ;MOVE.W
0000172E  =00000004               1127  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
0000172E  =00000005               1128  bin0101     EQU     %0101   ;SUBQ
0000172E  =00000006               1129  bin0110     EQU     %0110   ;Bcc
0000172E  =00000007               1130  bin0111     EQU     %0111   ;MOVEQ
0000172E  =00000008               1131  bin1000     EQU     %1000   ;DIVU.W
0000172E  =00000009               1132  bin1001     EQU     %1001   ;SUB, SUBA
0000172E  =0000000B               1133  bin1011     EQU     %1011   ;CMP, CMPA, EOR
0000172E  =0000000C               1134  bin1100     EQU     %1100   ;AND, MULS.W
0000172E  =0000000D               1135  bin1101     EQU     %1101   ;ADD, ADDA
0000172E  =0000000E               1136  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
0000172E                          1137  
0000172E                          1138  
0000172E                          1139              
0000172E                          1140  ;LOOP:
0000172E                          1141                  *-compare the adress pointers current address with ending address to see if we need to continue
0000172E                          1142                  *- load the address registrer (pointer/ this helps us look at data)
0000172E                          1143                  *-load address register number into data register
0000172E                          1144                  
0000172E                          1145                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
0000172E                          1146                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
0000172E                          1147                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
0000172E                          1148                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
0000172E                          1149                  ;BEQ     FINISH      ;finish they are equal
0000172E                          1150                  ;RTS
0000172E                          1151  
0000172E                          1152          
0000172E                          1153          *----------END OF I/O SECTION*---
0000172E                          1154          *----------Start of OPCODE SUBROUTINE
0000172E  =0000A000               1155  stack            EQU        $A000  
0000172E  =0000000C               1156  shift            EQU        12                   * Shift 12 bits 
00000400                          1157                   ORG        $400
00000400                          1158           
00000400  4FF9 0000A000           1159  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           1160                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    1161                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           1162                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    1163                   MOVE.W     (A1),D0
00000416  123C 000C               1164                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    1165                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               1166                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               1167                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          1168                   
00000424  4EF9 00000484           1169  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           1170                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           1171                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           1172                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           1173                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           1174                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           1175                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           1176                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           1177                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           1178                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           1179                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           1180                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           1181                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           1182                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           1183                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           1184                   JMP        code1111        *Special/Reserved
00000484                          1185                   
00000484  4E72 2700               1186  code0000         STOP       #$2700
00000488  4E72 2700               1187  code0001         STOP       #$2700
0000048C  4E72 2700               1188  code0010         STOP       #$2700
00000490  4E72 2700               1189  code0011         STOP       #$2700
00000494  267C 00000000           1190  code0100         MOVE.L     #0,A3
0000049A  4241                    1191                   CLR        D1
0000049C  43F9 000006D5           1192                   LEA        enter_start_AD,A1
000004A2  700E                    1193                   MOVE.L     #14,D0
000004A4  4E4F                    1194                   TRAP       #15
000004A6  4E75                    1195                   RTS
000004A8  4E72 2700               1196  code0101         STOP       #$2700
000004AC  4E72 2700               1197  code0110         STOP       #$2700
000004B0  4E72 2700               1198  code0111         STOP       #$2700
000004B4  4E72 2700               1199  code1000         STOP       #$2700
000004B8  4E72 2700               1200  code1001         STOP       #$2700
000004BC  4E72 2700               1201  code1010         STOP       #$2700
000004C0  4E72 2700               1202  code1011         STOP       #$2700
000004C4  4E72 2700               1203  code1100         STOP       #$2700
000004C8  4E72 2700               1204  code1101         STOP       #$2700
000004CC  4E72 2700               1205  code1110         STOP       #$2700
000004D0  4E72 2700               1206  code1111         STOP       #$2700
000004D4                          1207  
000004D4                          1208  FINISH:
000004D4                          1209          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    1210              MOVE.L  A0,D3
000004D6  2C03                    1211              MOVE.L  D3,D6
000004D8  45F9 00000624           1212              LEA     good_code_buffer,A2
000004DE                          1213   
000004DE                          1214              
000004DE  14FC 0046               1215              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               1216              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               1217              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               1218              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               1219              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               1220              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               1221              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               1222              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               1223              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               1224              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               1225              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               1226              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               1227              MOVE.B  #'R',(A2)+
00000512  2610                    1228              MOVE.L  (A0),D3
00000514  2C03                    1229              MOVE.L  D3,D6
00000516  7E01                    1230              MOVE.L  #1,D7
00000518                          1231  
00000518                          1232              
00000518  14BC 0000               1233              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           1234              LEA     good_code_buffer,A1
00000522  103C 000D               1235              MOVE.B  #13,D0
00000526  4E4F                    1236              TRAP    #15   
00000528  FFFF FFFF               1237              SIMHALT
0000052C                          1238  
0000052C                          1239  *-390 -> 406 WITH NOP AT 400
0000052C                          1240  
0000052C                          1241  
0000052C                          1242  hexToAscii:
0000052C                          1243  ones:
0000052C  3A02                    1244      MOVE.W  D2,D5
0000052E  CAFC 0008               1245      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13A8               1246      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               1247      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          1248      *-adding res
0000053A                          1249      ;ADD     D2,D7
0000053A                          1250      
0000053A                          1251  
0000053A  4E75                    1252      RTS
0000053C                          1253  
0000053C                          1254  
0000053C                          1255  
0000053C                          1256  
0000053C                          1257  
0000053C                          1258  
0000053C                          1259  
0000053C                          1260  
0000053C                          1261  
0000053C                          1262  
0000053C                          1263  
0000053C                          1264  
0000053C                          1265  
0000053C                          1266  *-Parses input - take input from user to create a memory address
0000053C                          1267  *- entry is parsed to make sure it falls within a valid range
0000053C                          1268  *-good inputs are converteed to hex
0000053C                          1269  *-the entered addres get's stored in d3
0000053C                          1270  *-
0000053C                          1271  *-
0000053C                          1272  
0000053C                          1273  
0000053C                          1274  
0000053C  7C00                    1275  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    1276                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          1277                  
00000540                          1278                  *-CHECK TO SEE INPUT DATA
00000540  B205                    1279                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               1280                  BEQ     error_no_input no input was found
00000546  0C41 0008               1281                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               1282                  BGT     error_bad_entry
0000054E                          1283                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               1284                  BRA     parse_each
00000552                          1285  
00000552  7C00                    1286  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    1287                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    1288                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               1289                  BEQ     error_no_input
0000055C  0C41 0008               1290                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               1291                  BGT     error_bad_entry
00000564                          1292                  ;BGT     error_to_many_char
00000564  6000 0002               1293                  BRA     parse_each        
00000568                          1294  
00000568                          1295  *parse each analyzes each ind character entered
00000568                          1296  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          1297  
00000568  1419                    1298  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    1299                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               1300                  BEQ     parse_complete  end of user input
00000570  B43C 0066               1301                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               1302                  BGT     hex_compare
00000578                          1303                  
00000578                          1304                  *-
00000578                          1305                  *Comapare the decimal number values betyween 0 -9 first
00000578                          1306                  *
00000578                          1307                  *-
00000578  B43C 002F               1308  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          1309                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               1310                  BLE     error_char 
00000580  B43C 003A               1311                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               1312                  BLT     dec_convert
00000588                          1313                  *-
00000588                          1314                  *there are no number values, lets check alpha characters
00000588                          1315                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          1316                  *->71 'G' then we should go and convert to hex range A-F
00000588                          1317                  *-UPPER case
00000588                          1318                  *-      
00000588  B43C 0041               1319  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               1320                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               1321                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               1322                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               1323  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               1324                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               1325                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               1326                  BLT     lower_ascii
000005A8                          1327                  
000005A8                          1328           
000005A8  0402 0030               1329  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          1330                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    1331                  ASL.L   #4,D6
000005AE  DC02                    1332                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    1333                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          1334                                      *- 97 - 103
000005B2                          1335                  
000005B2                          1336                              
000005B2                          1337  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          1338  
000005B2  0402 0037               1339  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    1340                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    1341                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    1342                  BRA     parse_each  parse next item
000005BC                          1343  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               1344  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    1345                  ASL.L   #4,D6
000005C2  DC02                    1346                  ADD.B   D2,D6
000005C4  60A2                    1347                  BRA     parse_each
000005C6                          1348  
000005C6  7801                    1349  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    1350                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           1351  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    1352                  MOVE.L  #1,D0
000005D2  4E4F                    1353                  TRAP    #15
000005D4                          1354                  ;JMP     get_input
000005D4  43F9 000006C2           1355  error_char      LEA bad_char,A1
000005DA  4E4F                    1356                  trap #15
000005DC                          1357                  ;JMP get_input0
000005DC  43F9 000006AD           1358  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    1359                  TRAP #15
000005E4                          1360                  ;JMP  get_input
000005E4                          1361  
000005E4                          1362  
000005E4  FFFF FFFF               1363      SIMHALT             ; halt simulator
000005E8                          1364  
000005E8                          1365  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   1366  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          1367  
00000624                          1368  
00000624                          1369  good_code_buffer    DS.B    88
0000067C                          1370  
0000067C                          1371  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   1372  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   1373  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   1374  bad_char    DC.B    'Bad Char detected.',0
000006D5                          1375  *-errors
000006D5                          1376  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   1377  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          1378  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          1379  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          1380  
00000754= 45 6E 74 65 72 20 ...   1381  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          1382  
00000789                          1383  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               1384  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    1385                          MOVE.L  #1,D0
000007C2  4E4F                    1386                          TRAP    #15
000007C4                          1387                          ;JMP     get_input
000007C4                          1388  
000007C4                          1389  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          1390  
000007C4                          1391      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        1604
ABSOULTEWORD        15AA
ADDRESSCOUNT        104C
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_NEXT_INSTRUCTION  105E
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_COMPARE         588
IA000               113A
IA001               119C
IA010               1136
IA011               1138
IA100               125C
IMMABTABLE          110E
IMMEDIATEDATA       157E
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12CA
M0001               12D6
M0010               12E2
M0011               12F6
M0100               130E
M0101               1326
M0110               1328
M0111               132A
MAINLOOP            1036
MODETABLE           128A
N0000               1428
N0001               142E
N0010               1434
N0011               143A
N0100               1440
N0101               1446
N0110               144C
N0111               1452
N1000               1458
N1001               145E
N1010               1464
N1011               146A
N1100               1470
N1101               1476
N1110               147C
N1111               1482
NO_ENTRY            69A
NUMTABLE            13A8
ONES                52C
OP0001              14E4
OP0100              1488
OPERROR             16B4
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           1718
PRINT_WORD          10B4
REGISTERPRINT       132C
REGNUMTABLE         1338
RN0000              1378
RN0001              137E
RN0010              1384
RN0011              138A
RN0100              1390
RN0101              1396
RN0110              139C
RN0111              13A2
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WRITE_DATA_IN_D3_TO_BUFFER  109E
_NOP                1498
_RTS                14BE
