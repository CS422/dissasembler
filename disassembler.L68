00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/23/2017 4:49:57 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  *-----------------------------------------------------------
00001000                            15  * Title      : (!!!!!!STABLE!!!!) Master branch
00001000                            16  * Written by : Danny Ly & Edward Chang
00001000                            17  * Date       : 4/27/2017
00001000                            18  * Description: Our dissasembler for 68K
00001000                            19  *-----------------------------------------------------------
00001000                            20  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                            21      ORG    $1000
00001000                            22      
00001000  =0000000D                 23  CR  EQU $0D
00001000  =0000000A                 24  LF  EQU $0A
00001000  =00007000                 25  startLoc    EQU $7000
00001000                            26  
00001000                            27  *--- Notes
00001000                            28  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            29  * A4 will be our main pointer to current memory address and current data
00001000                            30  * D3 will be dedicated register to manipulate our data in
00001000                            31  *
00001000                            32  *
00001000                            33  *---------
00001000                            34  START:                  
00001000                            35              ; first instruction of program
00001000                            36              ;LEA     stack,SP
00001000                            37              *-present the hello message
00001000  43F9 000005E8             38              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 39              MOVE.B  #14,D0
0000100A  4E4F                      40              TRAP    #15
0000100C                            41              
0000100C                            42  *           
0000100C                            43  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            44  *
0000100C                            45  ** Put program code here
0000100C                            46  **-----
0000100C                            47  **This program starts by given a starting address and an ending address disassemble
0000100C                            48  **the binary code that is at that location.
0000100C                            49  **
0000100C                            50  **
0000100C                            51  **----
0000100C                            52  *
0000100C                            53  **-------
0000100C                            54  ** Needs to check for odd addressing**
0000100C                            55  **
0000100C                            56  **
0000100C                            57  **-----
0000100C                            58  *                *---------------------I/O SECTION
0000100C                            59  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            60  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            61  *                * statically in memory and retrieved when needed to compare
0000100C                            62  *                * this free's up a adress/data register to use
0000100C                            63  *                *-----------------------
0000100C                            64  *                
0000100C                            65  *                
0000100C                            66  *get_input_start_addr 
0000100C                            67  *                MOVE.L  #0,A3
0000100C                            68  *                CLR     D1
0000100C                            69  *                LEA     enter_start_AD,A1
0000100C                            70  *                MOVE.L  #14,D0
0000100C                            71  *                TRAP    #15
0000100C                            72  *                
0000100C                            73  *                
0000100C                            74  *
0000100C                            75  *      
0000100C                            76  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            77  *                MOVE.L  #2,D0
0000100C                            78  *                TRAP    #15
0000100C                            79  *                JSR     parse_input             parse the starting address
0000100C                            80  *                
0000100C                            81  *                
0000100C                            82  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            83  *                
0000100C                            84  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            85  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            86  *
0000100C                            87  *
0000100C                            88  *get_input_end_addr
0000100C                            89  *                MOVE.L  #0,A3
0000100C                            90  *                CLR     D1
0000100C                            91  *                LEA     userEnd,A1
0000100C                            92  *                MOVE.L  #14,D0
0000100C                            93  *                TRAP    #15
0000100C                            94  *                
0000100C                            95  *
0000100C                            96  *
0000100C                            97  *                LEA     userEndAddrInput,A1
0000100C                            98  *                MOVE.B  userEnd,D1
0000100C                            99  *                MOVE.L  #2,D0
0000100C                           100  *                TRAP    #15
0000100C                           101  *                JSR     parse_end
0000100C                           102  *
0000100C                           103  *                
0000100C                           104  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                           105  *  
0000100C                           106  *             
0000100C                           107  *STORE_SRT_END:
0000100C                           108  *               
0000100C                           109  *                      ;store the starting and ending address into memory out of range
0000100C                           110  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                           111  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           112  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           113  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           114  *            MOVE.L  A5,A4
0000100C                           115              
0000100C                           116              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           117              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           118              *
0000100C  2C3C 00000996            119              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     120              MOVE.L  D6,A5       Move D6 into a5
00001014                           121              
00001014  2C3C 000009CF            122              MOVE.L  #$9CF,D6
0000101A  2C46                     123              MOVE.L  D6,A6
0000101C                           124              
0000101C                           125              
0000101C  23CD 00FFFF00            126              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            127              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     128              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           129              *
0000102A                           130              *
0000102A                           131              *-------------END OF TESING CODE-----------
0000102A                           132          
0000102A  6000 003A                133              BRA get_next_instruction
0000102E                           134                           
0000102E                           135                           
0000102E                           136     
0000102E                           137  *---move_addresses:
0000102E                           138                                  
0000102E                           139                  *-MOVE 2 INTO DATA REG
0000102E                           140                  
0000102E                           141                  ;JSR     LOOP
0000102E                           142                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           143                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           144                  
0000102E                           145                  *----MOVE.W  A4,A0
0000102E                           146                  
0000102E                           147                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           148                  *----MOVE.B  #2,D4
0000102E                           149                  
0000102E                           150                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           151                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           152                  *------MOVE.L  D3,D7
0000102E                           153                  
0000102E                           154  
0000102E                           155  
0000102E                           156  
0000102E                           157                  *------LEA     good_code_buffer,A2 load again
0000102E                           158                  *------JSR     print_d3
0000102E                           159                  
0000102E                           160                  
0000102E                           161                  ;JSR     get_opcode 
0000102E                           162  
0000102E                           163                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           164                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           165                  ;SIMHALT
0000102E                           166  
0000102E                           167  
0000102E                           168  * ---------------------------------------------------------- 
0000102E                           169  * Decode ---------------------------------------------------
0000102E  49F8 7000                170              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 0032                171              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           172       
00001036                           173  mainLoop          
00001036                           174              *-----
00001036                           175              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           176              *- listing of finished and un finished work
00001036                           177              *-          ***Machine Code saved in D6*****
00001036                           178              *-----
00001036                           179  
00001036  E84B                     180              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           181              
00001038                           182              ;compare bits to instructions
00001038                           183              
00001038  B63C 0001                184              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           185              *- Machine code saved in D6
0000103C  6700 04D2                186              BEQ     op0001      ;branch to op0001
00001040                           187              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           188              ;BEQ     op0011      ;branch to op0011
00001040                           189              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           190              ;BEQ     op0010      ;branch to op0010           
00001040                           191              ;CMP.B   #bin0111,D3 ;MOVEQ
00001040                           192              ;BEQ     op0111      ;branch to op0111                        
00001040  B63C 0004                193              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
00001044  6700 046E                194              BEQ     op0100          branch to op0100                        
00001048  B63C 000D                195              CMP.B   #bin1101,D3 ;ADD, ADDA
0000104C  6700 0692                196              BEQ     op1101      ;branch to op1101            
00001050                           197              ;CMP.B   #bin1001,D3 ;SUB, SUBA
00001050                           198              ;BEQ     op1001      ;branch to op1001                        
00001050                           199              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001050                           200              ;BEQ     op0000      ;branch to op0000                       
00001050                           201              ;CMP.B   #bin0101,D3 ;SUBQ
00001050                           202              ;BEQ     op0101      ;branch to op0101                         
00001050                           203              ;CMP.B   #bin0110,D3 ;Bcc
00001050                           204              ;BEQ     op0110      ;branch to op0110            
00001050                           205              ;CMP.B   #bin1000,D3 ;DIVU.W
00001050                           206              ;BEQ     op1000      ;branch to op1000                                      
00001050                           207              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001050                           208              ;BEQ     op1011      ;branch to op1011 
00001050                           209              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001050                           210              ;BEQ     op1100      ;branch to op1100                                    
00001050                           211              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001050                           212              ;BEQ     op1110      ;branch to op1110            
00001050                           213              
00001050  6000 0724                214              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001054                           215              
00001054                           216              ;branch to display opError display
00001054                           217              
00001054                           218              ;print all the things...
00001054                           219   *******************************************************************************
00001054                           220  *
00001054                           221  *******************************************************************************
00001054                           222  addressCount 
00001054                           223              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001054                           224              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001054                           225              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001054                           226              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001054                           227              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001054                           228              
00001054  4BF9 00FFFF10            229              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
0000105A  2215                     230              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000105C  2A0C                     231              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000105E  B285                     232              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001060  6F00 F472                233              BLE     FINISH      * branch to end if ending address reached
00001064  4E75                     234              RTS                 * return IF WE HAVE NOT FINISHED
00001066                           235              
00001066                           236  get_next_instruction:
00001066  4EB8 1054                237                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
0000106A                           238                  *-line count
0000106A  4245                     239                  CLR D5             *-CLEAR THIS REGISTER/
0000106C                           240                  
0000106C  45F9 00000624            241                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
00001072  304C                     242                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
00001074  7E02                     243                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
00001076  2608                     244                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001078  2C03                     245                  MOVE.L  D3,D6   
0000107A  45F9 00000624            246                  LEA     good_code_buffer,A2
00001080                           247                                  *-write the current data moved to data register d3
00001080  4EB9 000010A6            248                  JSR     write_data_in_D3_to_buffer
00001086                           249                  
00001086  14BC 0020                250                  MOVE.B  #' ',(A2)
0000108A  14BC 0020                251                  MOVE.B  #' ',(A2)
0000108E  14BC 0020                252                  MOVE.B  #' ',(A2)
00001092  14BC 0020                253                  MOVE.B  #' ',(A2)
00001096                           254                  
00001096  4286                     255                  CLR.L   D6
00001098  4283                     256                  CLR.L   D3
0000109A                           257                  
0000109A  3A4C                     258                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
0000109C                           259                  
0000109C  3C1C                     260                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
0000109E                           261                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
0000109E                           262  
0000109E  2814                     263                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010A0  3606                     264                  MOVE.W  D6,D3
000010A2  E04B                     265                  LSR.W   #8,D3
000010A4                           266                  
000010A4  6090                     267                  BRA     mainLoop
000010A6                           268                  
000010A6                           269  write_data_in_D3_to_buffer:
000010A6                           270              *------
000010A6                           271              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010A6                           272              *
000010A6                           273              *
000010A6                           274              *---------
000010A6  BE7C 0002                275                  CMP.W   #2,D7 ERROR checking
000010AA  6600 0010                276                  BNE     print_word branch off to write the first word of the line
000010AE  4843                     277                  SWAP    D3
000010B0  4846                     278                  SWAP    D6
000010B2  4EB9 000010BC            279                  JSR     print_word
000010B8  4846                     280                  SWAP    D6
000010BA  2606                     281                  MOVE.L  D6,D3
000010BC                           282                  
000010BC                           283   print_word:
000010BC                           284                  *-****
000010BC                           285                  * called 4 times to decode from hex to ascii the first word 
000010BC                           286                  *   using the below jump table
000010BC                           287                  *
000010BC                           288                  *-------
000010BC  E04B                     289                  LSR.W   #8,D3
000010BE  E84B                     290                  LSR.W   #4,D3
000010C0  C6FC 0008                291                  MULU.W  #8,D3
000010C4  4DF9 000013B0            292                  LEA     numTable,A6
000010CA  4EB6 3000                293                  JSR     (A6,D3)
000010CE                           294                  
000010CE  3606                     295                  MOVE.W  D6,D3   COPY DATA
000010D0  E94B                     296                  LSL.W   #4,D3
000010D2  E04B                     297                  LSR.W   #8,D3
000010D4  E84B                     298                  LSR.W   #4,D3
000010D6  C6FC 0008                299                  MULU.W  #8,D3
000010DA  4DF9 000013B0            300                  LEA     numTable,A6
000010E0  4EB6 3000                301                  JSR     (A6,D3)
000010E4                           302                  
000010E4  3606                     303                  MOVE.W  D6,D3
000010E6                           304                  
000010E6  E14B                     305                  LSL.W   #8,D3
000010E8  E04B                     306                  LSR.W   #8,D3
000010EA  E84B                     307                  LSR.W   #4,D3
000010EC  C6FC 0008                308                  MULU.W  #8,D3
000010F0  4DF9 000013B0            309                  LEA numTable,A6
000010F6  4EB6 3000                310                  JSR     (A6,D3)
000010FA                           311                  
000010FA                           312                  
000010FA  3606                     313                  MOVE.W  D6,D3
000010FC  E94B                     314                  LSL.W   #4,D3
000010FE  E14B                     315                  LSL.W   #8,D3
00001100  E04B                     316                  LSR.W   #8,D3
00001102  E84B                     317                  LSR.W   #4,D3
00001104  C6FC 0008                318                  MULU.W  #8,D3
00001108  4DF9 000013B0            319                  LEA     numTable,A6
0000110E  4EB6 3000                320                  JSR     (A6,D3)
00001112  5805                     321                  ADDI.B  #4,D5
00001114  4E75                     322                  RTS
00001116                           323  * -----------------------------------------------------------            
00001116                           324  * Jump Table immAbTable *************************************
00001116                           325  *** matches the associated Addressing mode     
00001116                           326  *************************************************************
00001116  4EB9 00001142            327  immAbTable  JSR     IA000   ;Absoulute Word
0000111C  4E75                     328              RTS             ;return, done printing
0000111E  4EB9 000011A4            329              JSR     IA001   ;Aboulute Long
00001124  4E75                     330              RTS             ;return, done printing
00001126  4EB9 0000113E            331              JSR     IA010   ;blank
0000112C  4E75                     332              RTS             ;return, done printing
0000112E  4EB9 00001140            333              JSR     IA011   ;blank
00001134  4E75                     334              RTS             ;return, done printing  
00001136  4EB9 00001264            335              JSR     IA100   ;immediate Data
0000113C  4E75                     336              RTS             ;return, done printing
0000113E                           337  * -----------------------------------------------------------            
0000113E  4E75                     338  IA010       RTS
00001140  4E75                     339  IA011       RTS
00001142                           340  * -----------------------------------------------------------            
00001142                           341  * Subroutine IA000   ------------------------------------------
00001142                           342  IA000                               ;absoulteWord   
00001142  14FC 0024                343              MOVE.B  #'$',(A2)+ 
00001146  E08C                     344              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001148  E08C                     345              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000114A                           346              *4MSB   X***
0000114A  4241                     347              CLR     D1
0000114C  3204                     348              MOVE.W  D4,D1       X***
0000114E  E049                     349              LSR.W   #8,D1       00X*
00001150  E849                     350              LSR.W   #4,D1       000X
00001152  4FF9 000013B0            351              LEA     numTable ,A7 Load the table into A7
00001158  C2FC 0008                352              MULU    #8,D1
0000115C  4EB7 1000                353              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001160                           354              *next 4MSB  *X**
00001160  4241                     355              CLR     D1
00001162  3204                     356              MOVE.W  D4,D1       *X**
00001164  E949                     357              LSL.W   #4,D1       X**0        
00001166  E049                     358              LSR.W   #8,D1       00X*
00001168  E849                     359              LSR.W   #4,D1       000X
0000116A  4FF9 000013B0            360              LEA     numTable ,A7 Load the table into A7
00001170  C2FC 0008                361              MULU    #8,D1
00001174  4EB7 1000                362              JSR     (A7,D1)     Jump to subroutine of value at D1
00001178                           363              *next 4MSB  **X*
00001178  4241                     364              CLR     D1
0000117A  1204                     365              MOVE.B  D4,D1       00X*
0000117C  E809                     366              LSR.B   #4,D1       000X
0000117E  4FF9 000013B0            367              LEA     numTable ,A7 Load the table into A7
00001184  C2FC 0008                368                          MULU    #8,D1
00001188  4EB7 1000                369              JSR     (A7,D1)     Jump to subroutine of value at D1
0000118C                           370              *last 4  bits   ***X
0000118C  4241                     371              CLR     D1
0000118E  1204                     372              MOVE.B  D4,D1       00*X
00001190  E909                     373              LSL.B   #4,D1       00X0    
00001192  E809                     374              LSR.B   #4,D1       000X
00001194  4FF9 000013B0            375              LEA     numTable ,A7 Load the table into A7
0000119A  C2FC 0008                376                          MULU    #8,D1
0000119E  4EB7 1000                377              JSR     (A7,D1)     Jump to subroutine of value at D1
000011A2  4E75                     378              RTS           
000011A4                           379  * -----------------------------------------------------------            
000011A4                           380  * Subroutine IA001   ------------------------------------------
000011A4                           381  IA001                               ;absoulteLong
000011A4  4241                     382              CLR     D1
000011A6  4242                     383              CLR     D2 
000011A8  14FC 0024                384              MOVE.B  #'$',(A2)+ 
000011AC  2404                     385              MOVE.L  D4,D2       D2 will be used for later
000011AE                           386  *----------- first Word Value D4
000011AE  E08C                     387              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011B0  E08C                     388              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011B2                           389              *4MSB   X***
000011B2  4241                     390              CLR     D1
000011B4  3204                     391              MOVE.W  D4,D1       X***
000011B6  E049                     392              LSR.W   #8,D1       00X*
000011B8  E849                     393              LSR.W   #4,D1       000X
000011BA  4FF9 000013B0            394              LEA     numTable ,A7 Load the table into A7
000011C0  C2FC 0008                395              MULU    #8,D1
000011C4  4EB7 1000                396              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011C8                           397              *next 4MSB  *X**
000011C8  4241                     398              CLR     D1
000011CA  3204                     399              MOVE.W  D4,D1       *X**
000011CC  E949                     400              LSL.W   #4,D1       X**0        
000011CE  E049                     401              LSR.W   #8,D1       00X*
000011D0  E849                     402              LSR.W   #4,D1       000X
000011D2  4FF9 000013B0            403              LEA     numTable ,A7 Load the table into A7
000011D8  C2FC 0008                404              MULU    #8,D1
000011DC  4EB7 1000                405              JSR     (A7,D1)     Jump to subroutine of value at D1
000011E0                           406              *next 4MSB  **X*
000011E0  4241                     407              CLR     D1
000011E2  1204                     408              MOVE.B  D4,D1       00X*
000011E4  E809                     409              LSR.B   #4,D1       000X
000011E6  4FF9 000013B0            410              LEA     numTable ,A7 Load the table into A7
000011EC  C2FC 0008                411                          MULU    #8,D1
000011F0  4EB7 1000                412              JSR     (A7,D1)     Jump to subroutine of value at D1
000011F4                           413              *last 4  bits   ***X
000011F4  4241                     414              CLR     D1
000011F6  1204                     415              MOVE.B  D4,D1       00*X
000011F8  E909                     416              LSL.B   #4,D1       00X0    
000011FA  E809                     417              LSR.B   #4,D1       000X
000011FC  4FF9 000013B0            418              LEA     numTable ,A7 Load the table into A7
00001202  C2FC 0008                419                          MULU    #8,D1
00001206  4EB7 1000                420              JSR     (A7,D1)     Jump to subroutine of value at D1
0000120A                           421  *---------  Second Word Value D2    **** XXXX
0000120A                           422              *4MSB   X***
0000120A  4241                     423              CLR     D1
0000120C  3202                     424              MOVE.W  D2,D1
0000120E  E049                     425              LSR.W   #8,D1            00X*
00001210  E849                     426              LSR.W   #4,D1            000X
00001212  C2FC 0008                427              MULU    #8,D1
00001216  4FF9 000013B0            428              LEA     numTable ,A7 Load the table into A7
0000121C  4EB7 1000                429              JSR     (A7,D1)     Jump to subroutine of value at D1
00001220                           430              *next 4MSB  *X**
00001220  4241                     431              CLR     D1
00001222  3202                     432              MOVE.W  D2,D1
00001224  E949                     433              LSL.W   #4,D1       X**0
00001226  E049                     434              LSR.W   #8,D1       00X*
00001228  E809                     435              LSR.B   #4,D1       000X
0000122A  C2FC 0008                436              MULU    #8,D1
0000122E  4FF9 000013B0            437              LEA     numTable ,A7 Load the table into A7
00001234  4EB7 1000                438              JSR     (A7,D1)     Jump to subroutine of value at D1
00001238                           439              *next 4MSB  **X*
00001238  4241                     440              CLR     D1
0000123A  1202                     441              MOVE.B  D2,D1       00X*
0000123C  E809                     442              LSR.B   #4,D1       000X
0000123E  C2FC 0008                443              MULU    #8,D1
00001242  4FF9 000013B0            444              LEA     numTable ,A7 Load the table into A7
00001248  4EB7 1000                445              JSR     (A7,D1)     Jump to subroutine of value at D1
0000124C                           446              *next 4MSB  ***X
0000124C  4241                     447              CLR     D1
0000124E  1202                     448              MOVE.B  D2,D1       00*X
00001250  E909                     449              LSL.B   #4,D1       00X0
00001252  E809                     450              LSR.B   #4,D1       000X
00001254  C2FC 0008                451              MULU    #8,D1
00001258  4FF9 000013B0            452              LEA     numTable ,A7 Load the table into A7
0000125E  4EB7 1000                453              JSR     (A7,D1)     Jump to subroutine of value at D1
00001262                           454             
00001262                           455  
00001262  4E75                     456              RTS
00001264                           457   
00001264                           458  * -----------------------------------------------------------            
00001264                           459  * Subroutine IA100   ------------------------------------------
00001264                           460  IA100                               ;immediateData
00001264  14FC 0023                461              MOVE.B  #'#',(A2)+ 
00001268  381D                     462              MOVE.W  (A5)+,D4    WE got the address for the operand
0000126A  3815                     463              MOVE.W  (A5),D4     Got the value of operand, immeditae data
0000126C                           464              *4MSB   00X*
0000126C  4242                     465              CLR     D2
0000126E  1404                     466              MOVE.B  D4,D2       00X*
00001270  E80A                     467              LSR.B   #4,D2       000X
00001272  C4FC 0008                468              MULU    #8,D2   
00001276  4FF9 000013B0            469              LEA     numTable ,A7 Load the table into A7
0000127C  4EB7 2000                470              JSR     (A7,D2)     Jump to subroutine of value at D2
00001280                           471              *last 4bits 00*X
00001280  4242                     472              CLR     D2
00001282  1404                     473              MOVE.B  D4,D2       00*X
00001284  E90A                     474              LSL.B   #4,D2       00X*
00001286  E80A                     475              LSR.B   #4,D2       000X
00001288  C4FC 0008                476              MULU    #8,D2   
0000128C                           477             
0000128C  4EB7 2000                478              JSR     (A7,D2)     Jump to subroutine of value at D2
00001290                           479  
00001290  4E75                     480              RTS
00001292                           481  
00001292                           482                            
00001292                           483  * -----------------------------------------------------------            
00001292                           484  * Jump Table modeTable ***************************************
00001292                           485  *** matches the associated Addressing mode     
00001292                           486  *************************************************************
00001292  4EB9 000012D2            487  modeTable   JSR     M0000   ;Dn, Data Register 
00001298  4E75                     488              RTS             ;return, done printing
0000129A  4EB9 000012DE            489              JSR     M0001   ;An, Address Register 
000012A0  4E75                     490              RTS             ;return, done printing
000012A2  4EB9 000012EA            491              JSR     M0010   ;(An), Address
000012A8  4E75                     492              RTS             ;return, done printing
000012AA  4EB9 000012FE            493              JSR     M0011   ;(An)+, Address with Postincrement
000012B0  4E75                     494              RTS             ;return, done printing
000012B2                           495              
000012B2  4EB9 00001316            496              JSR     M0100   ;-(An), Address with Predecrement
000012B8  4E75                     497              RTS             ;return, done printing
000012BA  4EB9 0000132E            498              JSR     M0101   ; blank - not assigned for this project
000012C0  4E75                     499              RTS
000012C2  4EB9 00001330            500              JSR     M0110   ; blank - not assigned for this project
000012C8  4E75                     501              RTS
000012CA  4EB9 00001332            502              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012D0  4E75                     503              RTS             ;return, done printing           
000012D2                           504  * -----------------------------------------------------------            
000012D2                           505  * Subroutine M0000 ------------------------------------------
000012D2                           506  M0000                               ;Dn
000012D2  14FC 0044                507              MOVE.B  #'D',(A2)+      ;display D
000012D6  264A                     508              MOVEA.L A2,A3           ;get address for n
000012D8  14FC 0020                509              MOVE.B  #' ',(A2)+      ;blank
000012DC  4E75                     510              RTS
000012DE                           511  
000012DE                           512  * -----------------------------------------------------------            
000012DE                           513  * Subroutine M0001 ------------------------------------------
000012DE                           514  M0001                               ;An
000012DE  14FC 0041                515              MOVE.B  #'A',(A2)+      ;display A
000012E2  264A                     516              MOVEA.L A2,A3           ;get address for n
000012E4  14FC 0020                517              MOVE.B  #' ',(A2)+      ;blank
000012E8  4E75                     518              RTS
000012EA                           519  
000012EA                           520  * -----------------------------------------------------------            
000012EA                           521  * Subroutine M0010 ------------------------------------------
000012EA                           522  M0010                               ;(An) Address
000012EA  14FC 0028                523              MOVE.B  #'(',(A2)+      ;display (
000012EE  14FC 0041                524              MOVE.B  #'A',(A2)+      ;display A
000012F2  264A                     525              MOVEA.L A2,A3           ;get address for n
000012F4  14FC 0020                526              MOVE.B  #' ',(A2)+      ;blank      
000012F8  14FC 0029                527              MOVE.B  #')',(A2)+      ;display )
000012FC  4E75                     528              RTS
000012FE                           529   
000012FE                           530  * -----------------------------------------------------------            
000012FE                           531  * Subroutine M0011 ------------------------------------------
000012FE                           532  M0011                               ;(An)+ 
000012FE  14FC 0028                533              MOVE.B  #'(',(A2)+      ;display (
00001302  14FC 0041                534              MOVE.B  #'A',(A2)+      ;display A
00001306  264A                     535              MOVEA.L A2,A3           ;get address for n 
00001308  14FC 0020                536              MOVE.B  #' ',(A2)+      ;blank     
0000130C  14FC 0029                537              MOVE.B  #')',(A2)+      ;display )
00001310  14FC 002B                538              MOVE.B  #'+',(A2)+      ;display +
00001314  4E75                     539              RTS
00001316                           540  
00001316                           541  * -----------------------------------------------------------            
00001316                           542  * Subroutine M0100 ------------------------------------------
00001316                           543  M0100                               ;-(An)
00001316  14FC 002D                544              MOVE.B  #'-',(A2)+      ;display -
0000131A  14FC 0028                545              MOVE.B  #'(',(A2)+      ;display (
0000131E  14FC 0041                546              MOVE.B  #'A',(A2)+      ;display A
00001322  264A                     547              MOVEA.L A2,A3           ;get address for n
00001324  14FC 0020                548              MOVE.B  #' ',(A2)+      ;blank      
00001328  14FC 0029                549              MOVE.B  #')',(A2)+      ;display )
0000132C  4E75                     550              RTS
0000132E                           551  
0000132E                           552  * -----------------------------------------------------------    
0000132E                           553  * Subroutine M0101 ------------------------------------------
0000132E                           554  M0101                               ;do nothing
0000132E  4E75                     555              RTS
00001330                           556  * -----------------------------------------------------------   
00001330                           557  * Subroutine M0110 ------------------------------------------
00001330                           558  M0110                               ;do nothing
00001330  4E75                     559              RTS
00001332                           560  * -----------------------------------------------------------     
00001332                           561  * Subroutine M0111 -------------------------Not finished-----
00001332                           562  * Register is stored at D1
00001332                           563  * ----case 1 : Register 100 => #imm => #XX 3 spaces
00001332                           564  * ----case 2 : Register 000 => (XXX).W => 
00001332                           565  * ----case 3 : Register 001 => (XXX).L
00001332                           566  * 
00001332                           567  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001332                           568  
00001332                           569  M0111                               ;(xxx).W, (xxx).L, #imm
00001332                           570                                      ; This will be taken care under opcode subroutine
00001332  4E75                     571              RTS
00001334                           572  
00001334                           573  * -----------------------------------------------------------
00001334                           574  * Subroutine immediateData 
00001334                           575  ;immediateData     
00001334                           576  ;            RTS
00001334                           577  * -----------------------------------------------------------
00001334                           578  
00001334                           579  * Subroutine registerPrint----------------------------------- 
00001334                           580  registerPrint
00001334  4FF9 000013B0            581              LEA     numTable,A7 Load the table into A7
0000133A  4EB7 1000                582              JSR     (A7,D1)     Jump to numTable with value at D1
0000133E  4E75                     583              RTS
00001340                           584  
00001340                           585  * -----------------------------------------------------------            
00001340                           586  * Jump Table regNumTable ***************************************
00001340                           587  *** prints the associated number of the register            *
00001340                           588  *** Also prints hex values for data and addresses           *
00001340                           589  *-----see below for decoding of what these sub-routines are
00001340                           590  *************************************************************
00001340  4EB9 00001380            591  regNumTable JSR     RN0000   ;register 0
00001346  4E75                     592              RTS             ;return, done printing
00001348  4EB9 00001386            593              JSR     RN0001   ;register 1
0000134E  4E75                     594              RTS             ;return, done printing
00001350  4EB9 0000138C            595              JSR     RN0010   ;register 2
00001356  4E75                     596              RTS             ;return, done printing
00001358  4EB9 00001392            597              JSR     RN0011   ;register 3
0000135E  4E75                     598              RTS             ;return, done printing
00001360  4EB9 00001398            599              JSR     RN0100   ;register 4
00001366  4E75                     600              RTS             ;return, done printing
00001368  4EB9 0000139E            601              JSR     RN0101   ;register 5
0000136E  4E75                     602              RTS             ;return, done printing
00001370  4EB9 000013A4            603              JSR     RN0110   ;register 6
00001376  4E75                     604              RTS             ;return, done printing
00001378  4EB9 000013AA            605              JSR     RN0111   ;register 7
0000137E  4E75                     606              RTS             ;return, done printing
00001380                           607  * -----------------------------------------------------------            
00001380                           608  * Subroutine RN0000 ------------------------------------------
00001380                           609  RN0000
00001380  16BC 0030                610              MOVE.B  #'0',(A3)      ;display 0
00001384  4E75                     611              RTS
00001386                           612  
00001386                           613  * -----------------------------------------------------------            
00001386                           614  * Subroutine RN0001 ------------------------------------------
00001386                           615  RN0001
00001386  16BC 0031                616              MOVE.B  #'1',(A3)      ;display 1
0000138A  4E75                     617              RTS
0000138C                           618  
0000138C                           619  * -----------------------------------------------------------            
0000138C                           620  * Subroutine RN0010 ------------------------------------------
0000138C                           621  RN0010
0000138C  16BC 0032                622              MOVE.B  #'2',(A3)      ;display 2
00001390  4E75                     623              RTS
00001392                           624   
00001392                           625  * -----------------------------------------------------------            
00001392                           626  * Subroutine RN0011 ------------------------------------------
00001392                           627  RN0011
00001392  16BC 0033                628              MOVE.B  #'3',(A3)      ;display 3
00001396  4E75                     629              RTS
00001398                           630  
00001398                           631  * -----------------------------------------------------------            
00001398                           632  * Subroutine RN0100 ------------------------------------------
00001398                           633  RN0100
00001398  16BC 0034                634              MOVE.B  #'4',(A3)      ;display 4
0000139C  4E75                     635              RTS
0000139E                           636  
0000139E                           637  * -----------------------------------------------------------            
0000139E                           638  * Subroutine RN0101 ------------------------------------------
0000139E                           639  RN0101
0000139E  16BC 0035                640              MOVE.B  #'5',(A3)      ;display 5
000013A2  4E75                     641              RTS
000013A4                           642  
000013A4                           643  * -----------------------------------------------------------            
000013A4                           644  * Subroutine RN0110 ------------------------------------------
000013A4                           645  RN0110
000013A4  16BC 0036                646              MOVE.B  #'6',(A3)      ;display 6
000013A8  4E75                     647              RTS
000013AA                           648              
000013AA                           649  * -----------------------------------------------------------            
000013AA                           650  * Subroutine RN0111 ------------------------------------------
000013AA                           651  RN0111
000013AA  16BC 0037                652              MOVE.B  #'7',(A3)      ;display 7
000013AE  4E75                     653              RTS
000013B0                           654  
000013B0                           655  * -----------------------------------------------------------            
000013B0                           656  * Jump Table numTable ***************************************
000013B0                           657  *** prints the associated number of the register            *
000013B0                           658  *** Also prints hex values for data and addresses           *
000013B0                           659  *-----see below for decoding of what these sub-routines are
000013B0                           660  *************************************************************
000013B0  4EB9 00001430            661  numTable    JSR     N0000   ;register 0
000013B6  4E75                     662              RTS             ;return, done printing
000013B8  4EB9 00001436            663              JSR     N0001   ;register 1
000013BE  4E75                     664              RTS             ;return, done printing
000013C0  4EB9 0000143C            665              JSR     N0010   ;register 2
000013C6  4E75                     666              RTS             ;return, done printing
000013C8  4EB9 00001442            667              JSR     N0011   ;register 3
000013CE  4E75                     668              RTS             ;return, done printing
000013D0  4EB9 00001448            669              JSR     N0100   ;register 4
000013D6  4E75                     670              RTS             ;return, done printing
000013D8  4EB9 0000144E            671              JSR     N0101   ;register 5
000013DE  4E75                     672              RTS             ;return, done printing
000013E0  4EB9 00001454            673              JSR     N0110   ;register 6
000013E6  4E75                     674              RTS             ;return, done printing
000013E8  4EB9 0000145A            675              JSR     N0111   ;register 7
000013EE  4E75                     676              RTS             ;return, done printing
000013F0  4EB9 00001460            677              JSR     N1000   ;num 8
000013F6  4E75                     678              RTS             ;return, done printing
000013F8  4EB9 00001466            679              JSR     N1001   ;num 9
000013FE  4E75                     680              RTS             ;return, done printing
00001400  4EB9 0000146C            681              JSR     N1010   ;num A
00001406  4E75                     682              RTS             ;return, done printing
00001408  4EB9 00001472            683              JSR     N1011   ;num B
0000140E  4E75                     684              RTS             ;return, done printing
00001410  4EB9 00001478            685              JSR     N1100   ;num C
00001416  4E75                     686              RTS             ;return, done printing
00001418  4EB9 0000147E            687              JSR     N1101   ;num D
0000141E  4E75                     688              RTS             ;return, done printing
00001420  4EB9 00001484            689              JSR     N1110   ;num E
00001426  4E75                     690              RTS             ;return, done printing
00001428  4EB9 0000148A            691              JSR     N1111   ;num F
0000142E  4E75                     692              RTS             ;return, done printing
00001430                           693  * -----------------------------------------------------------            
00001430                           694  * Subroutine N0000 ------------------------------------------
00001430                           695  N0000
00001430  14FC 0030                696              MOVE.B  #'0',(A2)+      ;display 0
00001434  4E75                     697              RTS
00001436                           698  
00001436                           699  * -----------------------------------------------------------            
00001436                           700  * Subroutine N0001 ------------------------------------------
00001436                           701  N0001
00001436  14FC 0031                702              MOVE.B  #'1',(A2)+      ;display 1
0000143A  4E75                     703              RTS
0000143C                           704  
0000143C                           705  * -----------------------------------------------------------            
0000143C                           706  * Subroutine N0010 ------------------------------------------
0000143C                           707  N0010
0000143C  14FC 0032                708              MOVE.B  #'2',(A2)+      ;display 2
00001440  4E75                     709              RTS
00001442                           710   
00001442                           711  * -----------------------------------------------------------            
00001442                           712  * Subroutine N0011 ------------------------------------------
00001442                           713  N0011
00001442  14FC 0033                714              MOVE.B  #'3',(A2)+      ;display 3
00001446  4E75                     715              RTS
00001448                           716  
00001448                           717  * -----------------------------------------------------------            
00001448                           718  * Subroutine N0100 ------------------------------------------
00001448                           719  N0100
00001448  14FC 0034                720              MOVE.B  #'4',(A2)+      ;display 4
0000144C  4E75                     721              RTS
0000144E                           722  
0000144E                           723  * -----------------------------------------------------------            
0000144E                           724  * Subroutine N0101 ------------------------------------------
0000144E                           725  N0101
0000144E  14FC 0035                726              MOVE.B  #'5',(A2)+      ;display 5
00001452  4E75                     727              RTS
00001454                           728  
00001454                           729  * -----------------------------------------------------------            
00001454                           730  * Subroutine N0110 ------------------------------------------
00001454                           731  N0110
00001454  14FC 0036                732              MOVE.B  #'6',(A2)+      ;display 6
00001458  4E75                     733              RTS
0000145A                           734              
0000145A                           735  * -----------------------------------------------------------            
0000145A                           736  * Subroutine N0111 ------------------------------------------
0000145A                           737  N0111
0000145A  14FC 0037                738              MOVE.B  #'7',(A2)+      ;display 7
0000145E  4E75                     739              RTS
00001460                           740  
00001460                           741  * ----------------------------------------------------------- 
00001460                           742  * Subroutine N1000 ------------------------------------------
00001460                           743  N1000       
00001460  14FC 0038                744              MOVE.B  #'8',(A2)+      ;display 8
00001464  4E75                     745              RTS
00001466                           746  
00001466                           747  * -----------------------------------------------------------            
00001466                           748  * Subroutine N1001 ------------------------------------------
00001466                           749  N1001   
00001466  14FC 0039                750              MOVE.B  #'9',(A2)+      ;display 9
0000146A  4E75                     751              RTS
0000146C                           752  
0000146C                           753  * -----------------------------------------------------------            
0000146C                           754  * Subroutine N1010 ------------------------------------------
0000146C                           755  N1010   
0000146C  14FC 0041                756              MOVE.B  #'A',(A2)+      ;display A
00001470  4E75                     757              RTS
00001472                           758  
00001472                           759  * -----------------------------------------------------------            
00001472                           760  * Subroutine N1011 ------------------------------------------
00001472                           761  N1011   
00001472  14FC 0042                762              MOVE.B  #'B',(A2)+      ;display B
00001476  4E75                     763              RTS
00001478                           764  
00001478                           765  * -----------------------------------------------------------            
00001478                           766  * Subroutine N1100 ------------------------------------------
00001478                           767  N1100   
00001478  14FC 0043                768              MOVE.B  #'C',(A2)+      ;display C
0000147C  4E75                     769              RTS
0000147E                           770  
0000147E                           771  * -----------------------------------------------------------            
0000147E                           772  * Subroutine N1101 ------------------------------------------
0000147E                           773  N1101   
0000147E  14FC 0044                774              MOVE.B  #'D',(A2)+      ;display D
00001482  4E75                     775              RTS
00001484                           776  
00001484                           777  * -----------------------------------------------------------            
00001484                           778  * Subroutine N1110 ------------------------------------------
00001484                           779  N1110   
00001484  14FC 0045                780              MOVE.B  #'E',(A2)+      ;display E
00001488  4E75                     781              RTS
0000148A                           782  
0000148A                           783  * -----------------------------------------------------------            
0000148A                           784  * Subroutine N1111 ------------------------------------------
0000148A                           785  N1111   
0000148A  14FC 0046                786              MOVE.B  #'F',(A2)+      ;display F
0000148E  4E75                     787              RTS   
00001490                           788  *-------------------- HELPER FUCNTION LOCATION -----------
00001490                           789  *- For Mode always D2
00001490                           790  *-- For Register always D1
00001490                           791  *-  Original Machine code In D6
00001490                           792  
00001490                           793  
00001490                           794  *            HELPER LOCATION
00001490                           795  *            HELPER LOCATION
00001490                           796  *            HELPER LOCATION
00001490                           797  *            HELPER LOCATION
00001490                           798  *            HELPER LOCATION
00001490                           799  
00001490                           800  get_0_3_bit
00001490                           801      
00001490                           802  
00001490                           803  get_3_5bit
00001490                           804  *------------------------------------------------------------
00001490                           805  * MachineCode: 0001 **** **** **BI T***
00001490                           806  * Only next last 3 bits which is stored at D0 => Source Address mode
00001490  4242                     807              CLR     D2
00001492  4241                     808              CLR     D1
00001494  1406                     809              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001496  E50A                     810              LSL.B   #2,D2       **** **** BIT* **00
00001498  EA0A                     811              LSR.B   #5,D2       **** **** 0000 0BIT
0000149A  4E75                     812              RTS
0000149C                           813              *------------------------------------------------------------
0000149C                           814  
0000149C                           815  
0000149C                           816  *-----------------------FUNCTION word or Long --------------
0000149C                           817  *----------Used to decipher if we are decoding a word or long
0000149C                           818  *-  This subroutine determines f the operations is a word or a long, 
0000149C                           819  *- we use the AND operator to clear out everything except for the 
0000149C                           820  *-3 bit which will be found in D3, we play with our data in D3
0000149C                           821  *-the word or LONG can be found in the OPCODE FIELD which is 
0000149C                           822  *-bits 8 _6
0000149C                           823  
0000149C                           824  WordOrLong  
0000149C                           825          *-find this OPMODE          
0000149C  4283                     826          CLR.L   D3
0000149E  3606                     827          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
000014A0                           828          *-we will store this in D3
000014A0                           829          *-using a shortcut the AND operator
000014A0                           830          *-we need these bits
000014A0                           831          *-[**** XXXX X[XXX] ****]
000014A0                           832              *- starts repersenting bits we do not need
000014A0                           833              *-shortcut we do not need to shift as much
000014A0                           834              *-minor optimization
000014A0                           835              *-AND F to keep 0 to throw away
000014A0  C67C 0FF0                836          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
000014A4  EC4B                     837          LSR.W   #6,D3
000014A6                           838          *- now weneed to get the last 3 bits
000014A6                           839          *-shift to the right by 6 makes the last 3 bits in the 
000014A6                           840          *-byte postion
000014A6                           841          *-[**** **** XXXX X[XXX]]m we need to clear everything else
000014A6  C67C 000F                842          AND.W   #$000F,D3 clear everything except the last byte we need
000014AA  E34B                     843          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
000014AC                           844          *-make sure everyhting is clearn except the last byte
000014AC  C67C 000F                845          AND.W   #$000F,D3
000014B0                           846          *-Shift back by 1 bit to the right
000014B0  E24B                     847          LSR.W   #1,D3
000014B2  4E75                     848          RTS 
000014B4                           849          
000014B4                           850              
000014B4                           851              
000014B4                           852              
000014B4                           853              
000014B4                           854              *---------------------------------------------------------------
000014B4                           855              *--------------------------------------------------------
000014B4                           856              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000014B4                           857              *-------------------------------------
000014B4                           858              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000014B4                           859  op0100      
000014B4                           860  
000014B4                           861  
000014B4                           862   
000014B4                           863              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000014B4                           864              ;BEQ     jumpToRt            
000014B4                           865              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000014B4                           866              ;BEQ     returnRt 
000014B4                           867             
000014B4                           868              ;JSR     WorL        
000014B4                           869              ;CMP.B   #hex7,D3    ;see if it's a LEA
000014B4                           870              ;BEQ     _lea        ;branch 
000014B4                           871              
000014B4                           872              ;JSR     clrORmm       
000014B4                           873              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000014B4                           874              ;BEQ     _clrB       ;branch             
000014B4                           875              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000014B4                           876              ;BEQ     _clrW       ;branch   
000014B4                           877              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000014B4                           878              ;BEQ     _clrL       ;branch
000014B4                           879    
000014B4                           880              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000014B4                           881              ;BEQ     _movemW     ;branch   
000014B4                           882              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000014B4                           883              ;BEQ     _movemL     ;branch              
000014B4                           884                          
000014B4                           885              ;BRA     opError     ;bad opcode branch to error
000014B4                           886              
000014B4                           887              
000014B4  BC7C 4E71                888              CMP.W   #$4E71,D6
000014B8  6700 000A                889              BEQ     _NOP
000014BC                           890              
000014BC  BC7C 4E75                891              CMP.W   #$4E75,D6   ;see if it's a RTS
000014C0  6700 0028                892              BEQ     _RTS        branch to RTS
000014C4                           893             
000014C4                           894  
000014C4                           895              
000014C4                           896  _NOP
000014C4  7E02                     897              MOVE.L  #2,D7       ;data is not error
000014C6  14FC 0020                898              MOVE.B  #' ',(A2)+      ;print spaces
000014CA  14FC 0020                899              MOVE.B  #' ',(A2)+      ;print spaces
000014CE  14FC 0020                900              MOVE.B  #' ',(A2)+      ;print spaces
000014D2  14FC 0020                901              MOVE.B  #' ',(A2)+      ;print spaces
000014D6  14FC 004E                902              MOVE.B  #'N',(A2)+      ;print N
000014DA  14FC 004F                903              MOVE.B  #'O',(A2)+      ;print O
000014DE  14FC 0050                904              MOVE.B  #'P',(A2)+      ;print P
000014E2  1A3C 0003                905              MOVE.B  #3,D5           ;counter for output
000014E6  6000 02F2                906              BRA     printCode
000014EA                           907  
000014EA                           908  _RTS    
000014EA  7E02                     909              MOVE.L  #2,D7       ;data is not error
000014EC  14FC 0020                910              MOVE.B  #' ',(A2)+      ;print spaces
000014F0  14FC 0020                911              MOVE.B  #' ',(A2)+      ;print spaces
000014F4  14FC 0020                912              MOVE.B  #' ',(A2)+      ;print spaces
000014F8  14FC 0020                913              MOVE.B  #' ',(A2)+      ;print spaces
000014FC  14FC 0052                914              MOVE.B  #'R',(A2)+      ;print R
00001500  14FC 0054                915              MOVE.B  #'T',(A2)+      ;print T
00001504  14FC 0053                916              MOVE.B  #'S',(A2)+      ;print S
00001508  1A3C 0003                917              MOVE.B  #3,D5           ;counter for output
0000150C  6000 02CC                918              BRA     printCode
0000150C  6000 02CC                919  -------------------- end include --------------------
00001510                           920              INCLUDE 'op0001.x68'    MOVE.b Differetn file
00001510                           921  
00001510                           922  
00001510                           923  
00001510                           924  
00001510                           925  op0001
00001510  7E02                     926              MOVE.L  #2,D7       ;data is not error
00001512  14FC 0020                927              MOVE.B  #' ',(A2)+      ;print spaces
00001516  14FC 0020                928              MOVE.B  #' ',(A2)+      ;print spaces
0000151A  14FC 0020                929              MOVE.B  #' ',(A2)+      ;print spaces
0000151E  14FC 0020                930              MOVE.B  #' ',(A2)+      ;print spaces
00001522  14FC 004D                931              MOVE.B  #'M',(A2)+      ;print M
00001526  14FC 004F                932              MOVE.B  #'O',(A2)+      ;print O
0000152A  14FC 0056                933              MOVE.B  #'V',(A2)+      ;print V
0000152E  14FC 0045                934              MOVE.B  #'E',(A2)+      PRINT  E
00001532  14FC 002E                935              MOVE.B  #'.',(A2)+
00001536  14FC 0042                936              MOVE.B  #'B',(A2)+
0000153A  14FC 0020                937              MOVE.B  #' ',(A2)+   
0000153E  4242                     938              CLR     D2
00001540  4241                     939              CLR     D1
00001542  1406                     940              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001544  E50A                     941              LSL.B   #2,D2       **** **** BIT* **00
00001546  EA0A                     942              LSR.B   #5,D2       **** **** 0000 0BIT
00001548  1002                     943              MOVE.B  D2,D0
0000154A  C0FC 0008                944              MULU    #8,D0       value adjusted for jumping
0000154E  4DF8 1292                945              LEA     modeTable,A6 Load the table into A6
00001552  4EB6 0000                946              JSR     (A6,D0)     Jump to subroutine of value at D0
00001556                           947              
00001556  1206                     948              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001558  EB09                     949              LSL.B   #5,D1       **** **** BIT0 0000
0000155A  EA09                     950              LSR.B   #5,D1       **** **** 0000 0BIT
0000155C  1001                     951              MOVE.B  D1,D0      
0000155E  C0FC 0008                952              MULU    #8,D0       value adjusted for jumping
00001562  4FF8 1340                953              LEA     regNumTable ,A7 Load the table into A7
00001566  4EB7 0000                954              JSR     (A7,D0)     Jump to subroutine of value at D1
0000156A  4FF8 1116                955              LEA     immAbTable, A7
0000156E  C2FC 0008                956              MULU    #8,D1
00001572  4EB7 1000                957              JSR     (A7,D1)    
00001576                           958  
00001576                           959  
00001576  14FC 002C                960              MOVE.B  #',',(A2)+  comma between operands
0000157A  4242                     961              CLR     D2
0000157C  4241                     962              CLR     D1
0000157E  3406                     963              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001580  EF4A                     964              LSL.W   #7,D2       BIT* **** **** 0000
00001582  E04A                     965              LSR.W   #8,D2       0000 0000 BIT* ****
00001584  EA4A                     966              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001586  C4FC 0008                967              MULU    #8,D2       value adjusted for jumping
0000158A  4DF8 1292                968              LEA     modeTable,A6 Load the table into A6
0000158E  4EB6 2000                969              JSR     (A6,D2)     Jump to subroutine of value at D2
00001592                           970             
00001592  3206                     971              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001594  E949                     972              LSL.W   #4,D1       BIT* **** **** 0000
00001596  E049                     973              LSR.W   #8,D1       0000 0000 BIT* ****
00001598  EA49                     974              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000159A  C2FC 0008                975              MULU    #8,D1       value adjusted for jumping
0000159E  4FF8 1340                976              LEA     regNumTable ,A7 Load the table into A7
000015A2  4EB7 1000                977              JSR     (A7,D1)     Jump to subroutine of value at D1    
000015A6  6000 0232                978              BRA     printCode
000015AA                           979  immediateData
000015AA  14FC 0023                980              MOVE.B  #'#',(A2)+ 
000015AE  381D                     981              MOVE.W  (A5)+,D4    WE got the address for the operand
000015B0  3815                     982              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000015B2                           983              *4MSB   00X*
000015B2  4242                     984              CLR     D2
000015B4  1404                     985              MOVE.B  D4,D2       00X*
000015B6  E80A                     986              LSR.B   #4,D2       000X
000015B8  C4FC 0008                987              MULU    #8,D2   
000015BC  4FF8 13B0                988              LEA     numTable ,A7 Load the table into A7
000015C0  4EB7 2000                989              JSR     (A7,D2)     Jump to subroutine of value at D2
000015C4                           990              *last 4bits 00*X
000015C4  4242                     991              CLR     D2
000015C6  1404                     992              MOVE.B  D4,D2       00*X
000015C8  E90A                     993              LSL.B   #4,D2       00X*
000015CA  E80A                     994              LSR.B   #4,D2       000X
000015CC  C4FC 0008                995              MULU    #8,D2   
000015D0                           996             
000015D0  4EB7 2000                997              JSR     (A7,D2)     Jump to subroutine of value at D2
000015D4                           998  
000015D4  4E75                     999              RTS
000015D6                          1000              
000015D6                          1001  absoulteWord   
000015D6  14FC 0024               1002              MOVE.B  #'$',(A2)+ 
000015DA  E08C                    1003              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015DC  E08C                    1004              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015DE                          1005              *4MSB   X***
000015DE  4241                    1006              CLR     D1
000015E0  3204                    1007              MOVE.W  D4,D1       X***
000015E2  E049                    1008              LSR.W   #8,D1       00X*
000015E4  E849                    1009              LSR.W   #4,D1       000X
000015E6  4FF8 13B0               1010              LEA     numTable ,A7 Load the table into A7
000015EA  C2FC 0008               1011              MULU    #8,D1
000015EE  4EB7 1000               1012              JSR     (A7,D1)     Jump to subroutine of value at D1 
000015F2                          1013              *next 4MSB  *X**
000015F2  4241                    1014              CLR     D1
000015F4  3204                    1015              MOVE.W  D4,D1       *X**
000015F6  E949                    1016              LSL.W   #4,D1       X**0        
000015F8  E049                    1017              LSR.W   #8,D1       00X*
000015FA  E849                    1018              LSR.W   #4,D1       000X
000015FC  4FF8 13B0               1019              LEA     numTable ,A7 Load the table into A7
00001600  C2FC 0008               1020              MULU    #8,D1
00001604  4EB7 1000               1021              JSR     (A7,D1)     Jump to subroutine of value at D1
00001608                          1022              *next 4MSB  **X*
00001608  4241                    1023              CLR     D1
0000160A  1204                    1024              MOVE.B  D4,D1       00X*
0000160C  E809                    1025              LSR.B   #4,D1       000X
0000160E  4FF8 13B0               1026              LEA     numTable ,A7 Load the table into A7
00001612  C2FC 0008               1027                          MULU    #8,D1
00001616  4EB7 1000               1028              JSR     (A7,D1)     Jump to subroutine of value at D1
0000161A                          1029              *last 4  bits   ***X
0000161A  4241                    1030              CLR     D1
0000161C  1204                    1031              MOVE.B  D4,D1       00*X
0000161E  E909                    1032              LSL.B   #4,D1       00X0    
00001620  E809                    1033              LSR.B   #4,D1       000X
00001622  4FF8 13B0               1034              LEA     numTable ,A7 Load the table into A7
00001626  C2FC 0008               1035                          MULU    #8,D1
0000162A  4EB7 1000               1036              JSR     (A7,D1)     Jump to subroutine of value at D1
0000162E  4E75                    1037              RTS            
00001630                          1038  absoulteLong   
00001630  4241                    1039              CLR     D1
00001632  4242                    1040              CLR     D2 
00001634  14FC 0024               1041              MOVE.B  #'$',(A2)+ 
00001638  2404                    1042              MOVE.L  D4,D2       D2 will be used for later
0000163A  E08C                    1043              LSR.L   #8,D4       XXXX **** => 00XX XX**
0000163C  E08C                    1044              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000163E                          1045              *4MSB   X***
0000163E  4241                    1046              CLR     D1
00001640  3204                    1047              MOVE.W  D4,D1       X***
00001642  E049                    1048              LSR.W   #8,D1       00X*
00001644  E849                    1049              LSR.W   #4,D1       000X
00001646  4FF8 13B0               1050              LEA     numTable ,A7 Load the table into A7
0000164A  C2FC 0008               1051              MULU    #8,D1
0000164E  4EB7 1000               1052              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001652                          1053              *next 4MSB  *X**
00001652  4241                    1054              CLR     D1
00001654  3204                    1055              MOVE.W  D4,D1       *X**
00001656  E949                    1056              LSL.W   #4,D1       X**0        
00001658  E049                    1057              LSR.W   #8,D1       00X*
0000165A  E849                    1058              LSR.W   #4,D1       000X
0000165C  4FF8 13B0               1059              LEA     numTable ,A7 Load the table into A7
00001660  C2FC 0008               1060              MULU    #8,D1
00001664  4EB7 1000               1061              JSR     (A7,D1)     Jump to subroutine of value at D1
00001668                          1062              *next 4MSB  **X*
00001668  4241                    1063              CLR     D1
0000166A  1204                    1064              MOVE.B  D4,D1       00X*
0000166C  E809                    1065              LSR.B   #4,D1       000X
0000166E  4FF8 13B0               1066              LEA     numTable ,A7 Load the table into A7
00001672  C2FC 0008               1067                          MULU    #8,D1
00001676  4EB7 1000               1068              JSR     (A7,D1)     Jump to subroutine of value at D1
0000167A                          1069              *last 4  bits   ***X
0000167A  4241                    1070              CLR     D1
0000167C  1204                    1071              MOVE.B  D4,D1       00*X
0000167E  E909                    1072              LSL.B   #4,D1       00X0    
00001680  E809                    1073              LSR.B   #4,D1       000X
00001682  4FF8 13B0               1074              LEA     numTable ,A7 Load the table into A7
00001686  C2FC 0008               1075                          MULU    #8,D1
0000168A  4EB7 1000               1076              JSR     (A7,D1)     Jump to subroutine of value at D1
0000168E                          1077              *4MSB   X***
0000168E  4241                    1078              CLR     D1
00001690  3202                    1079              MOVE.W  D2,D1
00001692  E049                    1080              LSR.W   #8,D1            00X*
00001694  E849                    1081              LSR.W   #4,D1            000X
00001696  C2FC 0008               1082              MULU    #8,D1
0000169A  4FF8 13B0               1083              LEA     numTable ,A7 Load the table into A7
0000169E  4EB7 1000               1084              JSR     (A7,D1)     Jump to subroutine of value at D1
000016A2                          1085              *next 4MSB  *X**
000016A2  4241                    1086              CLR     D1
000016A4  3202                    1087              MOVE.W  D2,D1
000016A6  E949                    1088              LSL.W   #4,D1       X**0
000016A8  E049                    1089              LSR.W   #8,D1       00X*
000016AA  E809                    1090              LSR.B   #4,D1       000X
000016AC  C2FC 0008               1091              MULU    #8,D1
000016B0  4FF8 13B0               1092              LEA     numTable ,A7 Load the table into A7
000016B4  4EB7 1000               1093              JSR     (A7,D1)     Jump to subroutine of value at D1
000016B8                          1094              *next 4MSB  **X*
000016B8  4241                    1095              CLR     D1
000016BA  1202                    1096              MOVE.B  D2,D1       00X*
000016BC  E809                    1097              LSR.B   #4,D1       000X
000016BE  C2FC 0008               1098              MULU    #8,D1
000016C2  4FF8 13B0               1099              LEA     numTable ,A7 Load the table into A7
000016C6  4EB7 1000               1100              JSR     (A7,D1)     Jump to subroutine of value at D1
000016CA                          1101              *next 4MSB  ***X
000016CA  4241                    1102              CLR     D1
000016CC  1202                    1103              MOVE.B  D2,D1       00*X
000016CE  E909                    1104              LSL.B   #4,D1       00X0
000016D0  E809                    1105              LSR.B   #4,D1       000X
000016D2  C2FC 0008               1106              MULU    #8,D1
000016D6  4FF8 13B0               1107              LEA     numTable ,A7 Load the table into A7
000016DA  4EB7 1000               1108              JSR     (A7,D1)     Jump to subroutine of value at D1
000016DE                          1109             
000016DE                          1110  
000016DE  4E75                    1111              RTS
000016E0                          1112  
000016E0                          1113  
000016E0                          1114  
000016E0                          1115  
000016E0                          1116  
000016E0                          1117  
000016E0                          1118  
000016E0                          1119  
000016E0                          1120  
000016E0                          1121  
000016E0                          1122  
000016E0                          1123  
000016E0                          1124  
000016E0                          1125  
000016E0                          1126  
000016E0                          1127  
000016E0                          1128  
000016E0                          1129  
000016E0                          1130  
000016E0                          1131  
000016E0                          1132  
000016E0                          1133  
000016E0                          1134  
000016E0                          1135  -------------------- end include --------------------
000016E0                          1136              INCLUDE 'op1101.x68'    ADD,ADDA
000016E0                          1137  op1101 
000016E0                          1138      ;ADD, ADDA
000016E0                          1139      
000016E0                          1140      ; we need to determine what its size is (B,W,L) putting the data in D6
000016E0  4EB8 149C               1141      JSR   WordOrLong
000016E4                          1142      *-now D3 contains the OPMODE FIELD telling us wether this is
000016E4                          1143      *-a LONG or a WORD
000016E4                          1144      
000016E4                          1145      *-now we need to decipher if its any of the adds
000016E4                          1146      
000016E4  B63C 0003               1147      CMP.B   #hex_3,D3
000016E8  6700 0002               1148      BEQ adda_W
000016EC                          1149      
000016EC                          1150  
000016EC                          1151  
000016EC                          1152  adda_W  ;ADDA.W
000016EC                          1153      *-maybe error checking
000016EC                          1154      *-we know its ADDA.W so print it to our buffer
000016EC                          1155      *-ex ADDA.W D2,D7
000016EC                          1156      
000016EC  14FC 0020               1157      MOVE.B  #' ',(A2)+
000016F0  14FC 0020               1158      MOVE.B  #' ',(A2)+
000016F4  14FC 0020               1159      MOVE.B  #' ',(A2)+
000016F8  14FC 0020               1160      MOVE.B  #' ',(A2)+
000016FC  14FC 0041               1161      MOVE.B  #'A',(A2)+
00001700  14FC 0044               1162      MOVE.B  #'D',(A2)+
00001704  14FC 0044               1163      MOVE.B  #'D',(A2)+
00001708  14FC 0041               1164      MOVE.B  #'A',(A2)+
0000170C  14FC 002E               1165      MOVE.B  #'.',(A2)+
00001710  14FC 0057               1166      MOVE.B  #'W',(A2)+
00001714                          1167      *-always allow 4 spaces
00001714  14FC 0020               1168      MOVE.B  #' ',(A2)+
00001718  14FC 0020               1169      MOVE.B  #' ',(A2)+
0000171C  14FC 0020               1170      MOVE.B  #' ',(A2)+
00001720  14FC 0020               1171      MOVE.B  #' ',(A2)+
00001724                          1172      
00001724                          1173      * MachineCode: 0001 **** **** **BI T***
00001724                          1174      
00001724  4242                    1175              CLR     D2
00001726  4241                    1176              CLR     D1
00001728  1406                    1177              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000172A  E50A                    1178              LSL.B   #2,D2       **** **** BIT* **00
0000172C  EA0A                    1179              LSR.B   #5,D2       **** **** 0000 0BIT
0000172E  C4FC 0008               1180              MULU    #8,D2       value adjusted for jumping
00001732  4DF8 1292               1181              LEA     modeTable,A6 Load the table into A6
00001736  4EB6 2000               1182              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000173A                          1183  
0000173A                          1184  
0000173A                          1185   * MachineCode: 0001 **** **** **** *BIT
0000173A                          1186              
0000173A  1206                    1187              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000173C  EB09                    1188              LSL.B   #5,D1       **** **** BIT0 0000
0000173E  EA09                    1189              LSR.B   #5,D1       **** **** 0000 0BIT      
00001740  C2FC 0008               1190              MULU    #8,D1       value adjusted for jumping
00001744  4FF8 1340               1191              LEA     regNumTable ,A7 Load the table into A7
00001748  4EB7 1000               1192              JSR     (A7,D1)     Jump to subroutine of value at D1
0000174C  B23C 0020               1193              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001750  6700 FE58               1194              BEQ.W   immediateData   ;branch to immediateData
00001754                          1195      
00001754  14FC 002C               1196          MOVE.B  #',',(A2)+
00001758  14FC 0041               1197          MOVE.B  #'A',(A2)+
0000175C  4241                    1198              CLR     D1
0000175E  3206                    1199              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001760  E949                    1200              LSL.W   #4,D1       BIT* **** **** 0000
00001762  E049                    1201              LSR.W   #8,D1       0000 0000 BIT* ****
00001764  EA49                    1202              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001766  C2FC 0008               1203              MULU    #8,D1       value adjusted for jumping
0000176A  4FF8 13B0               1204              LEA     numTable ,A7 Load the table into A7
0000176E  4EB7 1000               1205              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001772                          1206          
00001772                          1207      
00001772  6000 0066               1208          BRA printCode
00001772  6000 0066               1209  -------------------- end include --------------------
00001776                          1210  
00001776                          1211  
00001776                          1212              
00001776                          1213             
00001776                          1214  
00001776                          1215              
00001776                          1216  opError                             
00001776  2608                    1217              MOVE.L  A0,D3
00001778  2C03                    1218              MOVE.L  D3,D6
0000177A  45F9 0000067C           1219              LEA     bad_code_buffer,A2
00001780  7E02                    1220              MOVE.L  #2,D7
00001782  4EB8 10A6               1221              JSR     write_data_in_D3_to_buffer
00001786                          1222              
00001786  14FC 0020               1223              MOVE.B  #' ',(A2)+      ;print spaces
0000178A  14FC 0020               1224              MOVE.B  #' ',(A2)+      ;print spaces
0000178E  14FC 0020               1225              MOVE.B  #' ',(A2)+      ;print spaces
00001792  14FC 0020               1226              MOVE.B  #' ',(A2)+      ;print spaces
00001796  14FC 0044               1227              MOVE.B  #'D',(A2)+      ;print D
0000179A  14FC 0041               1228              MOVE.B  #'A',(A2)+      ;print A
0000179E  14FC 0054               1229              MOVE.B  #'T',(A2)+      ;print T
000017A2  14FC 0041               1230              MOVE.B  #'A',(A2)+      ;print A
000017A6  14FC 0020               1231              MOVE.B  #' ',(A2)+      ;print spaces
000017AA  14FC 0020               1232              MOVE.B  #' ',(A2)+      ;print spaces
000017AE  14FC 0020               1233              MOVE.B  #' ',(A2)+      ;print spaces
000017B2  14FC 0020               1234              MOVE.B  #' ',(A2)+      ;print spaces
000017B6                          1235              
000017B6                          1236              
000017B6  14FC 0046               1237              MOVE.B  #'F',(A2)+      ;print spaces
000017BA  14FC 0046               1238              MOVE.B  #'F',(A2)+      ;print spaces
000017BE  14FC 0046               1239              MOVE.B  #'F',(A2)+      ;print spaces
000017C2  14FC 0046               1240              MOVE.B  #'F',(A2)+      ;print spaces
000017C6                          1241              
000017C6                          1242              
000017C6                          1243              ;MOVE.L  (A0),D3
000017C6                          1244              ;MOVE.L  D3,D6
000017C6                          1245              ;MOVE.L  #1,D7
000017C6                          1246              ;JSR     write_data_in_D3_to_buffer
000017C6                          1247              
000017C6  14BC 0000               1248              MOVE.B  #$00,(A2) * add NULL value to print string
000017CA  43F9 0000067C           1249              LEA     bad_code_buffer,A1
000017D0  103C 000D               1250              MOVE.B  #13,D0
000017D4  4E4F                    1251              TRAP    #15   
000017D6                          1252           
000017D6  6000 F88E               1253              BRA     get_next_instruction           
000017DA                          1254  printCode   
000017DA  14BC 0000               1255              MOVE.B  #$00,(A2)   * add NULL value to print string
000017DE  070A 0000               1256              MOVEP   (A2),D3
000017E2  43F9 00000624           1257              LEA     good_code_buffer,A1 * load buffer for good code to print
000017E8  700D                    1258              MOVEQ   #13,D0
000017EA  4E4F                    1259              TRAP    #15         * display code
000017EC                          1260    
000017EC  6000 F878               1261              BRA     get_next_instruction                     
000017F0                          1262  * OP Codes -------------------------------------------------
000017F0  =00000000               1263  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
000017F0  =00000001               1264  bin0001     EQU     %0001   ;MOVE.B
000017F0  =00000002               1265  bin0010     EQU     %0010   ;MOVE.L
000017F0  =00000003               1266  bin0011     EQU     %0011   ;MOVE.W
000017F0  =00000004               1267  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
000017F0  =00000005               1268  bin0101     EQU     %0101   ;SUBQ
000017F0  =00000006               1269  bin0110     EQU     %0110   ;Bcc
000017F0  =00000007               1270  bin0111     EQU     %0111   ;MOVEQ
000017F0  =00000008               1271  bin1000     EQU     %1000   ;DIVU.W
000017F0  =00000009               1272  bin1001     EQU     %1001   ;SUB, SUBA
000017F0  =0000000B               1273  bin1011     EQU     %1011   ;CMP, CMPA, EOR
000017F0  =0000000C               1274  bin1100     EQU     %1100   ;AND, MULS.W
000017F0  =0000000D               1275  bin1101     EQU     %1101   ;ADD, ADDA
000017F0  =0000000E               1276  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
000017F0                          1277  
000017F0                          1278  *Binary HEX values*---------------------------------------------------------------
000017F0  =00000000               1279  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
000017F0  =00000001               1280  hex_1   EQU     %0001 ;1
000017F0  =00000002               1281  hex_2   EQU     %0010 ;2    
000017F0  =00000003               1282  hex_3   EQU     %0011 ;3
000017F0  =00000004               1283  hex_4   EQU     %0100 ;4
000017F0  =00000005               1284  hex_5   EQU     %0101 ;5
000017F0  =00000006               1285  hex_6   EQU     %0110 ;6
000017F0  =00000007               1286  hex_7   EQU     %0111 ;7
000017F0  =00000008               1287  hex_8   EQU     %1000 ;8
000017F0  =00000009               1288  hex_9   EQU     %1001 ;9
000017F0  =0000000A               1289  hex_A   EQU     %1010 ;A
000017F0  =0000000B               1290  hex_B   EQU     %1011 ;B
000017F0  =0000000C               1291  hex_C   EQU     %1100 ;C
000017F0  =0000000D               1292  hex_D   EQU     %1101 ;D
000017F0  =0000000E               1293  hex_E   EQU     %1110 ;E
000017F0  =0000000F               1294  hex_F   EQU     %1111 ;F      
000017F0                          1295              
000017F0                          1296  ;LOOP:
000017F0                          1297                  *-compare the adress pointers current address with ending address to see if we need to continue
000017F0                          1298                  *- load the address registrer (pointer/ this helps us look at data)
000017F0                          1299                  *-load address register number into data register
000017F0                          1300                  
000017F0                          1301                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
000017F0                          1302                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
000017F0                          1303                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
000017F0                          1304                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
000017F0                          1305                  ;BEQ     FINISH      ;finish they are equal
000017F0                          1306                  ;RTS
000017F0                          1307  
000017F0                          1308          
000017F0                          1309          *----------END OF I/O SECTION*---
000017F0                          1310          *----------Start of OPCODE SUBROUTINE
000017F0  =0000A000               1311  stack            EQU        $A000  
000017F0  =0000000C               1312  shift            EQU        12                   * Shift 12 bits 
00000400                          1313                   ORG        $400
00000400                          1314           
00000400  4FF9 0000A000           1315  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           1316                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    1317                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           1318                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    1319                   MOVE.W     (A1),D0
00000416  123C 000C               1320                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    1321                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               1322                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               1323                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          1324                   
00000424  4EF9 00000484           1325  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           1326                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           1327                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           1328                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           1329                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           1330                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           1331                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           1332                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           1333                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           1334                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           1335                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           1336                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           1337                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           1338                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           1339                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           1340                   JMP        code1111        *Special/Reserved
00000484                          1341                   
00000484  4E72 2700               1342  code0000         STOP       #$2700
00000488  4E72 2700               1343  code0001         STOP       #$2700
0000048C  4E72 2700               1344  code0010         STOP       #$2700
00000490  4E72 2700               1345  code0011         STOP       #$2700
00000494  267C 00000000           1346  code0100         MOVE.L     #0,A3
0000049A  4241                    1347                   CLR        D1
0000049C  43F9 000006D5           1348                   LEA        enter_start_AD,A1
000004A2  700E                    1349                   MOVE.L     #14,D0
000004A4  4E4F                    1350                   TRAP       #15
000004A6  4E75                    1351                   RTS
000004A8  4E72 2700               1352  code0101         STOP       #$2700
000004AC  4E72 2700               1353  code0110         STOP       #$2700
000004B0  4E72 2700               1354  code0111         STOP       #$2700
000004B4  4E72 2700               1355  code1000         STOP       #$2700
000004B8  4E72 2700               1356  code1001         STOP       #$2700
000004BC  4E72 2700               1357  code1010         STOP       #$2700
000004C0  4E72 2700               1358  code1011         STOP       #$2700
000004C4  4E72 2700               1359  code1100         STOP       #$2700
000004C8  4E72 2700               1360  code1101         STOP       #$2700
000004CC  4E72 2700               1361  code1110         STOP       #$2700
000004D0  4E72 2700               1362  code1111         STOP       #$2700
000004D4                          1363  
000004D4                          1364  FINISH:
000004D4                          1365          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    1366              MOVE.L  A0,D3
000004D6  2C03                    1367              MOVE.L  D3,D6
000004D8  45F9 00000624           1368              LEA     good_code_buffer,A2
000004DE                          1369   
000004DE                          1370              
000004DE  14FC 0046               1371              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               1372              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               1373              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               1374              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               1375              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               1376              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               1377              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               1378              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               1379              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               1380              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               1381              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               1382              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               1383              MOVE.B  #'R',(A2)+
00000512  2610                    1384              MOVE.L  (A0),D3
00000514  2C03                    1385              MOVE.L  D3,D6
00000516  7E01                    1386              MOVE.L  #1,D7
00000518                          1387  
00000518                          1388              
00000518  14BC 0000               1389              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           1390              LEA     good_code_buffer,A1
00000522  103C 000D               1391              MOVE.B  #13,D0
00000526  4E4F                    1392              TRAP    #15   
00000528  FFFF FFFF               1393              SIMHALT
0000052C                          1394  
0000052C                          1395  *-390 -> 406 WITH NOP AT 400
0000052C                          1396  
0000052C                          1397  
0000052C                          1398  hexToAscii:
0000052C                          1399  ones:
0000052C  3A02                    1400      MOVE.W  D2,D5
0000052E  CAFC 0008               1401      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13B0               1402      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               1403      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          1404      *-adding res
0000053A                          1405      ;ADD     D2,D7
0000053A                          1406      
0000053A                          1407  
0000053A  4E75                    1408      RTS
0000053C                          1409  
0000053C                          1410  
0000053C                          1411  
0000053C                          1412  
0000053C                          1413  
0000053C                          1414  
0000053C                          1415  
0000053C                          1416  
0000053C                          1417  
0000053C                          1418  
0000053C                          1419  
0000053C                          1420  
0000053C                          1421  
0000053C                          1422  *-Parses input - take input from user to create a memory address
0000053C                          1423  *- entry is parsed to make sure it falls within a valid range
0000053C                          1424  *-good inputs are converteed to hex
0000053C                          1425  *-the entered addres get's stored in d3
0000053C                          1426  *-
0000053C                          1427  *-
0000053C                          1428  
0000053C                          1429  
0000053C                          1430  
0000053C  7C00                    1431  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    1432                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          1433                  
00000540                          1434                  *-CHECK TO SEE INPUT DATA
00000540  B205                    1435                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               1436                  BEQ     error_no_input no input was found
00000546  0C41 0008               1437                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               1438                  BGT     error_bad_entry
0000054E                          1439                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               1440                  BRA     parse_each
00000552                          1441  
00000552  7C00                    1442  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    1443                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    1444                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               1445                  BEQ     error_no_input
0000055C  0C41 0008               1446                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               1447                  BGT     error_bad_entry
00000564                          1448                  ;BGT     error_to_many_char
00000564  6000 0002               1449                  BRA     parse_each        
00000568                          1450  
00000568                          1451  *parse each analyzes each ind character entered
00000568                          1452  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          1453  
00000568  1419                    1454  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    1455                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               1456                  BEQ     parse_complete  end of user input
00000570  B43C 0066               1457                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               1458                  BGT     hex_compare
00000578                          1459                  
00000578                          1460                  *-
00000578                          1461                  *Comapare the decimal number values betyween 0 -9 first
00000578                          1462                  *
00000578                          1463                  *-
00000578  B43C 002F               1464  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          1465                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               1466                  BLE     error_char 
00000580  B43C 003A               1467                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               1468                  BLT     dec_convert
00000588                          1469                  *-
00000588                          1470                  *there are no number values, lets check alpha characters
00000588                          1471                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          1472                  *->71 'G' then we should go and convert to hex range A-F
00000588                          1473                  *-UPPER case
00000588                          1474                  *-      
00000588  B43C 0041               1475  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               1476                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               1477                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               1478                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               1479  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               1480                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               1481                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               1482                  BLT     lower_ascii
000005A8                          1483                  
000005A8                          1484           
000005A8  0402 0030               1485  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          1486                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    1487                  ASL.L   #4,D6
000005AE  DC02                    1488                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    1489                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          1490                                      *- 97 - 103
000005B2                          1491                  
000005B2                          1492                              
000005B2                          1493  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          1494  
000005B2  0402 0037               1495  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    1496                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    1497                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    1498                  BRA     parse_each  parse next item
000005BC                          1499  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               1500  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    1501                  ASL.L   #4,D6
000005C2  DC02                    1502                  ADD.B   D2,D6
000005C4  60A2                    1503                  BRA     parse_each
000005C6                          1504  
000005C6  7801                    1505  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    1506                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           1507  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    1508                  MOVE.L  #1,D0
000005D2  4E4F                    1509                  TRAP    #15
000005D4                          1510                  ;JMP     get_input
000005D4  43F9 000006C2           1511  error_char      LEA bad_char,A1
000005DA  4E4F                    1512                  trap #15
000005DC                          1513                  ;JMP get_input0
000005DC  43F9 000006AD           1514  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    1515                  TRAP #15
000005E4                          1516                  ;JMP  get_input
000005E4                          1517  
000005E4                          1518  
000005E4  FFFF FFFF               1519      SIMHALT             ; halt simulator
000005E8                          1520  
000005E8                          1521  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   1522  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          1523  
00000624                          1524  
00000624                          1525  good_code_buffer    DS.B    88
0000067C                          1526  
0000067C                          1527  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   1528  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   1529  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   1530  bad_char    DC.B    'Bad Char detected.',0
000006D5                          1531  *-errors
000006D5                          1532  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   1533  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          1534  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          1535  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          1536  
00000754= 45 6E 74 65 72 20 ...   1537  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          1538  
00000789                          1539  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               1540  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    1541                          MOVE.L  #1,D0
000007C2  4E4F                    1542                          TRAP    #15
000007C4                          1543                          ;JMP     get_input
000007C4                          1544  
000007C4                          1545  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          1546  
000007C4                          1547      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        1630
ABSOULTEWORD        15D6
ADDA_W              16EC
ADDRESSCOUNT        1054
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_0_3_BIT         1490
GET_3_5BIT          1490
GET_NEXT_INSTRUCTION  1066
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         588
HEX_D               D
HEX_E               E
HEX_F               F
IA000               1142
IA001               11A4
IA010               113E
IA011               1140
IA100               1264
IMMABTABLE          1116
IMMEDIATEDATA       15AA
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12D2
M0001               12DE
M0010               12EA
M0011               12FE
M0100               1316
M0101               132E
M0110               1330
M0111               1332
MAINLOOP            1036
MODETABLE           1292
N0000               1430
N0001               1436
N0010               143C
N0011               1442
N0100               1448
N0101               144E
N0110               1454
N0111               145A
N1000               1460
N1001               1466
N1010               146C
N1011               1472
N1100               1478
N1101               147E
N1110               1484
N1111               148A
NO_ENTRY            69A
NUMTABLE            13B0
ONES                52C
OP0001              1510
OP0100              14B4
OP1101              16E0
OPERROR             1776
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           17DA
PRINT_WORD          10BC
REGISTERPRINT       1334
REGNUMTABLE         1340
RN0000              1380
RN0001              1386
RN0010              138C
RN0011              1392
RN0100              1398
RN0101              139E
RN0110              13A4
RN0111              13AA
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WORDORLONG          149C
WRITE_DATA_IN_D3_TO_BUFFER  10A6
_NOP                14C4
_RTS                14EA
