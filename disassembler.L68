00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 11:59:56 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  
00001000                            15  *--- Notes
00001000                            16  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            17  * A4 will be our main pointer to current memory address and current data
00001000                            18  * D3 will be dedicated register to manipulate our data in
00001000                            19  *
00001000                            20  *
00001000                            21  *---------
00001000                            22  START:                  
00001000                            23              ; first instruction of program
00001000                            24              ;LEA     stack,SP
00001000                            25              *-present the hello message
00001000  43F9 000005E8             26              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 27              MOVE.B  #14,D0
0000100A  4E4F                      28              TRAP    #15
0000100C                            29              
0000100C                            30  *           
0000100C                            31  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            32  *
0000100C                            33  ** Put program code here
0000100C                            34  **-----
0000100C                            35  **This program starts by given a starting address and an ending address disassemble
0000100C                            36  **the binary code that is at that location.
0000100C                            37  **
0000100C                            38  **
0000100C                            39  **----
0000100C                            40  *
0000100C                            41  **-------
0000100C                            42  ** Needs to check for odd addressing**
0000100C                            43  **
0000100C                            44  **
0000100C                            45  **-----
0000100C                            46  *                *---------------------I/O SECTION
0000100C                            47  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            48  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            49  *                * statically in memory and retrieved when needed to compare
0000100C                            50  *                * this free's up a adress/data register to use
0000100C                            51  *                *-----------------------
0000100C                            52  *                
0000100C                            53  *                
0000100C                            54  *get_input_start_addr 
0000100C                            55  *                MOVE.L  #0,A3
0000100C                            56  *                CLR     D1
0000100C                            57  *                LEA     enter_start_AD,A1
0000100C                            58  *                MOVE.L  #14,D0
0000100C                            59  *                TRAP    #15
0000100C                            60  *                
0000100C                            61  *                
0000100C                            62  *
0000100C                            63  *      
0000100C                            64  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            65  *                MOVE.L  #2,D0
0000100C                            66  *                TRAP    #15
0000100C                            67  *                JSR     parse_input             parse the starting address
0000100C                            68  *                
0000100C                            69  *                
0000100C                            70  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            71  *                
0000100C                            72  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            73  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            74  *
0000100C                            75  *
0000100C                            76  *get_input_end_addr
0000100C                            77  *                MOVE.L  #0,A3
0000100C                            78  *                CLR     D1
0000100C                            79  *                LEA     userEnd,A1
0000100C                            80  *                MOVE.L  #14,D0
0000100C                            81  *                TRAP    #15
0000100C                            82  *                
0000100C                            83  *
0000100C                            84  *
0000100C                            85  *                LEA     userEndAddrInput,A1
0000100C                            86  *                MOVE.B  userEnd,D1
0000100C                            87  *                MOVE.L  #2,D0
0000100C                            88  *                TRAP    #15
0000100C                            89  *                JSR     parse_end
0000100C                            90  *
0000100C                            91  *                
0000100C                            92  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                            93  *  
0000100C                            94  *             
0000100C                            95  *STORE_SRT_END:
0000100C                            96  *               
0000100C                            97  *                      ;store the starting and ending address into memory out of range
0000100C                            98  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                            99  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           100  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           101  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           102  *            MOVE.L  A5,A4
0000100C                           103              
0000100C                           104              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           105              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           106              *
0000100C  2C3C 00000996            107              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     108              MOVE.L  D6,A5       Move D6 into a5
00001014                           109              
00001014  2C3C 000009CF            110              MOVE.L  #$9CF,D6
0000101A  2C46                     111              MOVE.L  D6,A6
0000101C                           112              
0000101C                           113              
0000101C  23CD 00FFFF00            114              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            115              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     116              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           117              *
0000102A                           118              *
0000102A                           119              *-------------END OF TESING CODE-----------
0000102A                           120          
0000102A  6000 0042                121              BRA get_next_instruction
0000102E                           122                           
0000102E                           123                           
0000102E                           124     
0000102E                           125  *---move_addresses:
0000102E                           126                                  
0000102E                           127                  *-MOVE 2 INTO DATA REG
0000102E                           128                  
0000102E                           129                  ;JSR     LOOP
0000102E                           130                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           131                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           132                  
0000102E                           133                  *----MOVE.W  A4,A0
0000102E                           134                  
0000102E                           135                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           136                  *----MOVE.B  #2,D4
0000102E                           137                  
0000102E                           138                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           139                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           140                  *------MOVE.L  D3,D7
0000102E                           141                  
0000102E                           142  
0000102E                           143  
0000102E                           144  
0000102E                           145                  *------LEA     good_code_buffer,A2 load again
0000102E                           146                  *------JSR     print_d3
0000102E                           147                  
0000102E                           148                  
0000102E                           149                  ;JSR     get_opcode 
0000102E                           150  
0000102E                           151                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           152                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           153                  ;SIMHALT
0000102E                           154  
0000102E                           155  
0000102E                           156  * ---------------------------------------------------------- 
0000102E                           157  * Decode ---------------------------------------------------
0000102E  49F8 7000                158              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 003A                159              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           160       
00001036                           161  mainLoop          
00001036                           162              *-----
00001036                           163              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           164              *- listing of finished and un finished work
00001036                           165              *-          ***Machine Code saved in D6*****
00001036                           166              *-----
00001036                           167  
00001036  E84B                     168              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           169              
00001038                           170              ;compare bits to instructions
00001038                           171              
00001038  B63C 0001                172              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           173              *- Machine code saved in D6
0000103C  6700 04DE                174              BEQ     op0001      ;branch to op0001
00001040                           175              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           176              ;BEQ     op0011      ;branch to op0011
00001040                           177              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           178              ;BEQ     op0010      ;branch to op0010           
00001040                           179              ;CMP.B   #bin0111,D3 ;MOVEQ
00001040                           180              ;BEQ     op0111      ;branch to op0111                        
00001040  B63C 0004                181              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
00001044  6700 047A                182              BEQ     op0100          branch to op0100                        
00001048  B63C 000D                183              CMP.B   #bin1101,D3 ;ADD, ADDA
0000104C  6700 069E                184              BEQ     op1101      ;branch to op1101            
00001050  B63C 0009                185              CMP.B   #bin1001,D3 ;SUB, SUBA
00001054  6700 0B1C                186              BEQ     op1001      ;branch to op1001                        
00001058                           187              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001058                           188              ;BEQ     op0000      ;branch to op0000                       
00001058                           189              ;CMP.B   #bin0101,D3 ;SUBQ
00001058                           190              ;BEQ     op0101      ;branch to op0101                         
00001058                           191              ;CMP.B   #bin0110,D3 ;Bcc
00001058                           192              ;BEQ     op0110      ;branch to op0110            
00001058                           193              ;CMP.B   #bin1000,D3 ;DIVU.W
00001058                           194              ;BEQ     op1000      ;branch to op1000                                      
00001058                           195              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001058                           196              ;BEQ     op1011      ;branch to op1011 
00001058                           197              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001058                           198              ;BEQ     op1100      ;branch to op1100                                    
00001058                           199              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001058                           200              ;BEQ     op1110      ;branch to op1110            
00001058                           201              
00001058  6000 0F66                202              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
0000105C                           203              
0000105C                           204              ;branch to display opError display
0000105C                           205              
0000105C                           206              ;print all the things...
0000105C                           207   *******************************************************************************
0000105C                           208  *
0000105C                           209  *******************************************************************************
0000105C                           210  addressCount 
0000105C                           211              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
0000105C                           212              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
0000105C                           213              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
0000105C                           214              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
0000105C                           215              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
0000105C                           216              
0000105C  4BF9 00FFFF10            217              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
00001062  2215                     218              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
00001064  2A0C                     219              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
00001066  B285                     220              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001068  6F00 F46A                221              BLE     FINISH      * branch to end if ending address reached
0000106C  4E75                     222              RTS                 * return IF WE HAVE NOT FINISHED
0000106E                           223              
0000106E                           224  get_next_instruction:
0000106E  4EB8 105C                225                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
00001072                           226                  *-line count
00001072  4245                     227                  CLR D5             *-CLEAR THIS REGISTER/
00001074                           228                  
00001074  45F9 00000624            229                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
0000107A  304C                     230                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
0000107C  7E02                     231                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
0000107E  2608                     232                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001080  2C03                     233                  MOVE.L  D3,D6   
00001082  45F9 00000624            234                  LEA     good_code_buffer,A2
00001088                           235                                  *-write the current data moved to data register d3
00001088  4EB9 000010AE            236                  JSR     write_data_in_D3_to_buffer
0000108E                           237                  
0000108E  14BC 0020                238                  MOVE.B  #' ',(A2)
00001092  14BC 0020                239                  MOVE.B  #' ',(A2)
00001096  14BC 0020                240                  MOVE.B  #' ',(A2)
0000109A  14BC 0020                241                  MOVE.B  #' ',(A2)
0000109E                           242                  
0000109E  4286                     243                  CLR.L   D6
000010A0  4283                     244                  CLR.L   D3
000010A2                           245                  
000010A2  3A4C                     246                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
000010A4                           247                  
000010A4  3C1C                     248                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010A6                           249                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010A6                           250  
000010A6  2814                     251                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010A8  3606                     252                  MOVE.W  D6,D3
000010AA  E04B                     253                  LSR.W   #8,D3
000010AC                           254                  
000010AC  6088                     255                  BRA     mainLoop
000010AE                           256                  
000010AE                           257  write_data_in_D3_to_buffer:
000010AE                           258              *------
000010AE                           259              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010AE                           260              *
000010AE                           261              *
000010AE                           262              *---------
000010AE  BE7C 0002                263                  CMP.W   #2,D7 ERROR checking
000010B2  6600 0010                264                  BNE     print_word branch off to write the first word of the line
000010B6  4843                     265                  SWAP    D3
000010B8  4846                     266                  SWAP    D6
000010BA  4EB9 000010C4            267                  JSR     print_word
000010C0  4846                     268                  SWAP    D6
000010C2  2606                     269                  MOVE.L  D6,D3
000010C4                           270                  
000010C4                           271   print_word:
000010C4                           272                  *-****
000010C4                           273                  * called 4 times to decode from hex to ascii the first word 
000010C4                           274                  *   using the below jump table
000010C4                           275                  *
000010C4                           276                  *-------
000010C4  E04B                     277                  LSR.W   #8,D3
000010C6  E84B                     278                  LSR.W   #4,D3
000010C8  C6FC 0008                279                  MULU.W  #8,D3
000010CC  4DF9 000013BC            280                  LEA     numTable,A6
000010D2  4EB6 3000                281                  JSR     (A6,D3)
000010D6                           282                  
000010D6  3606                     283                  MOVE.W  D6,D3   COPY DATA
000010D8  E94B                     284                  LSL.W   #4,D3
000010DA  E04B                     285                  LSR.W   #8,D3
000010DC  E84B                     286                  LSR.W   #4,D3
000010DE  C6FC 0008                287                  MULU.W  #8,D3
000010E2  4DF9 000013BC            288                  LEA     numTable,A6
000010E8  4EB6 3000                289                  JSR     (A6,D3)
000010EC                           290                  
000010EC  3606                     291                  MOVE.W  D6,D3
000010EE                           292                  
000010EE  E14B                     293                  LSL.W   #8,D3
000010F0  E04B                     294                  LSR.W   #8,D3
000010F2  E84B                     295                  LSR.W   #4,D3
000010F4  C6FC 0008                296                  MULU.W  #8,D3
000010F8  4DF9 000013BC            297                  LEA numTable,A6
000010FE  4EB6 3000                298                  JSR     (A6,D3)
00001102                           299                  
00001102                           300                  
00001102  3606                     301                  MOVE.W  D6,D3
00001104  E94B                     302                  LSL.W   #4,D3
00001106  E14B                     303                  LSL.W   #8,D3
00001108  E04B                     304                  LSR.W   #8,D3
0000110A  E84B                     305                  LSR.W   #4,D3
0000110C  C6FC 0008                306                  MULU.W  #8,D3
00001110  4DF9 000013BC            307                  LEA     numTable,A6
00001116  4EB6 3000                308                  JSR     (A6,D3)
0000111A  5805                     309                  ADDI.B  #4,D5
0000111C  4E75                     310                  RTS
0000111E                           311  * -----------------------------------------------------------            
0000111E                           312  * Jump Table immAbTable *************************************
0000111E                           313  *** matches the associated Addressing mode     
0000111E                           314  *************************************************************
0000111E  4EB9 0000114A            315  immAbTable  JSR     IA000   ;Absoulute Word
00001124  4E75                     316              RTS             ;return, done printing
00001126  4EB9 000011AC            317              JSR     IA001   ;Aboulute Long
0000112C  4E75                     318              RTS             ;return, done printing
0000112E  4EB9 00001146            319              JSR     IA010   ;blank
00001134  4E75                     320              RTS             ;return, done printing
00001136  4EB9 00001148            321              JSR     IA011   ;blank
0000113C  4E75                     322              RTS             ;return, done printing  
0000113E  4EB9 0000126C            323              JSR     IA100   ;immediate Data
00001144  4E75                     324              RTS             ;return, done printing
00001146                           325  * -----------------------------------------------------------            
00001146  4E75                     326  IA010       RTS
00001148  4E75                     327  IA011       RTS
0000114A                           328  * -----------------------------------------------------------            
0000114A                           329  * Subroutine IA000   ------------------------------------------
0000114A                           330  IA000                               ;absoulteWord   
0000114A  14FC 0024                331              MOVE.B  #'$',(A2)+ 
0000114E  E08C                     332              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001150  E08C                     333              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001152                           334              *4MSB   X***
00001152  4241                     335              CLR     D1
00001154  3204                     336              MOVE.W  D4,D1       X***
00001156  E049                     337              LSR.W   #8,D1       00X*
00001158  E849                     338              LSR.W   #4,D1       000X
0000115A  4FF9 000013BC            339              LEA     numTable ,A7 Load the table into A7
00001160  C2FC 0008                340              MULU    #8,D1
00001164  4EB7 1000                341              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001168                           342              *next 4MSB  *X**
00001168  4241                     343              CLR     D1
0000116A  3204                     344              MOVE.W  D4,D1       *X**
0000116C  E949                     345              LSL.W   #4,D1       X**0        
0000116E  E049                     346              LSR.W   #8,D1       00X*
00001170  E849                     347              LSR.W   #4,D1       000X
00001172  4FF9 000013BC            348              LEA     numTable ,A7 Load the table into A7
00001178  C2FC 0008                349              MULU    #8,D1
0000117C  4EB7 1000                350              JSR     (A7,D1)     Jump to subroutine of value at D1
00001180                           351              *next 4MSB  **X*
00001180  4241                     352              CLR     D1
00001182  1204                     353              MOVE.B  D4,D1       00X*
00001184  E809                     354              LSR.B   #4,D1       000X
00001186  4FF9 000013BC            355              LEA     numTable ,A7 Load the table into A7
0000118C  C2FC 0008                356                          MULU    #8,D1
00001190  4EB7 1000                357              JSR     (A7,D1)     Jump to subroutine of value at D1
00001194                           358              *last 4  bits   ***X
00001194  4241                     359              CLR     D1
00001196  1204                     360              MOVE.B  D4,D1       00*X
00001198  E909                     361              LSL.B   #4,D1       00X0    
0000119A  E809                     362              LSR.B   #4,D1       000X
0000119C  4FF9 000013BC            363              LEA     numTable ,A7 Load the table into A7
000011A2  C2FC 0008                364                          MULU    #8,D1
000011A6  4EB7 1000                365              JSR     (A7,D1)     Jump to subroutine of value at D1
000011AA  4E75                     366              RTS           
000011AC                           367  * -----------------------------------------------------------            
000011AC                           368  * Subroutine IA001   ------------------------------------------
000011AC                           369  IA001                               ;absoulteLong
000011AC  4241                     370              CLR     D1
000011AE  4242                     371              CLR     D2 
000011B0  14FC 0024                372              MOVE.B  #'$',(A2)+ 
000011B4  2404                     373              MOVE.L  D4,D2       D2 will be used for later
000011B6                           374  *----------- first Word Value D4
000011B6  E08C                     375              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011B8  E08C                     376              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011BA                           377              *4MSB   X***
000011BA  4241                     378              CLR     D1
000011BC  3204                     379              MOVE.W  D4,D1       X***
000011BE  E049                     380              LSR.W   #8,D1       00X*
000011C0  E849                     381              LSR.W   #4,D1       000X
000011C2  4FF9 000013BC            382              LEA     numTable ,A7 Load the table into A7
000011C8  C2FC 0008                383              MULU    #8,D1
000011CC  4EB7 1000                384              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011D0                           385              *next 4MSB  *X**
000011D0  4241                     386              CLR     D1
000011D2  3204                     387              MOVE.W  D4,D1       *X**
000011D4  E949                     388              LSL.W   #4,D1       X**0        
000011D6  E049                     389              LSR.W   #8,D1       00X*
000011D8  E849                     390              LSR.W   #4,D1       000X
000011DA  4FF9 000013BC            391              LEA     numTable ,A7 Load the table into A7
000011E0  C2FC 0008                392              MULU    #8,D1
000011E4  4EB7 1000                393              JSR     (A7,D1)     Jump to subroutine of value at D1
000011E8                           394              *next 4MSB  **X*
000011E8  4241                     395              CLR     D1
000011EA  1204                     396              MOVE.B  D4,D1       00X*
000011EC  E809                     397              LSR.B   #4,D1       000X
000011EE  4FF9 000013BC            398              LEA     numTable ,A7 Load the table into A7
000011F4  C2FC 0008                399              MULU    #8,D1
000011F8  4EB7 1000                400              JSR     (A7,D1)     Jump to subroutine of value at D1
000011FC                           401              *last 4  bits   ***X
000011FC  4241                     402              CLR     D1
000011FE  1204                     403              MOVE.B  D4,D1       00*X
00001200  E909                     404              LSL.B   #4,D1       00X0    
00001202  E809                     405              LSR.B   #4,D1       000X
00001204  4FF9 000013BC            406              LEA     numTable ,A7 Load the table into A7
0000120A  C2FC 0008                407              MULU    #8,D1
0000120E  4EB7 1000                408              JSR     (A7,D1)     Jump to subroutine of value at D1
00001212                           409  *---------  Second Word Value D2    **** XXXX
00001212                           410              *4MSB   X***
00001212  4241                     411              CLR     D1
00001214  3202                     412              MOVE.W  D2,D1
00001216  E049                     413              LSR.W   #8,D1            00X*
00001218  E849                     414              LSR.W   #4,D1            000X
0000121A  C2FC 0008                415              MULU    #8,D1
0000121E  4FF9 000013BC            416              LEA     numTable ,A7 Load the table into A7
00001224  4EB7 1000                417              JSR     (A7,D1)     Jump to subroutine of value at D1
00001228                           418              *next 4MSB  *X**
00001228  4241                     419              CLR     D1
0000122A  3202                     420              MOVE.W  D2,D1
0000122C  E949                     421              LSL.W   #4,D1       X**0
0000122E  E049                     422              LSR.W   #8,D1       00X*
00001230  E809                     423              LSR.B   #4,D1       000X
00001232  C2FC 0008                424              MULU    #8,D1
00001236  4FF9 000013BC            425              LEA     numTable ,A7 Load the table into A7
0000123C  4EB7 1000                426              JSR     (A7,D1)     Jump to subroutine of value at D1
00001240                           427              *next 4MSB  **X*
00001240  4241                     428              CLR     D1
00001242  1202                     429              MOVE.B  D2,D1       00X*
00001244  E809                     430              LSR.B   #4,D1       000X
00001246  C2FC 0008                431              MULU    #8,D1
0000124A  4FF9 000013BC            432              LEA     numTable ,A7 Load the table into A7
00001250  4EB7 1000                433              JSR     (A7,D1)     Jump to subroutine of value at D1
00001254                           434              *next 4MSB  ***X
00001254  4241                     435              CLR     D1
00001256  1202                     436              MOVE.B  D2,D1       00*X
00001258  E909                     437              LSL.B   #4,D1       00X0
0000125A  E809                     438              LSR.B   #4,D1       000X
0000125C  C2FC 0008                439              MULU    #8,D1
00001260  4FF9 000013BC            440              LEA     numTable ,A7 Load the table into A7
00001266  4EB7 1000                441              JSR     (A7,D1)     Jump to subroutine of value at D1
0000126A                           442             
0000126A  4E75                     443              RTS
0000126C                           444   
0000126C                           445  * -----------------------------------------------------------            
0000126C                           446  * Subroutine IA100   ------------------------------------------
0000126C                           447  IA100                               ;immediateData
0000126C                           448  
0000126C  14FC 0023                449              MOVE.B  #'#',(A2)+ 
00001270  14FC 0024                450              MOVE.B  #'$',(A2)+
00001274  381D                     451              MOVE.W  (A5)+,D4    WE got the address for the operand
00001276  3815                     452              MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001278                           453              *4MSB   00X*
00001278  4242                     454              CLR     D2
0000127A  1404                     455              MOVE.B  D4,D2       00X*
0000127C  E80A                     456              LSR.B   #4,D2       000X
0000127E  C4FC 0008                457              MULU    #8,D2   
00001282  4FF9 000013BC            458              LEA     numTable ,A7 Load the table into A7
00001288  4EB7 2000                459              JSR     (A7,D2)     Jump to subroutine of value at D2
0000128C                           460              *last 4bits 00*X
0000128C  4242                     461              CLR     D2
0000128E  1404                     462              MOVE.B  D4,D2       00*X
00001290  E90A                     463              LSL.B   #4,D2       00X*
00001292  E80A                     464              LSR.B   #4,D2       000X
00001294  C4FC 0008                465              MULU    #8,D2   
00001298                           466             
00001298  4EB7 2000                467              JSR     (A7,D2)     Jump to subroutine of value at D2
0000129C                           468  
0000129C  4E75                     469              RTS
0000129E                           470  
0000129E                           471                            
0000129E                           472  * -----------------------------------------------------------            
0000129E                           473  * Jump Table modeTable ***************************************
0000129E                           474  *** matches the associated Addressing mode     
0000129E                           475  *************************************************************
0000129E  4EB9 000012DE            476  modeTable   JSR     M0000   ;Dn, Data Register 
000012A4  4E75                     477              RTS             ;return, done printing
000012A6  4EB9 000012EA            478              JSR     M0001   ;An, Address Register 
000012AC  4E75                     479              RTS             ;return, done printing
000012AE  4EB9 000012F6            480              JSR     M0010   ;(An), Address
000012B4  4E75                     481              RTS             ;return, done printing
000012B6  4EB9 0000130A            482              JSR     M0011   ;(An)+, Address with Postincrement
000012BC  4E75                     483              RTS             ;return, done printing
000012BE                           484              
000012BE  4EB9 00001322            485              JSR     M0100   ;-(An), Address with Predecrement
000012C4  4E75                     486              RTS             ;return, done printing
000012C6  4EB9 0000133A            487              JSR     M0101   ; blank - not assigned for this project
000012CC  4E75                     488              RTS
000012CE  4EB9 0000133C            489              JSR     M0110   ; blank - not assigned for this project
000012D4  4E75                     490              RTS
000012D6  4EB9 0000133E            491              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012DC  4E75                     492              RTS             ;return, done printing           
000012DE                           493  * -----------------------------------------------------------            
000012DE                           494  * Subroutine M0000 ------------------------------------------
000012DE                           495  M0000                               ;Dn
000012DE  14FC 0044                496              MOVE.B  #'D',(A2)+      ;display D
000012E2  264A                     497              MOVEA.L A2,A3           ;get address for n
000012E4  14FC 0020                498              MOVE.B  #' ',(A2)+      ;blank
000012E8  4E75                     499              RTS
000012EA                           500  
000012EA                           501  * -----------------------------------------------------------            
000012EA                           502  * Subroutine M0001 ------------------------------------------
000012EA                           503  M0001                               ;An
000012EA  14FC 0041                504              MOVE.B  #'A',(A2)+      ;display A
000012EE  264A                     505              MOVEA.L A2,A3           ;get address for n
000012F0  14FC 0020                506              MOVE.B  #' ',(A2)+      ;blank
000012F4  4E75                     507              RTS
000012F6                           508  
000012F6                           509  * -----------------------------------------------------------            
000012F6                           510  * Subroutine M0010 ------------------------------------------
000012F6                           511  M0010                               ;(An) Address
000012F6  14FC 0028                512              MOVE.B  #'(',(A2)+      ;display (
000012FA  14FC 0041                513              MOVE.B  #'A',(A2)+      ;display A
000012FE  264A                     514              MOVEA.L A2,A3           ;get address for n
00001300  14FC 0020                515              MOVE.B  #' ',(A2)+      ;blank      
00001304  14FC 0029                516              MOVE.B  #')',(A2)+      ;display )
00001308  4E75                     517              RTS
0000130A                           518   
0000130A                           519  * -----------------------------------------------------------            
0000130A                           520  * Subroutine M0011 ------------------------------------------
0000130A                           521  M0011                               ;(An)+ 
0000130A  14FC 0028                522              MOVE.B  #'(',(A2)+      ;display (
0000130E  14FC 0041                523              MOVE.B  #'A',(A2)+      ;display A
00001312  264A                     524              MOVEA.L A2,A3           ;get address for n 
00001314  14FC 0020                525              MOVE.B  #' ',(A2)+      ;blank     
00001318  14FC 0029                526              MOVE.B  #')',(A2)+      ;display )
0000131C  14FC 002B                527              MOVE.B  #'+',(A2)+      ;display +
00001320  4E75                     528              RTS
00001322                           529  
00001322                           530  * -----------------------------------------------------------            
00001322                           531  * Subroutine M0100 ------------------------------------------
00001322                           532  M0100                               ;-(An)
00001322  14FC 002D                533              MOVE.B  #'-',(A2)+      ;display -
00001326  14FC 0028                534              MOVE.B  #'(',(A2)+      ;display (
0000132A  14FC 0041                535              MOVE.B  #'A',(A2)+      ;display A
0000132E  264A                     536              MOVEA.L A2,A3           ;get address for n
00001330  14FC 0020                537              MOVE.B  #' ',(A2)+      ;blank      
00001334  14FC 0029                538              MOVE.B  #')',(A2)+      ;display )
00001338  4E75                     539              RTS
0000133A                           540  
0000133A                           541  * -----------------------------------------------------------    
0000133A                           542  * Subroutine M0101 ------------------------------------------
0000133A                           543  M0101                               ;do nothing
0000133A  4E75                     544              RTS
0000133C                           545  * -----------------------------------------------------------   
0000133C                           546  * Subroutine M0110 ------------------------------------------
0000133C                           547  M0110                               ;do nothing
0000133C  4E75                     548              RTS
0000133E                           549  * -----------------------------------------------------------     
0000133E                           550  * Subroutine M0111 -------------------------Not finished-----
0000133E                           551  * Register is stored at D1
0000133E                           552  * ----case 1 : Register 100 => #imm => #XX 3 spaces
0000133E                           553  * ----case 2 : Register 000 => (XXX).W => 
0000133E                           554  * ----case 3 : Register 001 => (XXX).L
0000133E                           555  * 
0000133E                           556  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
0000133E                           557  
0000133E                           558  M0111                               ;(xxx).W, (xxx).L, #imm
0000133E                           559                                      ; This will be taken care under opcode subroutine
0000133E  4E75                     560              RTS
00001340                           561  
00001340                           562  * -----------------------------------------------------------
00001340                           563  * Subroutine immediateData 
00001340                           564  ;immediateData     
00001340                           565  ;            RTS
00001340                           566  * -----------------------------------------------------------
00001340                           567  
00001340                           568  * Subroutine registerPrint----------------------------------- 
00001340                           569  registerPrint
00001340  4FF9 000013BC            570              LEA     numTable,A7 Load the table into A7
00001346  4EB7 1000                571              JSR     (A7,D1)     Jump to numTable with value at D1
0000134A  4E75                     572              RTS
0000134C                           573  
0000134C                           574  * -----------------------------------------------------------            
0000134C                           575  * Jump Table regNumTable ***************************************
0000134C                           576  *** prints the associated number of the register            *
0000134C                           577  *** Also prints hex values for data and addresses           *
0000134C                           578  *-----see below for decoding of what these sub-routines are
0000134C                           579  *************************************************************
0000134C  4EB9 0000138C            580  regNumTable JSR     RN0000   ;register 0
00001352  4E75                     581              RTS             ;return, done printing
00001354  4EB9 00001392            582              JSR     RN0001   ;register 1
0000135A  4E75                     583              RTS             ;return, done printing
0000135C  4EB9 00001398            584              JSR     RN0010   ;register 2
00001362  4E75                     585              RTS             ;return, done printing
00001364  4EB9 0000139E            586              JSR     RN0011   ;register 3
0000136A  4E75                     587              RTS             ;return, done printing
0000136C  4EB9 000013A4            588              JSR     RN0100   ;register 4
00001372  4E75                     589              RTS             ;return, done printing
00001374  4EB9 000013AA            590              JSR     RN0101   ;register 5
0000137A  4E75                     591              RTS             ;return, done printing
0000137C  4EB9 000013B0            592              JSR     RN0110   ;register 6
00001382  4E75                     593              RTS             ;return, done printing
00001384  4EB9 000013B6            594              JSR     RN0111   ;register 7
0000138A  4E75                     595              RTS             ;return, done printing
0000138C                           596  * -----------------------------------------------------------            
0000138C                           597  * Subroutine RN0000 ------------------------------------------
0000138C                           598  RN0000
0000138C  16BC 0030                599              MOVE.B  #'0',(A3)      ;display 0
00001390  4E75                     600              RTS
00001392                           601  
00001392                           602  * -----------------------------------------------------------            
00001392                           603  * Subroutine RN0001 ------------------------------------------
00001392                           604  RN0001
00001392  16BC 0031                605              MOVE.B  #'1',(A3)      ;display 1
00001396  4E75                     606              RTS
00001398                           607  
00001398                           608  * -----------------------------------------------------------            
00001398                           609  * Subroutine RN0010 ------------------------------------------
00001398                           610  RN0010
00001398  16BC 0032                611              MOVE.B  #'2',(A3)      ;display 2
0000139C  4E75                     612              RTS
0000139E                           613   
0000139E                           614  * -----------------------------------------------------------            
0000139E                           615  * Subroutine RN0011 ------------------------------------------
0000139E                           616  RN0011
0000139E  16BC 0033                617              MOVE.B  #'3',(A3)      ;display 3
000013A2  4E75                     618              RTS
000013A4                           619  
000013A4                           620  * -----------------------------------------------------------            
000013A4                           621  * Subroutine RN0100 ------------------------------------------
000013A4                           622  RN0100
000013A4  16BC 0034                623              MOVE.B  #'4',(A3)      ;display 4
000013A8  4E75                     624              RTS
000013AA                           625  
000013AA                           626  * -----------------------------------------------------------            
000013AA                           627  * Subroutine RN0101 ------------------------------------------
000013AA                           628  RN0101
000013AA  16BC 0035                629              MOVE.B  #'5',(A3)      ;display 5
000013AE  4E75                     630              RTS
000013B0                           631  
000013B0                           632  * -----------------------------------------------------------            
000013B0                           633  * Subroutine RN0110 ------------------------------------------
000013B0                           634  RN0110
000013B0  16BC 0036                635              MOVE.B  #'6',(A3)      ;display 6
000013B4  4E75                     636              RTS
000013B6                           637              
000013B6                           638  * -----------------------------------------------------------            
000013B6                           639  * Subroutine RN0111 ------------------------------------------
000013B6                           640  RN0111
000013B6  16BC 0037                641              MOVE.B  #'7',(A3)      ;display 7
000013BA  4E75                     642              RTS
000013BC                           643  
000013BC                           644  * -----------------------------------------------------------            
000013BC                           645  * Jump Table numTable ***************************************
000013BC                           646  *** prints the associated number of the register            *
000013BC                           647  *** Also prints hex values for data and addresses           *
000013BC                           648  *-----see below for decoding of what these sub-routines are
000013BC                           649  *************************************************************
000013BC  4EB9 0000143C            650  numTable    JSR     N0000   ;register 0
000013C2  4E75                     651              RTS             ;return, done printing
000013C4  4EB9 00001442            652              JSR     N0001   ;register 1
000013CA  4E75                     653              RTS             ;return, done printing
000013CC  4EB9 00001448            654              JSR     N0010   ;register 2
000013D2  4E75                     655              RTS             ;return, done printing
000013D4  4EB9 0000144E            656              JSR     N0011   ;register 3
000013DA  4E75                     657              RTS             ;return, done printing
000013DC  4EB9 00001454            658              JSR     N0100   ;register 4
000013E2  4E75                     659              RTS             ;return, done printing
000013E4  4EB9 0000145A            660              JSR     N0101   ;register 5
000013EA  4E75                     661              RTS             ;return, done printing
000013EC  4EB9 00001460            662              JSR     N0110   ;register 6
000013F2  4E75                     663              RTS             ;return, done printing
000013F4  4EB9 00001466            664              JSR     N0111   ;register 7
000013FA  4E75                     665              RTS             ;return, done printing
000013FC  4EB9 0000146C            666              JSR     N1000   ;num 8
00001402  4E75                     667              RTS             ;return, done printing
00001404  4EB9 00001472            668              JSR     N1001   ;num 9
0000140A  4E75                     669              RTS             ;return, done printing
0000140C  4EB9 00001478            670              JSR     N1010   ;num A
00001412  4E75                     671              RTS             ;return, done printing
00001414  4EB9 0000147E            672              JSR     N1011   ;num B
0000141A  4E75                     673              RTS             ;return, done printing
0000141C  4EB9 00001484            674              JSR     N1100   ;num C
00001422  4E75                     675              RTS             ;return, done printing
00001424  4EB9 0000148A            676              JSR     N1101   ;num D
0000142A  4E75                     677              RTS             ;return, done printing
0000142C  4EB9 00001490            678              JSR     N1110   ;num E
00001432  4E75                     679              RTS             ;return, done printing
00001434  4EB9 00001496            680              JSR     N1111   ;num F
0000143A  4E75                     681              RTS             ;return, done printing
0000143C                           682  * -----------------------------------------------------------            
0000143C                           683  * Subroutine N0000 ------------------------------------------
0000143C                           684  N0000
0000143C  14FC 0030                685              MOVE.B  #'0',(A2)+      ;display 0
00001440  4E75                     686              RTS
00001442                           687  
00001442                           688  * -----------------------------------------------------------            
00001442                           689  * Subroutine N0001 ------------------------------------------
00001442                           690  N0001
00001442  14FC 0031                691              MOVE.B  #'1',(A2)+      ;display 1
00001446  4E75                     692              RTS
00001448                           693  
00001448                           694  * -----------------------------------------------------------            
00001448                           695  * Subroutine N0010 ------------------------------------------
00001448                           696  N0010
00001448  14FC 0032                697              MOVE.B  #'2',(A2)+      ;display 2
0000144C  4E75                     698              RTS
0000144E                           699   
0000144E                           700  * -----------------------------------------------------------            
0000144E                           701  * Subroutine N0011 ------------------------------------------
0000144E                           702  N0011
0000144E  14FC 0033                703              MOVE.B  #'3',(A2)+      ;display 3
00001452  4E75                     704              RTS
00001454                           705  
00001454                           706  * -----------------------------------------------------------            
00001454                           707  * Subroutine N0100 ------------------------------------------
00001454                           708  N0100
00001454  14FC 0034                709              MOVE.B  #'4',(A2)+      ;display 4
00001458  4E75                     710              RTS
0000145A                           711  
0000145A                           712  * -----------------------------------------------------------            
0000145A                           713  * Subroutine N0101 ------------------------------------------
0000145A                           714  N0101
0000145A  14FC 0035                715              MOVE.B  #'5',(A2)+      ;display 5
0000145E  4E75                     716              RTS
00001460                           717  
00001460                           718  * -----------------------------------------------------------            
00001460                           719  * Subroutine N0110 ------------------------------------------
00001460                           720  N0110
00001460  14FC 0036                721              MOVE.B  #'6',(A2)+      ;display 6
00001464  4E75                     722              RTS
00001466                           723              
00001466                           724  * -----------------------------------------------------------            
00001466                           725  * Subroutine N0111 ------------------------------------------
00001466                           726  N0111
00001466  14FC 0037                727              MOVE.B  #'7',(A2)+      ;display 7
0000146A  4E75                     728              RTS
0000146C                           729  
0000146C                           730  * ----------------------------------------------------------- 
0000146C                           731  * Subroutine N1000 ------------------------------------------
0000146C                           732  N1000       
0000146C  14FC 0038                733              MOVE.B  #'8',(A2)+      ;display 8
00001470  4E75                     734              RTS
00001472                           735  
00001472                           736  * -----------------------------------------------------------            
00001472                           737  * Subroutine N1001 ------------------------------------------
00001472                           738  N1001   
00001472  14FC 0039                739              MOVE.B  #'9',(A2)+      ;display 9
00001476  4E75                     740              RTS
00001478                           741  
00001478                           742  * -----------------------------------------------------------            
00001478                           743  * Subroutine N1010 ------------------------------------------
00001478                           744  N1010   
00001478  14FC 0041                745              MOVE.B  #'A',(A2)+      ;display A
0000147C  4E75                     746              RTS
0000147E                           747  
0000147E                           748  * -----------------------------------------------------------            
0000147E                           749  * Subroutine N1011 ------------------------------------------
0000147E                           750  N1011   
0000147E  14FC 0042                751              MOVE.B  #'B',(A2)+      ;display B
00001482  4E75                     752              RTS
00001484                           753  
00001484                           754  * -----------------------------------------------------------            
00001484                           755  * Subroutine N1100 ------------------------------------------
00001484                           756  N1100   
00001484  14FC 0043                757              MOVE.B  #'C',(A2)+      ;display C
00001488  4E75                     758              RTS
0000148A                           759  
0000148A                           760  * -----------------------------------------------------------            
0000148A                           761  * Subroutine N1101 ------------------------------------------
0000148A                           762  N1101   
0000148A  14FC 0044                763              MOVE.B  #'D',(A2)+      ;display D
0000148E  4E75                     764              RTS
00001490                           765  
00001490                           766  * -----------------------------------------------------------            
00001490                           767  * Subroutine N1110 ------------------------------------------
00001490                           768  N1110   
00001490  14FC 0045                769              MOVE.B  #'E',(A2)+      ;display E
00001494  4E75                     770              RTS
00001496                           771  
00001496                           772  * -----------------------------------------------------------            
00001496                           773  * Subroutine N1111 ------------------------------------------
00001496                           774  N1111   
00001496  14FC 0046                775              MOVE.B  #'F',(A2)+      ;display F
0000149A  4E75                     776              RTS   
0000149C                           777  *-------------------- HELPER FUCNTION LOCATION -----------
0000149C                           778  *- For Mode always D2
0000149C                           779  *-- For Register always D1
0000149C                           780  *-  Original Machine code In D6
0000149C                           781  
0000149C                           782  
0000149C                           783  *            HELPER LOCATION
0000149C                           784  *            HELPER LOCATION
0000149C                           785  *            HELPER LOCATION
0000149C                           786  *            HELPER LOCATION
0000149C                           787  *            HELPER LOCATION
0000149C                           788  
0000149C                           789  get_0_3_bit
0000149C                           790      
0000149C                           791  
0000149C                           792  get_3_5bit
0000149C                           793  *------------------------------------------------------------
0000149C                           794  * MachineCode: 0001 **** **** **BI T***
0000149C                           795  * Only next last 3 bits which is stored at D0 => Source Address mode
0000149C  4242                     796              CLR     D2
0000149E  4241                     797              CLR     D1
000014A0  1406                     798              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000014A2  E50A                     799              LSL.B   #2,D2       **** **** BIT* **00
000014A4  EA0A                     800              LSR.B   #5,D2       **** **** 0000 0BIT
000014A6  4E75                     801              RTS
000014A8                           802              *------------------------------------------------------------
000014A8                           803  
000014A8                           804  
000014A8                           805  *-----------------------FUNCTION word or Long --------------
000014A8                           806  *----------Used to decipher if we are decoding a word or long
000014A8                           807  *-  This subroutine determines f the operations is a word or a long, 
000014A8                           808  *- we use the AND operator to clear out everything except for the 
000014A8                           809  *-3 bit which will be found in D3, we play with our data in D3
000014A8                           810  *-the word or LONG can be found in the OPCODE FIELD which is 
000014A8                           811  *-bits 8 _6
000014A8                           812  
000014A8                           813  WordOrLong  
000014A8                           814          *-find this OPMODE          
000014A8  4283                     815          CLR.L   D3
000014AA  3606                     816          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
000014AC                           817          *-we will store this in D3
000014AC                           818          *-using a shortcut the AND operator
000014AC                           819          *-we need these bits
000014AC                           820          *-[**** XXXX X[XXX] ****]
000014AC                           821              *- starts repersenting bits we do not need
000014AC                           822              *-shortcut we do not need to shift as much
000014AC                           823              *-minor optimization
000014AC                           824              *-AND F to keep 0 to throw away
000014AC  C67C 0FF0                825          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
000014B0  EC4B                     826          LSR.W   #6,D3
000014B2                           827          *- now weneed to get the last 3 bits
000014B2                           828          *-shift to the right by 6 makes the last 3 bits in the 
000014B2                           829          *-byte postion
000014B2                           830          *-[**** **** XXXX X[XXX]]m we need to clear everything else
000014B2  C67C 000F                831          AND.W   #$000F,D3 clear everything except the last byte we need
000014B6  E34B                     832          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
000014B8                           833          *-make sure everyhting is clearn except the last byte
000014B8  C67C 000F                834          AND.W   #$000F,D3
000014BC                           835          *-Shift back by 1 bit to the right
000014BC  E24B                     836          LSR.W   #1,D3
000014BE  4E75                     837          RTS 
000014C0                           838          
000014C0                           839              
000014C0                           840              
000014C0                           841              
000014C0                           842              
000014C0                           843              *---------------------------------------------------------------
000014C0                           844              *--------------------------------------------------------
000014C0                           845              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000014C0                           846              *-------------------------------------
000014C0                           847              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000014C0                           848  op0100      
000014C0                           849  
000014C0                           850  
000014C0                           851   
000014C0                           852              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000014C0                           853              ;BEQ     jumpToRt            
000014C0                           854              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000014C0                           855              ;BEQ     returnRt 
000014C0                           856             
000014C0                           857              ;JSR     WorL        
000014C0                           858              ;CMP.B   #hex7,D3    ;see if it's a LEA
000014C0                           859              ;BEQ     _lea        ;branch 
000014C0                           860              
000014C0                           861              ;JSR     clrORmm       
000014C0                           862              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000014C0                           863              ;BEQ     _clrB       ;branch             
000014C0                           864              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000014C0                           865              ;BEQ     _clrW       ;branch   
000014C0                           866              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000014C0                           867              ;BEQ     _clrL       ;branch
000014C0                           868    
000014C0                           869              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000014C0                           870              ;BEQ     _movemW     ;branch   
000014C0                           871              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000014C0                           872              ;BEQ     _movemL     ;branch              
000014C0                           873                          
000014C0                           874              ;BRA     opError     ;bad opcode branch to error
000014C0                           875              
000014C0                           876              
000014C0  BC7C 4E71                877              CMP.W   #$4E71,D6
000014C4  6700 000A                878              BEQ     _NOP
000014C8                           879              
000014C8  BC7C 4E75                880              CMP.W   #$4E75,D6   ;see if it's a RTS
000014CC  6700 0028                881              BEQ     _RTS        branch to RTS
000014D0                           882             
000014D0                           883  
000014D0                           884              
000014D0                           885  _NOP
000014D0  7E02                     886              MOVE.L  #2,D7       ;data is not error
000014D2  14FC 0020                887              MOVE.B  #' ',(A2)+      ;print spaces
000014D6  14FC 0020                888              MOVE.B  #' ',(A2)+      ;print spaces
000014DA  14FC 0020                889              MOVE.B  #' ',(A2)+      ;print spaces
000014DE  14FC 0020                890              MOVE.B  #' ',(A2)+      ;print spaces
000014E2  14FC 004E                891              MOVE.B  #'N',(A2)+      ;print N
000014E6  14FC 004F                892              MOVE.B  #'O',(A2)+      ;print O
000014EA  14FC 0050                893              MOVE.B  #'P',(A2)+      ;print P
000014EE  1A3C 0003                894              MOVE.B  #3,D5           ;counter for output
000014F2  6000 0B30                895              BRA     printCode
000014F6                           896  
000014F6                           897  _RTS    
000014F6  7E02                     898              MOVE.L  #2,D7       ;data is not error
000014F8  14FC 0020                899              MOVE.B  #' ',(A2)+      ;print spaces
000014FC  14FC 0020                900              MOVE.B  #' ',(A2)+      ;print spaces
00001500  14FC 0020                901              MOVE.B  #' ',(A2)+      ;print spaces
00001504  14FC 0020                902              MOVE.B  #' ',(A2)+      ;print spaces
00001508  14FC 0052                903              MOVE.B  #'R',(A2)+      ;print R
0000150C  14FC 0054                904              MOVE.B  #'T',(A2)+      ;print T
00001510  14FC 0053                905              MOVE.B  #'S',(A2)+      ;print S
00001514  1A3C 0003                906              MOVE.B  #3,D5           ;counter for output
00001518  6000 0B0A                907              BRA     printCode
00001518  6000 0B0A                908  -------------------- end include --------------------
0000151C                           909              INCLUDE 'op0001.x68'    MOVE.b Differetn file
0000151C                           910  
0000151C                           911  
0000151C                           912  
0000151C                           913  
0000151C                           914  op0001
0000151C  7E02                     915              MOVE.L  #2,D7       ;data is not error
0000151E  14FC 0020                916              MOVE.B  #' ',(A2)+      ;print spaces
00001522  14FC 0020                917              MOVE.B  #' ',(A2)+      ;print spaces
00001526  14FC 0020                918              MOVE.B  #' ',(A2)+      ;print spaces
0000152A  14FC 0020                919              MOVE.B  #' ',(A2)+      ;print spaces
0000152E  14FC 004D                920              MOVE.B  #'M',(A2)+      ;print M
00001532  14FC 004F                921              MOVE.B  #'O',(A2)+      ;print O
00001536  14FC 0056                922              MOVE.B  #'V',(A2)+      ;print V
0000153A  14FC 0045                923              MOVE.B  #'E',(A2)+      PRINT  E
0000153E  14FC 002E                924              MOVE.B  #'.',(A2)+
00001542  14FC 0042                925              MOVE.B  #'B',(A2)+
00001546  14FC 0020                926              MOVE.B  #' ',(A2)+   
0000154A  4242                     927              CLR     D2
0000154C  4241                     928              CLR     D1
0000154E  1406                     929              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001550  E50A                     930              LSL.B   #2,D2       **** **** BIT* **00
00001552  EA0A                     931              LSR.B   #5,D2       **** **** 0000 0BIT
00001554  1002                     932              MOVE.B  D2,D0
00001556  C0FC 0008                933              MULU    #8,D0       value adjusted for jumping
0000155A  4DF8 129E                934              LEA     modeTable,A6 Load the table into A6
0000155E  4EB6 0000                935              JSR     (A6,D0)     Jump to subroutine of value at D0
00001562                           936              
00001562  1206                     937              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001564  EB09                     938              LSL.B   #5,D1       **** **** BIT0 0000
00001566  EA09                     939              LSR.B   #5,D1       **** **** 0000 0BIT
00001568  1001                     940              MOVE.B  D1,D0      
0000156A  C0FC 0008                941              MULU    #8,D0       value adjusted for jumping
0000156E  4FF8 134C                942              LEA     regNumTable ,A7 Load the table into A7
00001572  4EB7 0000                943              JSR     (A7,D0)     Jump to subroutine of value at D1
00001576  4FF8 111E                944              LEA     immAbTable, A7
0000157A  C2FC 0008                945              MULU    #8,D1
0000157E  4EB7 1000                946              JSR     (A7,D1)    
00001582                           947  
00001582                           948  
00001582  14FC 002C                949              MOVE.B  #',',(A2)+  comma between operands
00001586  4242                     950              CLR     D2
00001588  4241                     951              CLR     D1
0000158A  3406                     952              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
0000158C  EF4A                     953              LSL.W   #7,D2       BIT* **** **** 0000
0000158E  E04A                     954              LSR.W   #8,D2       0000 0000 BIT* ****
00001590  EA4A                     955              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001592  C4FC 0008                956              MULU    #8,D2       value adjusted for jumping
00001596  4DF8 129E                957              LEA     modeTable,A6 Load the table into A6
0000159A  4EB6 2000                958              JSR     (A6,D2)     Jump to subroutine of value at D2
0000159E                           959             
0000159E  3206                     960              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000015A0  E949                     961              LSL.W   #4,D1       BIT* **** **** 0000
000015A2  E049                     962              LSR.W   #8,D1       0000 0000 BIT* ****
000015A4  EA49                     963              LSR.W   #5,D1       0000 0000 0000 0BIT     
000015A6  C2FC 0008                964              MULU    #8,D1       value adjusted for jumping
000015AA  4FF8 134C                965              LEA     regNumTable ,A7 Load the table into A7
000015AE  4EB7 1000                966              JSR     (A7,D1)     Jump to subroutine of value at D1    
000015B2  6000 0A70                967              BRA     printCode
000015B6                           968  immediateData
000015B6  14FC 0023                969              MOVE.B  #'#',(A2)+ 
000015BA  381D                     970              MOVE.W  (A5)+,D4    WE got the address for the operand
000015BC  3815                     971              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000015BE                           972              *4MSB   00X*
000015BE  4242                     973              CLR     D2
000015C0  1404                     974              MOVE.B  D4,D2       00X*
000015C2  E80A                     975              LSR.B   #4,D2       000X
000015C4  C4FC 0008                976              MULU    #8,D2   
000015C8  4FF8 13BC                977              LEA     numTable ,A7 Load the table into A7
000015CC  4EB7 2000                978              JSR     (A7,D2)     Jump to subroutine of value at D2
000015D0                           979              *last 4bits 00*X
000015D0  4242                     980              CLR     D2
000015D2  1404                     981              MOVE.B  D4,D2       00*X
000015D4  E90A                     982              LSL.B   #4,D2       00X*
000015D6  E80A                     983              LSR.B   #4,D2       000X
000015D8  C4FC 0008                984              MULU    #8,D2   
000015DC                           985             
000015DC  4EB7 2000                986              JSR     (A7,D2)     Jump to subroutine of value at D2
000015E0                           987  
000015E0  4E75                     988              RTS
000015E2                           989              
000015E2                           990  absoulteWord   
000015E2  14FC 0024                991              MOVE.B  #'$',(A2)+ 
000015E6  E08C                     992              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015E8  E08C                     993              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015EA                           994              *4MSB   X***
000015EA  4241                     995              CLR     D1
000015EC  3204                     996              MOVE.W  D4,D1       X***
000015EE  E049                     997              LSR.W   #8,D1       00X*
000015F0  E849                     998              LSR.W   #4,D1       000X
000015F2  4FF8 13BC                999              LEA     numTable ,A7 Load the table into A7
000015F6  C2FC 0008               1000              MULU    #8,D1
000015FA  4EB7 1000               1001              JSR     (A7,D1)     Jump to subroutine of value at D1 
000015FE                          1002              *next 4MSB  *X**
000015FE  4241                    1003              CLR     D1
00001600  3204                    1004              MOVE.W  D4,D1       *X**
00001602  E949                    1005              LSL.W   #4,D1       X**0        
00001604  E049                    1006              LSR.W   #8,D1       00X*
00001606  E849                    1007              LSR.W   #4,D1       000X
00001608  4FF8 13BC               1008              LEA     numTable ,A7 Load the table into A7
0000160C  C2FC 0008               1009              MULU    #8,D1
00001610  4EB7 1000               1010              JSR     (A7,D1)     Jump to subroutine of value at D1
00001614                          1011              *next 4MSB  **X*
00001614  4241                    1012              CLR     D1
00001616  1204                    1013              MOVE.B  D4,D1       00X*
00001618  E809                    1014              LSR.B   #4,D1       000X
0000161A  4FF8 13BC               1015              LEA     numTable ,A7 Load the table into A7
0000161E  C2FC 0008               1016                          MULU    #8,D1
00001622  4EB7 1000               1017              JSR     (A7,D1)     Jump to subroutine of value at D1
00001626                          1018              *last 4  bits   ***X
00001626  4241                    1019              CLR     D1
00001628  1204                    1020              MOVE.B  D4,D1       00*X
0000162A  E909                    1021              LSL.B   #4,D1       00X0    
0000162C  E809                    1022              LSR.B   #4,D1       000X
0000162E  4FF8 13BC               1023              LEA     numTable ,A7 Load the table into A7
00001632  C2FC 0008               1024                          MULU    #8,D1
00001636  4EB7 1000               1025              JSR     (A7,D1)     Jump to subroutine of value at D1
0000163A  4E75                    1026              RTS            
0000163C                          1027  absoulteLong   
0000163C  4241                    1028              CLR     D1
0000163E  4242                    1029              CLR     D2 
00001640  14FC 0024               1030              MOVE.B  #'$',(A2)+ 
00001644  2404                    1031              MOVE.L  D4,D2       D2 will be used for later
00001646  E08C                    1032              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001648  E08C                    1033              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000164A                          1034              *4MSB   X***
0000164A  4241                    1035              CLR     D1
0000164C  3204                    1036              MOVE.W  D4,D1       X***
0000164E  E049                    1037              LSR.W   #8,D1       00X*
00001650  E849                    1038              LSR.W   #4,D1       000X
00001652  4FF8 13BC               1039              LEA     numTable ,A7 Load the table into A7
00001656  C2FC 0008               1040              MULU    #8,D1
0000165A  4EB7 1000               1041              JSR     (A7,D1)     Jump to subroutine of value at D1 
0000165E                          1042              *next 4MSB  *X**
0000165E  4241                    1043              CLR     D1
00001660  3204                    1044              MOVE.W  D4,D1       *X**
00001662  E949                    1045              LSL.W   #4,D1       X**0        
00001664  E049                    1046              LSR.W   #8,D1       00X*
00001666  E849                    1047              LSR.W   #4,D1       000X
00001668  4FF8 13BC               1048              LEA     numTable ,A7 Load the table into A7
0000166C  C2FC 0008               1049              MULU    #8,D1
00001670  4EB7 1000               1050              JSR     (A7,D1)     Jump to subroutine of value at D1
00001674                          1051              *next 4MSB  **X*
00001674  4241                    1052              CLR     D1
00001676  1204                    1053              MOVE.B  D4,D1       00X*
00001678  E809                    1054              LSR.B   #4,D1       000X
0000167A  4FF8 13BC               1055              LEA     numTable ,A7 Load the table into A7
0000167E  C2FC 0008               1056                          MULU    #8,D1
00001682  4EB7 1000               1057              JSR     (A7,D1)     Jump to subroutine of value at D1
00001686                          1058              *last 4  bits   ***X
00001686  4241                    1059              CLR     D1
00001688  1204                    1060              MOVE.B  D4,D1       00*X
0000168A  E909                    1061              LSL.B   #4,D1       00X0    
0000168C  E809                    1062              LSR.B   #4,D1       000X
0000168E  4FF8 13BC               1063              LEA     numTable ,A7 Load the table into A7
00001692  C2FC 0008               1064                          MULU    #8,D1
00001696  4EB7 1000               1065              JSR     (A7,D1)     Jump to subroutine of value at D1
0000169A                          1066              *4MSB   X***
0000169A  4241                    1067              CLR     D1
0000169C  3202                    1068              MOVE.W  D2,D1
0000169E  E049                    1069              LSR.W   #8,D1            00X*
000016A0  E849                    1070              LSR.W   #4,D1            000X
000016A2  C2FC 0008               1071              MULU    #8,D1
000016A6  4FF8 13BC               1072              LEA     numTable ,A7 Load the table into A7
000016AA  4EB7 1000               1073              JSR     (A7,D1)     Jump to subroutine of value at D1
000016AE                          1074              *next 4MSB  *X**
000016AE  4241                    1075              CLR     D1
000016B0  3202                    1076              MOVE.W  D2,D1
000016B2  E949                    1077              LSL.W   #4,D1       X**0
000016B4  E049                    1078              LSR.W   #8,D1       00X*
000016B6  E809                    1079              LSR.B   #4,D1       000X
000016B8  C2FC 0008               1080              MULU    #8,D1
000016BC  4FF8 13BC               1081              LEA     numTable ,A7 Load the table into A7
000016C0  4EB7 1000               1082              JSR     (A7,D1)     Jump to subroutine of value at D1
000016C4                          1083              *next 4MSB  **X*
000016C4  4241                    1084              CLR     D1
000016C6  1202                    1085              MOVE.B  D2,D1       00X*
000016C8  E809                    1086              LSR.B   #4,D1       000X
000016CA  C2FC 0008               1087              MULU    #8,D1
000016CE  4FF8 13BC               1088              LEA     numTable ,A7 Load the table into A7
000016D2  4EB7 1000               1089              JSR     (A7,D1)     Jump to subroutine of value at D1
000016D6                          1090              *next 4MSB  ***X
000016D6  4241                    1091              CLR     D1
000016D8  1202                    1092              MOVE.B  D2,D1       00*X
000016DA  E909                    1093              LSL.B   #4,D1       00X0
000016DC  E809                    1094              LSR.B   #4,D1       000X
000016DE  C2FC 0008               1095              MULU    #8,D1
000016E2  4FF8 13BC               1096              LEA     numTable ,A7 Load the table into A7
000016E6  4EB7 1000               1097              JSR     (A7,D1)     Jump to subroutine of value at D1
000016EA                          1098             
000016EA                          1099  
000016EA  4E75                    1100              RTS
000016EC                          1101  
000016EC                          1102  
000016EC                          1103  
000016EC                          1104  
000016EC                          1105  
000016EC                          1106  
000016EC                          1107  
000016EC                          1108  
000016EC                          1109  
000016EC                          1110  
000016EC                          1111  
000016EC                          1112  
000016EC                          1113  
000016EC                          1114  
000016EC                          1115  
000016EC                          1116  
000016EC                          1117  
000016EC                          1118  
000016EC                          1119  
000016EC                          1120  
000016EC                          1121  
000016EC                          1122  
000016EC                          1123  
000016EC                          1124  -------------------- end include --------------------
000016EC                          1125              INCLUDE 'op1101.x68'    ADD,ADDA
000016EC                          1126  op1101 
000016EC                          1127      ;ADD, ADDA
000016EC                          1128      
000016EC                          1129      ; we need to determine what its size is (B,W,L) putting the data in D6
000016EC  4EB8 14A8               1130      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
000016F0                          1131      ; we use to decode and branch
000016F0                          1132      *-now D3 contains the OPMODE FIELD telling us wether this is
000016F0                          1133      *-a LONG or a WORD
000016F0                          1134      
000016F0                          1135      *-now we need to decipher if its any of the adds
000016F0  B63C 0000               1136      CMP.B   #hex_0,D3 is this ADD.B
000016F4  6700 003A               1137      BEQ add_B   ;<EA> -> Dn
000016F8  B63C 0001               1138      CMP.B   #hex_1,D3   is it ADD.W
000016FC  6700 00B8               1139      BEQ add_W ;<EA> ->Dn
00001700  B63C 0002               1140      CMP.B   #hex_2,D3   is it ADD.L
00001704  6700 0136               1141      BEQ add_L ;<EA> ->Dn
00001708                          1142      
00001708  B63C 0003               1143      CMP.B   #hex_3,D3
0000170C  6700 01B4               1144      BEQ adda_W
00001710                          1145      
00001710  B63C 0004               1146      CMP.B   #hex_4,D3
00001714  6700 02C0               1147      BEQ add_B_EA Dn -> EA
00001718                          1148      
00001718  B63C 0005               1149      CMP.B   #hex_5,D3
0000171C  6700 0350               1150      BEQ add_W_EA Dn ->EA
00001720                          1151      
00001720  B63C 0006               1152      CMP.B   #hex_6,D3
00001724  6700 03D0               1153      BEQ add_L_EA Dn - >EA
00001728  B63C 0007               1154      CMP.B   #hex_7,D3
0000172C  6700 021E               1155      BEQ adda_L
00001730                          1156  
00001730                          1157  add_B   ;add.B EA->Dn
00001730                          1158      
00001730                          1159      *-store the size of the operation for immediate decoding use here/below
00001730                          1160      *-D7 equals storage of size of operation
00001730                          1161      *- #3 is byte , #2 is word #1 is long
00001730                          1162      ;MOVE.B  #3,D7
00001730                          1163      
00001730                          1164  
00001730  14FC 0020               1165      MOVE.B  #' ',(A2)+
00001734  14FC 0020               1166      MOVE.B  #' ',(A2)+
00001738  14FC 0020               1167      MOVE.B  #' ',(A2)+
0000173C  14FC 0020               1168      MOVE.B  #' ',(A2)+
00001740  14FC 0041               1169      MOVE.B  #'A',(A2)+
00001744  14FC 0044               1170      MOVE.B  #'D',(A2)+
00001748  14FC 0044               1171      MOVE.B  #'D',(A2)+
0000174C  14FC 002E               1172      MOVE.B  #'.',(A2)+
00001750  14FC 0042               1173      MOVE.B  #'B',(A2)+
00001754                          1174      *-always allow 4 spaces
00001754  14FC 0020               1175      MOVE.B  #' ',(A2)+
00001758  14FC 0020               1176      MOVE.B  #' ',(A2)+
0000175C  14FC 0020               1177      MOVE.B  #' ',(A2)+
00001760  14FC 0020               1178      MOVE.B  #' ',(A2)+
00001764                          1179      
00001764                          1180      *-deCDOE EA (Dn,Dn
00001764                          1181          * MachineCode: 0001 **** **** **BI T***
00001764                          1182      *-insert immediate addressing here
00001764  4242                    1183              CLR     D2
00001766  4241                    1184              CLR     D1
00001768  1406                    1185              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000176A  E50A                    1186              LSL.B   #2,D2       **** **** BIT* **00
0000176C  EA0A                    1187              LSR.B   #5,D2       **** **** 0000 0BIT
0000176E  C4FC 0008               1188              MULU    #8,D2       value adjusted for jumping
00001772  4DF8 129E               1189              LEA     modeTable,A6 Load the table into A6
00001776  4EB6 2000               1190              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000177A                          1191  
0000177A                          1192  
0000177A                          1193   * MachineCode: 0001 **** **** **** *BIT
0000177A                          1194              
0000177A  1206                    1195              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000177C  EB09                    1196              LSL.B   #5,D1       **** **** BIT0 0000
0000177E  EA09                    1197              LSR.B   #5,D1       **** **** 0000 0BIT      
00001780  C2FC 0008               1198              MULU    #8,D1       value adjusted for jumping
00001784  4FF8 134C               1199              LEA     regNumTable ,A7 Load the table into A7
00001788  4EB7 1000               1200              JSR     (A7,D1)     Jump to subroutine of value at D1
0000178C  B23C 0020               1201              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001790  6700 FE24               1202              BEQ.W   immediateData   ;branch to immediateData
00001794  14FC 002C               1203              MOVE.B  #',',(A2)+
00001798  14FC 0044               1204              MOVE.B  #'D',(A2)+
0000179C                          1205              
0000179C                          1206    *------------------------------------------------------------
0000179C  4241                    1207              CLR     D1
0000179E  3206                    1208              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000017A0  E949                    1209              LSL.W   #4,D1       BIT* **** **** 0000
000017A2  E049                    1210              LSR.W   #8,D1       0000 0000 BIT* ****
000017A4  EA49                    1211              LSR.W   #5,D1       0000 0000 0000 0BIT     
000017A6  C2FC 0008               1212              MULU    #8,D1       value adjusted for jumping
000017AA  4FF8 13BC               1213              LEA     numTable ,A7 Load the table into A7
000017AE  4EB7 1000               1214              JSR     (A7,D1)     Jump to subroutine of value at D1   
000017B2  6000 0870               1215              BRA printcode  
000017B6                          1216      
000017B6                          1217       
000017B6                          1218  add_W   ;add.B EA->Dn
000017B6                          1219      
000017B6                          1220      *-store the size of the operation for immediate decoding use here/below
000017B6                          1221      *-D7 equals storage of size of operation
000017B6                          1222      *- #3 is byte , #2 is word #1 is long
000017B6                          1223      ;MOVE.B  #3,D7
000017B6                          1224      
000017B6                          1225  
000017B6  14FC 0020               1226      MOVE.B  #' ',(A2)+
000017BA  14FC 0020               1227      MOVE.B  #' ',(A2)+
000017BE  14FC 0020               1228      MOVE.B  #' ',(A2)+
000017C2  14FC 0020               1229      MOVE.B  #' ',(A2)+
000017C6  14FC 0041               1230      MOVE.B  #'A',(A2)+
000017CA  14FC 0044               1231      MOVE.B  #'D',(A2)+
000017CE  14FC 0044               1232      MOVE.B  #'D',(A2)+
000017D2  14FC 002E               1233      MOVE.B  #'.',(A2)+
000017D6  14FC 0057               1234      MOVE.B  #'W',(A2)+
000017DA                          1235      *-always allow 4 spaces
000017DA  14FC 0020               1236      MOVE.B  #' ',(A2)+
000017DE  14FC 0020               1237      MOVE.B  #' ',(A2)+
000017E2  14FC 0020               1238      MOVE.B  #' ',(A2)+
000017E6  14FC 0020               1239      MOVE.B  #' ',(A2)+
000017EA                          1240      
000017EA                          1241      *-deCDOE EA (Dn,Dn
000017EA                          1242          * MachineCode: 0001 **** **** **BI T***
000017EA                          1243      *-insert immediate addressing here
000017EA  4242                    1244              CLR     D2
000017EC  4241                    1245              CLR     D1
000017EE  1406                    1246              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000017F0  E50A                    1247              LSL.B   #2,D2       **** **** BIT* **00
000017F2  EA0A                    1248              LSR.B   #5,D2       **** **** 0000 0BIT
000017F4  C4FC 0008               1249              MULU    #8,D2       value adjusted for jumping
000017F8  4DF8 129E               1250              LEA     modeTable,A6 Load the table into A6
000017FC  4EB6 2000               1251              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001800                          1252  
00001800                          1253  
00001800                          1254   * MachineCode: 0001 **** **** **** *BIT
00001800                          1255              
00001800  1206                    1256              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001802  EB09                    1257              LSL.B   #5,D1       **** **** BIT0 0000
00001804  EA09                    1258              LSR.B   #5,D1       **** **** 0000 0BIT      
00001806  C2FC 0008               1259              MULU    #8,D1       value adjusted for jumping
0000180A  4FF8 134C               1260              LEA     regNumTable ,A7 Load the table into A7
0000180E  4EB7 1000               1261              JSR     (A7,D1)     Jump to subroutine of value at D1
00001812  B23C 0020               1262              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001816  6700 FD9E               1263              BEQ.W   immediateData   ;branch to immediateData
0000181A  14FC 002C               1264              MOVE.B  #',',(A2)+
0000181E  14FC 0044               1265              MOVE.B  #'D',(A2)+
00001822                          1266              
00001822                          1267                *------------------------------------------------------------
00001822  4241                    1268              CLR     D1
00001824  3206                    1269              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001826  E949                    1270              LSL.W   #4,D1       BIT* **** **** 0000
00001828  E049                    1271              LSR.W   #8,D1       0000 0000 BIT* ****
0000182A  EA49                    1272              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000182C  C2FC 0008               1273              MULU    #8,D1       value adjusted for jumping
00001830  4FF8 13BC               1274              LEA     numTable ,A7 Load the table into A7
00001834  4EB7 1000               1275              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001838  6000 07EA               1276              BRA printcode  
0000183C                          1277     
0000183C                          1278  add_L   ;add.B EA->Dn
0000183C                          1279      
0000183C                          1280      *-store the size of the operation for immediate decoding use here/below
0000183C                          1281      *-D7 equals storage of size of operation
0000183C                          1282      *- #3 is byte , #2 is word #1 is long
0000183C                          1283      ;MOVE.B  #3,D7
0000183C                          1284      
0000183C                          1285  
0000183C  14FC 0020               1286      MOVE.B  #' ',(A2)+
00001840  14FC 0020               1287      MOVE.B  #' ',(A2)+
00001844  14FC 0020               1288      MOVE.B  #' ',(A2)+
00001848  14FC 0020               1289      MOVE.B  #' ',(A2)+
0000184C  14FC 0041               1290      MOVE.B  #'A',(A2)+
00001850  14FC 0044               1291      MOVE.B  #'D',(A2)+
00001854  14FC 0044               1292      MOVE.B  #'D',(A2)+
00001858  14FC 002E               1293      MOVE.B  #'.',(A2)+
0000185C  14FC 004C               1294      MOVE.B  #'L',(A2)+
00001860                          1295      *-always allow 4 spaces
00001860  14FC 0020               1296      MOVE.B  #' ',(A2)+
00001864  14FC 0020               1297      MOVE.B  #' ',(A2)+
00001868  14FC 0020               1298      MOVE.B  #' ',(A2)+
0000186C  14FC 0020               1299      MOVE.B  #' ',(A2)+
00001870                          1300      
00001870                          1301      *-deCDOE EA (Dn,Dn
00001870                          1302          * MachineCode: 0001 **** **** **BI T***
00001870                          1303      *-insert immediate addressing here
00001870  4242                    1304              CLR     D2
00001872  4241                    1305              CLR     D1
00001874  1406                    1306              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001876  E50A                    1307              LSL.B   #2,D2       **** **** BIT* **00
00001878  EA0A                    1308              LSR.B   #5,D2       **** **** 0000 0BIT
0000187A  C4FC 0008               1309              MULU    #8,D2       value adjusted for jumping
0000187E  4DF8 129E               1310              LEA     modeTable,A6 Load the table into A6
00001882  4EB6 2000               1311              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001886                          1312  
00001886                          1313  
00001886                          1314   * MachineCode: 0001 **** **** **** *BIT
00001886                          1315              
00001886  1206                    1316              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001888  EB09                    1317              LSL.B   #5,D1       **** **** BIT0 0000
0000188A  EA09                    1318              LSR.B   #5,D1       **** **** 0000 0BIT      
0000188C  C2FC 0008               1319              MULU    #8,D1       value adjusted for jumping
00001890  4FF8 134C               1320              LEA     regNumTable ,A7 Load the table into A7
00001894  4EB7 1000               1321              JSR     (A7,D1)     Jump to subroutine of value at D1
00001898  B23C 0020               1322              CMP.B   #32,D1         ; #imm => #XX 3 spaces
0000189C  6700 FD18               1323              BEQ.W   immediateData   ;branch to immediateData
000018A0  14FC 002C               1324              MOVE.B  #',',(A2)+
000018A4  14FC 0044               1325              MOVE.B  #'D',(A2)+
000018A8                          1326              
000018A8                          1327                *------------------------------------------------------------
000018A8  4241                    1328              CLR     D1
000018AA  3206                    1329              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000018AC  E949                    1330              LSL.W   #4,D1       BIT* **** **** 0000
000018AE  E049                    1331              LSR.W   #8,D1       0000 0000 BIT* ****
000018B0  EA49                    1332              LSR.W   #5,D1       0000 0000 0000 0BIT     
000018B2  C2FC 0008               1333              MULU    #8,D1       value adjusted for jumping
000018B6  4FF8 13BC               1334              LEA     numTable ,A7 Load the table into A7
000018BA  4EB7 1000               1335              JSR     (A7,D1)     Jump to subroutine of value at D1   
000018BE  6000 0764               1336              BRA printcode  
000018C2                          1337      
000018C2                          1338  adda_W  ;ADDA.W
000018C2                          1339      *-maybe error checking
000018C2                          1340      *-we know its ADDA.W so print it to our buffer
000018C2                          1341      *-ex ADDA.W D2,D7
000018C2                          1342      
000018C2  14FC 0020               1343      MOVE.B  #' ',(A2)+
000018C6  14FC 0020               1344      MOVE.B  #' ',(A2)+
000018CA  14FC 0020               1345      MOVE.B  #' ',(A2)+
000018CE  14FC 0020               1346      MOVE.B  #' ',(A2)+
000018D2  14FC 0041               1347      MOVE.B  #'A',(A2)+
000018D6  14FC 0044               1348      MOVE.B  #'D',(A2)+
000018DA  14FC 0044               1349      MOVE.B  #'D',(A2)+
000018DE  14FC 0041               1350      MOVE.B  #'A',(A2)+
000018E2  14FC 002E               1351      MOVE.B  #'.',(A2)+
000018E6  14FC 0057               1352      MOVE.B  #'W',(A2)+
000018EA                          1353      *-always allow 4 spaces
000018EA  14FC 0020               1354      MOVE.B  #' ',(A2)+
000018EE  14FC 0020               1355      MOVE.B  #' ',(A2)+
000018F2  14FC 0020               1356      MOVE.B  #' ',(A2)+
000018F6  14FC 0020               1357      MOVE.B  #' ',(A2)+
000018FA                          1358      
000018FA                          1359      * MachineCode: 0001 **** **** **BI T***
000018FA                          1360      *-insert immediate addressing here
000018FA  4242                    1361              CLR     D2
000018FC  4241                    1362              CLR     D1
000018FE  1406                    1363              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001900  E50A                    1364              LSL.B   #2,D2       **** **** BIT* **00
00001902  EA0A                    1365              LSR.B   #5,D2       **** **** 0000 0BIT
00001904  C4FC 0008               1366              MULU    #8,D2       value adjusted for jumping
00001908  4DF8 129E               1367              LEA     modeTable,A6 Load the table into A6
0000190C  4EB6 2000               1368              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001910                          1369  
00001910                          1370  
00001910                          1371   * MachineCode: 0001 **** **** **** *BIT
00001910                          1372              
00001910  1206                    1373              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001912  EB09                    1374              LSL.B   #5,D1       **** **** BIT0 0000
00001914  EA09                    1375              LSR.B   #5,D1       **** **** 0000 0BIT      
00001916  C2FC 0008               1376              MULU    #8,D1       value adjusted for jumping
0000191A  4FF8 134C               1377              LEA     regNumTable ,A7 Load the table into A7
0000191E  4EB7 1000               1378              JSR     (A7,D1)     Jump to subroutine of value at D1
00001922  B23C 0020               1379              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001926  6700 FC8E               1380              BEQ.W   immediateData   ;branch to immediateData
0000192A                          1381      
0000192A  14FC 002C               1382          MOVE.B  #',',(A2)+
0000192E  14FC 0041               1383          MOVE.B  #'A',(A2)+
00001932  4241                    1384              CLR     D1
00001934  3206                    1385              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001936  E949                    1386              LSL.W   #4,D1       BIT* **** **** 0000
00001938  E049                    1387              LSR.W   #8,D1       0000 0000 BIT* ****
0000193A  EA49                    1388              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000193C  C2FC 0008               1389              MULU    #8,D1       value adjusted for jumping
00001940  4FF8 13BC               1390              LEA     numTable ,A7 Load the table into A7
00001944  4EB7 1000               1391              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001948                          1392          
00001948                          1393      
00001948  6000 06DA               1394          BRA printCode
0000194C                          1395          
0000194C                          1396          
0000194C                          1397          
0000194C                          1398  
0000194C                          1399  adda_L  ;ADDA.L
0000194C                          1400      *-maybe error checking
0000194C                          1401      *-we know its ADDA.L so print it to our buffer
0000194C                          1402      *-ex ADDA.L D2,D7
0000194C                          1403      
0000194C  14FC 0020               1404      MOVE.B  #' ',(A2)+
00001950  14FC 0020               1405      MOVE.B  #' ',(A2)+
00001954  14FC 0020               1406      MOVE.B  #' ',(A2)+
00001958  14FC 0020               1407      MOVE.B  #' ',(A2)+
0000195C  14FC 0041               1408          MOVE.B  #'A',(A2)+
00001960  14FC 0044               1409          MOVE.B  #'D',(A2)+
00001964  14FC 0044               1410          MOVE.B  #'D',(A2)+
00001968  14FC 0041               1411          MOVE.B  #'A',(A2)+
0000196C  14FC 002E               1412          MOVE.B  #'.',(A2)+
00001970  14FC 004C               1413          MOVE.B  #'L',(A2)+
00001974                          1414      *-always allow 4 spaces
00001974  14FC 0020               1415          MOVE.B  #' ',(A2)+
00001978  14FC 0020               1416          MOVE.B  #' ',(A2)+
0000197C  14FC 0020               1417          MOVE.B  #' ',(A2)+
00001980  14FC 0020               1418          MOVE.B  #' ',(A2)+      
00001984                          1419      
00001984                          1420      * MachineCode: 0001 **** **** **BI T***
00001984                          1421      *-insert immediate addressing here
00001984  4242                    1422              CLR     D2
00001986  4241                    1423              CLR     D1
00001988  1406                    1424              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000198A  E50A                    1425              LSL.B   #2,D2       **** **** BIT* **00
0000198C  EA0A                    1426              LSR.B   #5,D2       **** **** 0000 0BIT
0000198E  C4FC 0008               1427              MULU    #8,D2       value adjusted for jumping
00001992  4DF8 129E               1428              LEA     modeTable,A6 Load the table into A6
00001996  4EB6 2000               1429              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000199A                          1430  
0000199A                          1431  
0000199A                          1432   * MachineCode: 0001 **** **** **** *BIT
0000199A                          1433              
0000199A  1206                    1434              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000199C  EB09                    1435              LSL.B   #5,D1       **** **** BIT0 0000
0000199E  EA09                    1436              LSR.B   #5,D1       **** **** 0000 0BIT      
000019A0  C2FC 0008               1437              MULU    #8,D1       value adjusted for jumping
000019A4  4FF8 134C               1438              LEA     regNumTable ,A7 Load the table into A7
000019A8  4EB7 1000               1439              JSR     (A7,D1)     Jump to subroutine of value at D1
000019AC  B23C 0020               1440              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000019B0  6700 FC04               1441              BEQ.W   immediateData   ;branch to immediateData
000019B4                          1442      
000019B4  14FC 002C               1443              MOVE.B  #',',(A2)+
000019B8  14FC 0041               1444              MOVE.B  #'A',(A2)+
000019BC  4241                    1445              CLR     D1
000019BE  3206                    1446              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000019C0  E949                    1447              LSL.W   #4,D1       BIT* **** **** 0000
000019C2  E049                    1448              LSR.W   #8,D1       0000 0000 BIT* ****
000019C4  EA49                    1449              LSR.W   #5,D1       0000 0000 0000 0BIT     
000019C6  C2FC 0008               1450              MULU    #8,D1       value adjusted for jumping
000019CA  4FF8 13BC               1451              LEA     numTable ,A7 Load the table into A7
000019CE  4EB7 1000               1452              JSR     (A7,D1)     Jump to subroutine of value at D1    
000019D2                          1453          
000019D2                          1454      
000019D2  6000 0650               1455          BRA printCode
000019D6                          1456  
000019D6                          1457  
000019D6                          1458      
000019D6                          1459  add_B_EA   ;add.B Dn -> EA
000019D6                          1460      
000019D6                          1461      *-store the size of the operation for immediate decoding use here/below
000019D6                          1462      *-D7 equals storage of size of operation
000019D6                          1463      *- #3 is byte , #2 is word #1 is long
000019D6                          1464      ;MOVE.B  #3,D7
000019D6                          1465      
000019D6                          1466  
000019D6  14FC 0020               1467      MOVE.B  #' ',(A2)+
000019DA  14FC 0020               1468      MOVE.B  #' ',(A2)+
000019DE  14FC 0020               1469      MOVE.B  #' ',(A2)+
000019E2  14FC 0020               1470      MOVE.B  #' ',(A2)+
000019E6  14FC 0041               1471      MOVE.B  #'A',(A2)+
000019EA  14FC 0044               1472      MOVE.B  #'D',(A2)+
000019EE  14FC 0044               1473      MOVE.B  #'D',(A2)+
000019F2  14FC 002E               1474      MOVE.B  #'.',(A2)+
000019F6  14FC 0042               1475      MOVE.B  #'B',(A2)+
000019FA                          1476      *-always allow 4 spaces
000019FA  14FC 0020               1477      MOVE.B  #' ',(A2)+
000019FE  14FC 0020               1478      MOVE.B  #' ',(A2)+
00001A02  14FC 0020               1479      MOVE.B  #' ',(A2)+
00001A06  14FC 0020               1480      MOVE.B  #' ',(A2)+
00001A0A                          1481      
00001A0A                          1482      *-deCDOE EA (Dn,Dn
00001A0A                          1483          * MachineCode: 0001 **** **** **BI T***
00001A0A                          1484      *-insert immediate addressing here
00001A0A  4242                    1485              CLR     D2
00001A0C  4241                    1486              CLR     D1
00001A0E  1406                    1487              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001A10  E50A                    1488              LSL.B   #2,D2       **** **** BIT* **00
00001A12  EA0A                    1489              LSR.B   #5,D2       **** **** 0000 0BIT
00001A14  C4FC 0008               1490              MULU    #8,D2       value adjusted for jumping
00001A18  4DF8 129E               1491              LEA     modeTable,A6 Load the table into A6
00001A1C  4EB6 2000               1492              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001A20                          1493  
00001A20                          1494  
00001A20                          1495   * MachineCode: 0001 **** **** **** *BIT
00001A20                          1496              
00001A20  1206                    1497              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001A22  EB09                    1498              LSL.B   #5,D1       **** **** BIT0 0000
00001A24  EA09                    1499              LSR.B   #5,D1       **** **** 0000 0BIT      
00001A26  C2FC 0008               1500              MULU    #8,D1       value adjusted for jumping
00001A2A  4FF8 134C               1501              LEA     regNumTable ,A7 Load the table into A7
00001A2E  4EB7 1000               1502              JSR     (A7,D1)     Jump to subroutine of value at D1
00001A32  B23C 0020               1503              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001A36  6700 FB7E               1504              BEQ.W   immediateData   ;branch to immediateData
00001A3A  14FC 002C               1505              MOVE.B  #',',(A2)+
00001A3E                          1506   ;           MOVE.B  #'D',(A2)+
00001A3E                          1507              
00001A3E  4242                    1508              CLR     D2
00001A40  4241                    1509              CLR     D1
00001A42  3406                    1510              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001A44  EF4A                    1511              LSL.W   #7,D2       BIT* **** **** 0000
00001A46  E04A                    1512              LSR.W   #8,D2       0000 0000 BIT* ****
00001A48  EA4A                    1513              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001A4A  C4FC 0008               1514              MULU    #8,D2       value adjusted for jumping
00001A4E  4DF8 129E               1515              LEA     modeTable,A6 Load the table into A6
00001A52  4EB6 2000               1516              JSR     (A6,D2)     Jump to subroutine of value at D2
00001A56                          1517             
00001A56  3206                    1518              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001A58  E949                    1519              LSL.W   #4,D1       BIT* **** **** 0000
00001A5A  E049                    1520              LSR.W   #8,D1       0000 0000 BIT* ****
00001A5C  EA49                    1521              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001A5E  C2FC 0008               1522              MULU    #8,D1       value adjusted for jumping
00001A62  4FF8 134C               1523              LEA     regNumTable ,A7 Load the table into A7
00001A66  4EB7 1000               1524              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001A6A  6000 05B8               1525              BRA printcode  
00001A6E                          1526              
00001A6E                          1527              
00001A6E                          1528  
00001A6E                          1529     
00001A6E                          1530  add_W_EA   ;add.B Dn -> EA
00001A6E                          1531      
00001A6E                          1532      *-store the size of the operation for immediate decoding use here/below
00001A6E                          1533      *-D7 equals storage of size of operation
00001A6E                          1534      *- #3 is byte , #2 is word #1 is long
00001A6E                          1535      ;MOVE.B  #3,D7
00001A6E  1E3C 0001               1536      MOVE.B  #1,D7
00001A72                          1537      
00001A72                          1538  
00001A72  14FC 0020               1539      MOVE.B  #' ',(A2)+
00001A76  14FC 0020               1540      MOVE.B  #' ',(A2)+
00001A7A  14FC 0020               1541      MOVE.B  #' ',(A2)+
00001A7E  14FC 0020               1542      MOVE.B  #' ',(A2)+
00001A82  14FC 0041               1543      MOVE.B  #'A',(A2)+
00001A86  14FC 0044               1544      MOVE.B  #'D',(A2)+
00001A8A  14FC 0044               1545      MOVE.B  #'D',(A2)+
00001A8E  14FC 002E               1546      MOVE.B  #'.',(A2)+
00001A92  14FC 0057               1547      MOVE.B  #'W',(A2)+
00001A96                          1548      *-always allow 4 spaces
00001A96  14FC 0020               1549      MOVE.B  #' ',(A2)+
00001A9A  14FC 0020               1550      MOVE.B  #' ',(A2)+
00001A9E  14FC 0020               1551      MOVE.B  #' ',(A2)+
00001AA2  14FC 0020               1552      MOVE.B  #' ',(A2)+
00001AA6                          1553      
00001AA6                          1554      
00001AA6                          1555      
00001AA6  14FC 0044               1556          MOVE.B  #'D',(A2)+
00001AAA                          1557             
00001AAA  3206                    1558              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001AAC  E949                    1559              LSL.W   #4,D1       BIT* **** **** 0000
00001AAE  E049                    1560              LSR.W   #8,D1       0000 0000 BIT* ****
00001AB0  EA49                    1561              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001AB2  C2FC 0008               1562              MULU    #8,D1       value adjusted for jumping
00001AB6  4FF8 13BC               1563              LEA     NumTable ,A7 Load the table into A7
00001ABA  4EB7 1000               1564              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001ABE                          1565              
00001ABE                          1566              
00001ABE  14FC 002C               1567              MOVE.B  #',',(A2)+
00001AC2                          1568              *-INSERT IMMEDIATE DATA HERE
00001AC2                          1569      *-deCDOE EA (Dn,Dn
00001AC2                          1570          * MachineCode: 0001 **** **** **BI T***
00001AC2                          1571   *Only next last 3 bits which is stored at D0 => Source Address mode
00001AC2                          1572      *-insert immediate addressing here
00001AC2  4242                    1573              CLR     D2
00001AC4  4241                    1574              CLR     D1
00001AC6  1406                    1575              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001AC8  E50A                    1576              LSL.B   #2,D2       **** **** BIT* **00
00001ACA  EA0A                    1577              LSR.B   #5,D2       **** **** 0000 0BIT
00001ACC  C4FC 0008               1578              MULU    #8,D2       value adjusted for jumping
00001AD0  4DF8 129E               1579              LEA     modeTable,A6 Load the table into A6
00001AD4  4EB6 2000               1580              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001AD8                          1581  
00001AD8                          1582  
00001AD8                          1583   * MachineCode: 0001 **** **** **** *BIT
00001AD8                          1584              
00001AD8  1206                    1585              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001ADA  EB09                    1586              LSL.B   #5,D1       **** **** BIT0 0000
00001ADC  EA09                    1587              LSR.B   #5,D1       **** **** 0000 0BIT      
00001ADE  C2FC 0008               1588              MULU    #8,D1       value adjusted for jumping
00001AE2  4FF8 134C               1589              LEA     regNumTable ,A7 Load the table into A7
00001AE6  4EB7 1000               1590              JSR     (A7,D1)     Jump to subroutine of value at D1
00001AEA  B23C 0020               1591              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001AEE  6700 FAC6               1592              BEQ.W   immediateData   ;branch to immediateData
00001AF2                          1593  
00001AF2                          1594  
00001AF2  6000 0530               1595              BRA printcode  
00001AF6                          1596              
00001AF6                          1597  add_L_EA   ;add.L Dn -> EA
00001AF6  14FC 0020               1598      MOVE.B  #' ',(A2)+
00001AFA  14FC 0020               1599      MOVE.B  #' ',(A2)+
00001AFE  14FC 0020               1600      MOVE.B  #' ',(A2)+
00001B02  14FC 0020               1601      MOVE.B  #' ',(A2)+
00001B06  14FC 0041               1602      MOVE.B  #'A',(A2)+
00001B0A  14FC 0044               1603      MOVE.B  #'D',(A2)+
00001B0E  14FC 0044               1604      MOVE.B  #'D',(A2)+
00001B12  14FC 002E               1605      MOVE.B  #'.',(A2)+
00001B16  14FC 004C               1606      MOVE.B  #'L',(A2)+
00001B1A                          1607      *-always allow 4 spaces
00001B1A  14FC 0020               1608      MOVE.B  #' ',(A2)+
00001B1E  14FC 0020               1609      MOVE.B  #' ',(A2)+
00001B22  14FC 0020               1610      MOVE.B  #' ',(A2)+
00001B26  14FC 0020               1611      MOVE.B  #' ',(A2)+
00001B2A                          1612      
00001B2A                          1613      
00001B2A                          1614      
00001B2A  14FC 0044               1615          MOVE.B  #'D',(A2)+
00001B2E                          1616             
00001B2E  3206                    1617              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001B30  E949                    1618              LSL.W   #4,D1       BIT* **** **** 0000
00001B32  E049                    1619              LSR.W   #8,D1       0000 0000 BIT* ****
00001B34  EA49                    1620              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001B36  C2FC 0008               1621              MULU    #8,D1       value adjusted for jumping
00001B3A  4FF8 13BC               1622              LEA     NumTable ,A7 Load the table into A7
00001B3E  4EB7 1000               1623              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001B42                          1624              
00001B42                          1625              
00001B42  14FC 002C               1626              MOVE.B  #',',(A2)+
00001B46                          1627              *-INSERT IMMEDIATE DATA HERE
00001B46                          1628      *-deCDOE EA (Dn,Dn
00001B46                          1629          * MachineCode: 0001 **** **** **BI T***
00001B46                          1630   *Only next last 3 bits which is stored at D0 => Source Address mode
00001B46                          1631      *-insert immediate addressing here
00001B46  4242                    1632              CLR     D2
00001B48  4241                    1633              CLR     D1
00001B4A  1406                    1634              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001B4C  E50A                    1635              LSL.B   #2,D2       **** **** BIT* **00
00001B4E  EA0A                    1636              LSR.B   #5,D2       **** **** 0000 0BIT
00001B50  C4FC 0008               1637              MULU    #8,D2       value adjusted for jumping
00001B54  4DF8 129E               1638              LEA     modeTable,A6 Load the table into A6
00001B58  4EB6 2000               1639              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001B5C                          1640  
00001B5C                          1641  
00001B5C                          1642   * MachineCode: 0001 **** **** **** *BIT
00001B5C                          1643              
00001B5C  1206                    1644              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001B5E  EB09                    1645              LSL.B   #5,D1       **** **** BIT0 0000
00001B60  EA09                    1646              LSR.B   #5,D1       **** **** 0000 0BIT      
00001B62  C2FC 0008               1647              MULU    #8,D1       value adjusted for jumping
00001B66  4FF8 134C               1648              LEA     regNumTable ,A7 Load the table into A7
00001B6A  4EB7 1000               1649              JSR     (A7,D1)     Jump to subroutine of value at D1
00001B6E                          1650              
00001B6E                          1651              *-ERROR HERE NOT SURE WHY AFTER ADD.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001B6E                          1652  
00001B6E                          1653  
00001B6E  6000 04B4               1654              BRA printcode  
00001B72                          1655  
00001B72                          1656  -------------------- end include --------------------
00001B72                          1657              INCLUDE 'op1001.x68'    SUB,SUBA
00001B72                          1658  
00001B72                          1659  
00001B72                          1660  op1001
00001B72                          1661  
00001B72                          1662      
00001B72                          1663          ; we need to determine what its size is (B,W,L) putting the data in D6
00001B72  4EB8 14A8               1664      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001B76                          1665      ; we use to decode and branch
00001B76                          1666      *-now D3 contains the OPMODE FIELD telling us wether this is
00001B76                          1667      *-a LONG or a WORD
00001B76                          1668      
00001B76                          1669      *-now we need to decipher if its any of the subs
00001B76  B63C 0000               1670      CMP.B   #hex_0,D3 is this SUB.B
00001B7A  6700 0002               1671      BEQ sub_B   ;<EA> -> Dn
00001B7E                          1672  
00001B7E                          1673  
00001B7E                          1674  sub_B
00001B7E                          1675      ;EA ->Dn
00001B7E                          1676      
00001B7E                          1677          *-store the size of the operation for immediate decoding use here/below
00001B7E                          1678      *-D7 equals storage of size of operation
00001B7E                          1679      *- #3 is byte , #2 is word #1 is long
00001B7E                          1680      ;MOVE.B  #3,D7
00001B7E                          1681      
00001B7E                          1682  
00001B7E  14FC 0020               1683      MOVE.B  #' ',(A2)+
00001B82  14FC 0020               1684      MOVE.B  #' ',(A2)+
00001B86  14FC 0020               1685      MOVE.B  #' ',(A2)+
00001B8A  14FC 0020               1686      MOVE.B  #' ',(A2)+
00001B8E  14FC 0053               1687      MOVE.B  #'S',(A2)+
00001B92  14FC 0055               1688      MOVE.B  #'U',(A2)+
00001B96  14FC 0042               1689      MOVE.B  #'B',(A2)+
00001B9A  14FC 002E               1690      MOVE.B  #'.',(A2)+
00001B9E  14FC 0042               1691      MOVE.B  #'B',(A2)+
00001BA2                          1692      *-always allow 4 spaces
00001BA2  14FC 0020               1693      MOVE.B  #' ',(A2)+
00001BA6  14FC 0020               1694      MOVE.B  #' ',(A2)+
00001BAA  14FC 0020               1695      MOVE.B  #' ',(A2)+
00001BAE  14FC 0020               1696      MOVE.B  #' ',(A2)+
00001BB2                          1697      
00001BB2                          1698          *-deCDOE EA (Dn,Dn
00001BB2                          1699          * MachineCode: 0001 **** **** **BI T***
00001BB2                          1700      *-insert immediate subressing here
00001BB2  4242                    1701              CLR     D2
00001BB4  4241                    1702              CLR     D1
00001BB6  1406                    1703              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001BB8  E50A                    1704              LSL.B   #2,D2       **** **** BIT* **00
00001BBA  EA0A                    1705              LSR.B   #5,D2       **** **** 0000 0BIT
00001BBC  C4FC 0008               1706              MULU    #8,D2       value adjusted for jumping
00001BC0  4DF8 129E               1707              LEA     modeTable,A6 Load the table into A6
00001BC4  4EB6 2000               1708              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001BC8                          1709  
00001BC8                          1710  
00001BC8                          1711   * MachineCode: 0001 **** **** **** *BIT
00001BC8                          1712              
00001BC8  1206                    1713              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001BCA  EB09                    1714              LSL.B   #5,D1       **** **** BIT0 0000
00001BCC  EA09                    1715              LSR.B   #5,D1       **** **** 0000 0BIT      
00001BCE  C2FC 0008               1716              MULU    #8,D1       value adjusted for jumping
00001BD2  4FF8 134C               1717              LEA     regNumTable ,A7 Load the table into A7
00001BD6  4EB7 1000               1718              JSR     (A7,D1)     Jump to subroutine of value at D1
00001BDA  B23C 0020               1719              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001BDE  6700 F9D6               1720              BEQ.W   immediateData   ;branch to immediateData
00001BE2  14FC 002C               1721              MOVE.B  #',',(A2)+
00001BE6  14FC 0044               1722              MOVE.B  #'D',(A2)+
00001BEA                          1723              
00001BEA                          1724    *------------------------------------------------------------
00001BEA  4241                    1725              CLR     D1
00001BEC  3206                    1726              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001BEE  E949                    1727              LSL.W   #4,D1       BIT* **** **** 0000
00001BF0  E049                    1728              LSR.W   #8,D1       0000 0000 BIT* ****
00001BF2  EA49                    1729              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001BF4  C2FC 0008               1730              MULU    #8,D1       value adjusted for jumping
00001BF8  4FF8 13BC               1731              LEA     numTable ,A7 Load the table into A7
00001BFC  4EB7 1000               1732              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C00  6000 0422               1733              BRA printcode  
00001C04                          1734      
00001C04                          1735      
00001C04                          1736       
00001C04                          1737  sub_W   ;sub.B EA->Dn
00001C04                          1738      
00001C04                          1739      *-store the size of the operation for immediate decoding use here/below
00001C04                          1740      *-D7 equals storage of size of operation
00001C04                          1741      *- #3 is byte , #2 is word #1 is long
00001C04                          1742      ;MOVE.B  #3,D7
00001C04                          1743      
00001C04                          1744  
00001C04  14FC 0020               1745      MOVE.B  #' ',(A2)+
00001C08  14FC 0020               1746      MOVE.B  #' ',(A2)+
00001C0C  14FC 0020               1747      MOVE.B  #' ',(A2)+
00001C10  14FC 0020               1748      MOVE.B  #' ',(A2)+
00001C14  14FC 0041               1749      MOVE.B  #'A',(A2)+
00001C18  14FC 0044               1750      MOVE.B  #'D',(A2)+
00001C1C  14FC 0044               1751      MOVE.B  #'D',(A2)+
00001C20  14FC 002E               1752      MOVE.B  #'.',(A2)+
00001C24  14FC 0057               1753      MOVE.B  #'W',(A2)+
00001C28                          1754      *-always allow 4 spaces
00001C28  14FC 0020               1755      MOVE.B  #' ',(A2)+
00001C2C  14FC 0020               1756      MOVE.B  #' ',(A2)+
00001C30  14FC 0020               1757      MOVE.B  #' ',(A2)+
00001C34  14FC 0020               1758      MOVE.B  #' ',(A2)+
00001C38                          1759      
00001C38                          1760      *-deCDOE EA (Dn,Dn
00001C38                          1761          * MachineCode: 0001 **** **** **BI T***
00001C38                          1762      *-insert immediate subressing here
00001C38  4242                    1763              CLR     D2
00001C3A  4241                    1764              CLR     D1
00001C3C  1406                    1765              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001C3E  E50A                    1766              LSL.B   #2,D2       **** **** BIT* **00
00001C40  EA0A                    1767              LSR.B   #5,D2       **** **** 0000 0BIT
00001C42  C4FC 0008               1768              MULU    #8,D2       value adjusted for jumping
00001C46  4DF8 129E               1769              LEA     modeTable,A6 Load the table into A6
00001C4A  4EB6 2000               1770              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001C4E                          1771  
00001C4E                          1772  
00001C4E                          1773   * MachineCode: 0001 **** **** **** *BIT
00001C4E                          1774              
00001C4E  1206                    1775              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001C50  EB09                    1776              LSL.B   #5,D1       **** **** BIT0 0000
00001C52  EA09                    1777              LSR.B   #5,D1       **** **** 0000 0BIT      
00001C54  C2FC 0008               1778              MULU    #8,D1       value adjusted for jumping
00001C58  4FF8 134C               1779              LEA     regNumTable ,A7 Load the table into A7
00001C5C  4EB7 1000               1780              JSR     (A7,D1)     Jump to subroutine of value at D1
00001C60  B23C 0020               1781              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001C64  6700 F950               1782              BEQ.W   immediateData   ;branch to immediateData
00001C68  14FC 002C               1783              MOVE.B  #',',(A2)+
00001C6C  14FC 0044               1784              MOVE.B  #'D',(A2)+
00001C70                          1785              
00001C70                          1786                *------------------------------------------------------------
00001C70  4241                    1787              CLR     D1
00001C72  3206                    1788              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001C74  E949                    1789              LSL.W   #4,D1       BIT* **** **** 0000
00001C76  E049                    1790              LSR.W   #8,D1       0000 0000 BIT* ****
00001C78  EA49                    1791              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001C7A  C2FC 0008               1792              MULU    #8,D1       value adjusted for jumping
00001C7E  4FF8 13BC               1793              LEA     numTable ,A7 Load the table into A7
00001C82  4EB7 1000               1794              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C86  6000 039C               1795              BRA printcode  
00001C8A                          1796     
00001C8A                          1797  sub_L   ;sub.B EA->Dn
00001C8A                          1798      
00001C8A                          1799      *-store the size of the operation for immediate decoding use here/below
00001C8A                          1800      *-D7 equals storage of size of operation
00001C8A                          1801      *- #3 is byte , #2 is word #1 is long
00001C8A                          1802      ;MOVE.B  #3,D7
00001C8A                          1803      
00001C8A                          1804  
00001C8A  14FC 0020               1805      MOVE.B  #' ',(A2)+
00001C8E  14FC 0020               1806      MOVE.B  #' ',(A2)+
00001C92  14FC 0020               1807      MOVE.B  #' ',(A2)+
00001C96  14FC 0020               1808      MOVE.B  #' ',(A2)+
00001C9A  14FC 0041               1809      MOVE.B  #'A',(A2)+
00001C9E  14FC 0044               1810      MOVE.B  #'D',(A2)+
00001CA2  14FC 0044               1811      MOVE.B  #'D',(A2)+
00001CA6  14FC 002E               1812      MOVE.B  #'.',(A2)+
00001CAA  14FC 004C               1813      MOVE.B  #'L',(A2)+
00001CAE                          1814      *-always allow 4 spaces
00001CAE  14FC 0020               1815      MOVE.B  #' ',(A2)+
00001CB2  14FC 0020               1816      MOVE.B  #' ',(A2)+
00001CB6  14FC 0020               1817      MOVE.B  #' ',(A2)+
00001CBA  14FC 0020               1818      MOVE.B  #' ',(A2)+
00001CBE                          1819      
00001CBE                          1820      *-deCDOE EA (Dn,Dn
00001CBE                          1821          * MachineCode: 0001 **** **** **BI T***
00001CBE                          1822      *-insert immediate subressing here
00001CBE  4242                    1823              CLR     D2
00001CC0  4241                    1824              CLR     D1
00001CC2  1406                    1825              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001CC4  E50A                    1826              LSL.B   #2,D2       **** **** BIT* **00
00001CC6  EA0A                    1827              LSR.B   #5,D2       **** **** 0000 0BIT
00001CC8  C4FC 0008               1828              MULU    #8,D2       value adjusted for jumping
00001CCC  4DF8 129E               1829              LEA     modeTable,A6 Load the table into A6
00001CD0  4EB6 2000               1830              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001CD4                          1831  
00001CD4                          1832  
00001CD4                          1833   * MachineCode: 0001 **** **** **** *BIT
00001CD4                          1834              
00001CD4  1206                    1835              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001CD6  EB09                    1836              LSL.B   #5,D1       **** **** BIT0 0000
00001CD8  EA09                    1837              LSR.B   #5,D1       **** **** 0000 0BIT      
00001CDA  C2FC 0008               1838              MULU    #8,D1       value adjusted for jumping
00001CDE  4FF8 134C               1839              LEA     regNumTable ,A7 Load the table into A7
00001CE2  4EB7 1000               1840              JSR     (A7,D1)     Jump to subroutine of value at D1
00001CE6  B23C 0020               1841              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001CEA  6700 F8CA               1842              BEQ.W   immediateData   ;branch to immediateData
00001CEE  14FC 002C               1843              MOVE.B  #',',(A2)+
00001CF2  14FC 0044               1844              MOVE.B  #'D',(A2)+
00001CF6                          1845              
00001CF6                          1846                *------------------------------------------------------------
00001CF6  4241                    1847              CLR     D1
00001CF8  3206                    1848              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001CFA  E949                    1849              LSL.W   #4,D1       BIT* **** **** 0000
00001CFC  E049                    1850              LSR.W   #8,D1       0000 0000 BIT* ****
00001CFE  EA49                    1851              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D00  C2FC 0008               1852              MULU    #8,D1       value adjusted for jumping
00001D04  4FF8 13BC               1853              LEA     numTable ,A7 Load the table into A7
00001D08  4EB7 1000               1854              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001D0C  6000 0316               1855              BRA printcode  
00001D10                          1856      
00001D10                          1857  suba_W  ;subA.W
00001D10                          1858      *-maybe error checking
00001D10                          1859      *-we know its subA.W so print it to our buffer
00001D10                          1860      *-ex subA.W D2,D7
00001D10                          1861      
00001D10  14FC 0020               1862      MOVE.B  #' ',(A2)+
00001D14  14FC 0020               1863      MOVE.B  #' ',(A2)+
00001D18  14FC 0020               1864      MOVE.B  #' ',(A2)+
00001D1C  14FC 0020               1865      MOVE.B  #' ',(A2)+
00001D20  14FC 0053               1866      MOVE.B  #'S',(A2)+
00001D24  14FC 0055               1867      MOVE.B  #'U',(A2)+
00001D28  14FC 0042               1868      MOVE.B  #'B',(A2)+
00001D2C  14FC 0041               1869      MOVE.B  #'A',(A2)+
00001D30  14FC 002E               1870      MOVE.B  #'.',(A2)+
00001D34  14FC 0057               1871      MOVE.B  #'W',(A2)+
00001D38                          1872      *-always allow 4 spaces
00001D38  14FC 0020               1873      MOVE.B  #' ',(A2)+
00001D3C  14FC 0020               1874      MOVE.B  #' ',(A2)+
00001D40  14FC 0020               1875      MOVE.B  #' ',(A2)+
00001D44  14FC 0020               1876      MOVE.B  #' ',(A2)+
00001D48                          1877      
00001D48                          1878      * MachineCode: 0001 **** **** **BI T***
00001D48                          1879      *-insert immediate subressing here
00001D48  4242                    1880              CLR     D2
00001D4A  4241                    1881              CLR     D1
00001D4C  1406                    1882              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001D4E  E50A                    1883              LSL.B   #2,D2       **** **** BIT* **00
00001D50  EA0A                    1884              LSR.B   #5,D2       **** **** 0000 0BIT
00001D52  C4FC 0008               1885              MULU    #8,D2       value adjusted for jumping
00001D56  4DF8 129E               1886              LEA     modeTable,A6 Load the table into A6
00001D5A  4EB6 2000               1887              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001D5E                          1888  
00001D5E                          1889  
00001D5E                          1890   * MachineCode: 0001 **** **** **** *BIT
00001D5E                          1891              
00001D5E  1206                    1892              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001D60  EB09                    1893              LSL.B   #5,D1       **** **** BIT0 0000
00001D62  EA09                    1894              LSR.B   #5,D1       **** **** 0000 0BIT      
00001D64  C2FC 0008               1895              MULU    #8,D1       value adjusted for jumping
00001D68  4FF8 134C               1896              LEA     regNumTable ,A7 Load the table into A7
00001D6C  4EB7 1000               1897              JSR     (A7,D1)     Jump to subroutine of value at D1
00001D70  B23C 0020               1898              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001D74  6700 F840               1899              BEQ.W   immediateData   ;branch to immediateData
00001D78                          1900      
00001D78  14FC 002C               1901          MOVE.B  #',',(A2)+
00001D7C  14FC 0041               1902          MOVE.B  #'A',(A2)+
00001D80  4241                    1903              CLR     D1
00001D82  3206                    1904              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001D84  E949                    1905              LSL.W   #4,D1       BIT* **** **** 0000
00001D86  E049                    1906              LSR.W   #8,D1       0000 0000 BIT* ****
00001D88  EA49                    1907              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D8A  C2FC 0008               1908              MULU    #8,D1       value adjusted for jumping
00001D8E  4FF8 13BC               1909              LEA     numTable ,A7 Load the table into A7
00001D92  4EB7 1000               1910              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001D96                          1911          
00001D96                          1912      
00001D96  6000 028C               1913          BRA printCode
00001D9A                          1914          
00001D9A                          1915          
00001D9A                          1916          
00001D9A                          1917  
00001D9A                          1918  suba_L  ;subA.L
00001D9A                          1919      *-maybe error checking
00001D9A                          1920      *-we know its subA.L so print it to our buffer
00001D9A                          1921      *-ex subA.L D2,D7
00001D9A                          1922      
00001D9A  14FC 0020               1923      MOVE.B  #' ',(A2)+
00001D9E  14FC 0020               1924      MOVE.B  #' ',(A2)+
00001DA2  14FC 0020               1925      MOVE.B  #' ',(A2)+
00001DA6  14FC 0020               1926      MOVE.B  #' ',(A2)+
00001DAA  14FC 0053               1927          MOVE.B  #'S',(A2)+
00001DAE  14FC 0055               1928          MOVE.B  #'U',(A2)+
00001DB2  14FC 0042               1929          MOVE.B  #'B',(A2)+
00001DB6  14FC 0041               1930          MOVE.B  #'A',(A2)+
00001DBA  14FC 002E               1931          MOVE.B  #'.',(A2)+
00001DBE  14FC 004C               1932          MOVE.B  #'L',(A2)+
00001DC2                          1933      *-always allow 4 spaces
00001DC2  14FC 0020               1934          MOVE.B  #' ',(A2)+
00001DC6  14FC 0020               1935          MOVE.B  #' ',(A2)+
00001DCA  14FC 0020               1936          MOVE.B  #' ',(A2)+
00001DCE  14FC 0020               1937          MOVE.B  #' ',(A2)+      
00001DD2                          1938      
00001DD2                          1939      * MachineCode: 0001 **** **** **BI T***
00001DD2                          1940      *-insert immediate subressing here
00001DD2  4242                    1941              CLR     D2
00001DD4  4241                    1942              CLR     D1
00001DD6  1406                    1943              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001DD8  E50A                    1944              LSL.B   #2,D2       **** **** BIT* **00
00001DDA  EA0A                    1945              LSR.B   #5,D2       **** **** 0000 0BIT
00001DDC  C4FC 0008               1946              MULU    #8,D2       value adjusted for jumping
00001DE0  4DF8 129E               1947              LEA     modeTable,A6 Load the table into A6
00001DE4  4EB6 2000               1948              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001DE8                          1949  
00001DE8                          1950  
00001DE8                          1951   * MachineCode: 0001 **** **** **** *BIT
00001DE8                          1952              
00001DE8  1206                    1953              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001DEA  EB09                    1954              LSL.B   #5,D1       **** **** BIT0 0000
00001DEC  EA09                    1955              LSR.B   #5,D1       **** **** 0000 0BIT      
00001DEE  C2FC 0008               1956              MULU    #8,D1       value adjusted for jumping
00001DF2  4FF8 134C               1957              LEA     regNumTable ,A7 Load the table into A7
00001DF6  4EB7 1000               1958              JSR     (A7,D1)     Jump to subroutine of value at D1
00001DFA  B23C 0020               1959              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001DFE  6700 F7B6               1960              BEQ.W   immediateData   ;branch to immediateData
00001E02                          1961      
00001E02  14FC 002C               1962              MOVE.B  #',',(A2)+
00001E06  14FC 0041               1963              MOVE.B  #'A',(A2)+
00001E0A  4241                    1964              CLR     D1
00001E0C  3206                    1965              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001E0E  E949                    1966              LSL.W   #4,D1       BIT* **** **** 0000
00001E10  E049                    1967              LSR.W   #8,D1       0000 0000 BIT* ****
00001E12  EA49                    1968              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001E14  C2FC 0008               1969              MULU    #8,D1       value adjusted for jumping
00001E18  4FF8 13BC               1970              LEA     numTable ,A7 Load the table into A7
00001E1C  4EB7 1000               1971              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001E20                          1972          
00001E20                          1973      
00001E20  6000 0202               1974          BRA printCode
00001E24                          1975  
00001E24                          1976  
00001E24                          1977      
00001E24                          1978  sub_B_EA   ;sub.B Dn -> EA
00001E24                          1979      
00001E24                          1980      *-store the size of the operation for immediate decoding use here/below
00001E24                          1981      *-D7 equals storage of size of operation
00001E24                          1982      *- #3 is byte , #2 is word #1 is long
00001E24                          1983      ;MOVE.B  #3,D7
00001E24                          1984      
00001E24                          1985  
00001E24  14FC 0020               1986      MOVE.B  #' ',(A2)+
00001E28  14FC 0020               1987      MOVE.B  #' ',(A2)+
00001E2C  14FC 0020               1988      MOVE.B  #' ',(A2)+
00001E30  14FC 0020               1989      MOVE.B  #' ',(A2)+
00001E34  14FC 0053               1990      MOVE.B  #'S',(A2)+
00001E38  14FC 0055               1991      MOVE.B  #'U',(A2)+
00001E3C  14FC 0042               1992      MOVE.B  #'B',(A2)+
00001E40  14FC 002E               1993      MOVE.B  #'.',(A2)+
00001E44  14FC 0042               1994      MOVE.B  #'B',(A2)+
00001E48                          1995      *-always allow 4 spaces
00001E48  14FC 0020               1996      MOVE.B  #' ',(A2)+
00001E4C  14FC 0020               1997      MOVE.B  #' ',(A2)+
00001E50  14FC 0020               1998      MOVE.B  #' ',(A2)+
00001E54  14FC 0020               1999      MOVE.B  #' ',(A2)+
00001E58                          2000      
00001E58                          2001      *-deCDOE EA (Dn,Dn
00001E58                          2002          * MachineCode: 0001 **** **** **BI T***
00001E58                          2003      *-insert immediate subressing here
00001E58  4242                    2004              CLR     D2
00001E5A  4241                    2005              CLR     D1
00001E5C  1406                    2006              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001E5E  E50A                    2007              LSL.B   #2,D2       **** **** BIT* **00
00001E60  EA0A                    2008              LSR.B   #5,D2       **** **** 0000 0BIT
00001E62  C4FC 0008               2009              MULU    #8,D2       value adjusted for jumping
00001E66  4DF8 129E               2010              LEA     modeTable,A6 Load the table into A6
00001E6A  4EB6 2000               2011              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001E6E                          2012  
00001E6E                          2013  
00001E6E                          2014   * MachineCode: 0001 **** **** **** *BIT
00001E6E                          2015              
00001E6E  1206                    2016              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001E70  EB09                    2017              LSL.B   #5,D1       **** **** BIT0 0000
00001E72  EA09                    2018              LSR.B   #5,D1       **** **** 0000 0BIT      
00001E74  C2FC 0008               2019              MULU    #8,D1       value adjusted for jumping
00001E78  4FF8 134C               2020              LEA     regNumTable ,A7 Load the table into A7
00001E7C  4EB7 1000               2021              JSR     (A7,D1)     Jump to subroutine of value at D1
00001E80  B23C 0020               2022              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001E84  6700 F730               2023              BEQ.W   immediateData   ;branch to immediateData
00001E88  14FC 002C               2024              MOVE.B  #',',(A2)+
00001E8C                          2025   ;           MOVE.B  #'D',(A2)+
00001E8C                          2026              
00001E8C  4242                    2027              CLR     D2
00001E8E  4241                    2028              CLR     D1
00001E90  3406                    2029              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001E92  EF4A                    2030              LSL.W   #7,D2       BIT* **** **** 0000
00001E94  E04A                    2031              LSR.W   #8,D2       0000 0000 BIT* ****
00001E96  EA4A                    2032              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001E98  C4FC 0008               2033              MULU    #8,D2       value adjusted for jumping
00001E9C  4DF8 129E               2034              LEA     modeTable,A6 Load the table into A6
00001EA0  4EB6 2000               2035              JSR     (A6,D2)     Jump to subroutine of value at D2
00001EA4                          2036             
00001EA4  3206                    2037              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001EA6  E949                    2038              LSL.W   #4,D1       BIT* **** **** 0000
00001EA8  E049                    2039              LSR.W   #8,D1       0000 0000 BIT* ****
00001EAA  EA49                    2040              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001EAC  C2FC 0008               2041              MULU    #8,D1       value adjusted for jumping
00001EB0  4FF8 134C               2042              LEA     regNumTable ,A7 Load the table into A7
00001EB4  4EB7 1000               2043              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001EB8  6000 016A               2044              BRA printcode  
00001EBC                          2045              
00001EBC                          2046              
00001EBC                          2047  
00001EBC                          2048     
00001EBC                          2049  sub_W_EA   ;sub.B Dn -> EA
00001EBC                          2050      
00001EBC                          2051      *-store the size of the operation for immediate decoding use here/below
00001EBC                          2052      *-D7 equals storage of size of operation
00001EBC                          2053      *- #3 is byte , #2 is word #1 is long
00001EBC                          2054      ;MOVE.B  #3,D7
00001EBC  1E3C 0001               2055      MOVE.B  #1,D7
00001EC0                          2056      
00001EC0                          2057  
00001EC0  14FC 0020               2058      MOVE.B  #' ',(A2)+
00001EC4  14FC 0020               2059      MOVE.B  #' ',(A2)+
00001EC8  14FC 0020               2060      MOVE.B  #' ',(A2)+
00001ECC  14FC 0020               2061      MOVE.B  #' ',(A2)+
00001ED0  14FC 0053               2062      MOVE.B  #'S',(A2)+
00001ED4  14FC 0055               2063      MOVE.B  #'U',(A2)+
00001ED8  14FC 0042               2064      MOVE.B  #'B',(A2)+
00001EDC  14FC 002E               2065      MOVE.B  #'.',(A2)+
00001EE0  14FC 0057               2066      MOVE.B  #'W',(A2)+
00001EE4                          2067      *-always allow 4 spaces
00001EE4  14FC 0020               2068      MOVE.B  #' ',(A2)+
00001EE8  14FC 0020               2069      MOVE.B  #' ',(A2)+
00001EEC  14FC 0020               2070      MOVE.B  #' ',(A2)+
00001EF0  14FC 0020               2071      MOVE.B  #' ',(A2)+
00001EF4                          2072      
00001EF4                          2073      
00001EF4                          2074      
00001EF4  14FC 0044               2075          MOVE.B  #'D',(A2)+
00001EF8                          2076             
00001EF8  3206                    2077              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001EFA  E949                    2078              LSL.W   #4,D1       BIT* **** **** 0000
00001EFC  E049                    2079              LSR.W   #8,D1       0000 0000 BIT* ****
00001EFE  EA49                    2080              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F00  C2FC 0008               2081              MULU    #8,D1       value adjusted for jumping
00001F04  4FF8 13BC               2082              LEA     NumTable ,A7 Load the table into A7
00001F08  4EB7 1000               2083              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F0C                          2084              
00001F0C                          2085              
00001F0C  14FC 002C               2086              MOVE.B  #',',(A2)+
00001F10                          2087              *-INSERT IMMEDIATE DATA HERE
00001F10                          2088      *-deCDOE EA (Dn,Dn
00001F10                          2089          * MachineCode: 0001 **** **** **BI T***
00001F10                          2090   *Only next last 3 bits which is stored at D0 => Source subress mode
00001F10                          2091      *-insert immediate subressing here
00001F10  4242                    2092              CLR     D2
00001F12  4241                    2093              CLR     D1
00001F14  1406                    2094              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001F16  E50A                    2095              LSL.B   #2,D2       **** **** BIT* **00
00001F18  EA0A                    2096              LSR.B   #5,D2       **** **** 0000 0BIT
00001F1A  C4FC 0008               2097              MULU    #8,D2       value adjusted for jumping
00001F1E  4DF8 129E               2098              LEA     modeTable,A6 Load the table into A6
00001F22  4EB6 2000               2099              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001F26                          2100  
00001F26                          2101  
00001F26                          2102   * MachineCode: 0001 **** **** **** *BIT
00001F26                          2103              
00001F26  1206                    2104              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001F28  EB09                    2105              LSL.B   #5,D1       **** **** BIT0 0000
00001F2A  EA09                    2106              LSR.B   #5,D1       **** **** 0000 0BIT      
00001F2C  C2FC 0008               2107              MULU    #8,D1       value adjusted for jumping
00001F30  4FF8 134C               2108              LEA     regNumTable ,A7 Load the table into A7
00001F34  4EB7 1000               2109              JSR     (A7,D1)     Jump to subroutine of value at D1
00001F38  B23C 0020               2110              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001F3C  6700 F678               2111              BEQ.W   immediateData   ;branch to immediateData
00001F40                          2112  
00001F40                          2113  
00001F40  6000 00E2               2114              BRA printcode  
00001F44                          2115              
00001F44                          2116  sub_L_EA   ;sub.L Dn -> EA
00001F44  14FC 0020               2117      MOVE.B  #' ',(A2)+
00001F48  14FC 0020               2118      MOVE.B  #' ',(A2)+
00001F4C  14FC 0020               2119      MOVE.B  #' ',(A2)+
00001F50  14FC 0020               2120      MOVE.B  #' ',(A2)+
00001F54  14FC 0053               2121      MOVE.B  #'S',(A2)+
00001F58  14FC 0055               2122      MOVE.B  #'U',(A2)+
00001F5C  14FC 0042               2123      MOVE.B  #'B',(A2)+
00001F60  14FC 002E               2124      MOVE.B  #'.',(A2)+
00001F64  14FC 004C               2125      MOVE.B  #'L',(A2)+
00001F68                          2126      *-always allow 4 spaces
00001F68  14FC 0020               2127      MOVE.B  #' ',(A2)+
00001F6C  14FC 0020               2128      MOVE.B  #' ',(A2)+
00001F70  14FC 0020               2129      MOVE.B  #' ',(A2)+
00001F74  14FC 0020               2130      MOVE.B  #' ',(A2)+
00001F78                          2131      
00001F78                          2132      
00001F78                          2133      
00001F78  14FC 0044               2134          MOVE.B  #'D',(A2)+
00001F7C                          2135             
00001F7C  3206                    2136              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F7E  E949                    2137              LSL.W   #4,D1       BIT* **** **** 0000
00001F80  E049                    2138              LSR.W   #8,D1       0000 0000 BIT* ****
00001F82  EA49                    2139              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F84  C2FC 0008               2140              MULU    #8,D1       value adjusted for jumping
00001F88  4FF8 13BC               2141              LEA     NumTable ,A7 Load the table into A7
00001F8C  4EB7 1000               2142              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F90                          2143              
00001F90                          2144              
00001F90  14FC 002C               2145              MOVE.B  #',',(A2)+
00001F94                          2146              *-INSERT IMMEDIATE DATA HERE
00001F94                          2147      *-deCDOE EA (Dn,Dn
00001F94                          2148          * MachineCode: 0001 **** **** **BI T***
00001F94                          2149   *Only next last 3 bits which is stored at D0 => Source subress mode
00001F94                          2150      *-insert immediate subressing here
00001F94  4242                    2151              CLR     D2
00001F96  4241                    2152              CLR     D1
00001F98  1406                    2153              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001F9A  E50A                    2154              LSL.B   #2,D2       **** **** BIT* **00
00001F9C  EA0A                    2155              LSR.B   #5,D2       **** **** 0000 0BIT
00001F9E  C4FC 0008               2156              MULU    #8,D2       value adjusted for jumping
00001FA2  4DF8 129E               2157              LEA     modeTable,A6 Load the table into A6
00001FA6  4EB6 2000               2158              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001FAA                          2159  
00001FAA                          2160  
00001FAA                          2161   * MachineCode: 0001 **** **** **** *BIT
00001FAA                          2162              
00001FAA  1206                    2163              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001FAC  EB09                    2164              LSL.B   #5,D1       **** **** BIT0 0000
00001FAE  EA09                    2165              LSR.B   #5,D1       **** **** 0000 0BIT      
00001FB0  C2FC 0008               2166              MULU    #8,D1       value adjusted for jumping
00001FB4  4FF8 134C               2167              LEA     regNumTable ,A7 Load the table into A7
00001FB8  4EB7 1000               2168              JSR     (A7,D1)     Jump to subroutine of value at D1
00001FBC                          2169              
00001FBC                          2170              *-ERROR HERE NOT SURE WHY AFTER sub.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001FBC                          2171  
00001FBC                          2172  
00001FBC  6000 0066               2173              BRA printcode  
00001FC0                          2174  
00001FC0                          2175  
00001FC0                          2176  -------------------- end include --------------------
00001FC0                          2177          
00001FC0                          2178              
00001FC0                          2179             
00001FC0                          2180  
00001FC0                          2181              
00001FC0                          2182  opError                             
00001FC0  2608                    2183              MOVE.L  A0,D3
00001FC2  2C03                    2184              MOVE.L  D3,D6
00001FC4  45F9 0000067C           2185              LEA     bad_code_buffer,A2
00001FCA  7E02                    2186              MOVE.L  #2,D7
00001FCC  4EB8 10AE               2187              JSR     write_data_in_D3_to_buffer
00001FD0                          2188              
00001FD0  14FC 0020               2189              MOVE.B  #' ',(A2)+      ;print spaces
00001FD4  14FC 0020               2190              MOVE.B  #' ',(A2)+      ;print spaces
00001FD8  14FC 0020               2191              MOVE.B  #' ',(A2)+      ;print spaces
00001FDC  14FC 0020               2192              MOVE.B  #' ',(A2)+      ;print spaces
00001FE0  14FC 0044               2193              MOVE.B  #'D',(A2)+      ;print D
00001FE4  14FC 0041               2194              MOVE.B  #'A',(A2)+      ;print A
00001FE8  14FC 0054               2195              MOVE.B  #'T',(A2)+      ;print T
00001FEC  14FC 0041               2196              MOVE.B  #'A',(A2)+      ;print A
00001FF0  14FC 0020               2197              MOVE.B  #' ',(A2)+      ;print spaces
00001FF4  14FC 0020               2198              MOVE.B  #' ',(A2)+      ;print spaces
00001FF8  14FC 0020               2199              MOVE.B  #' ',(A2)+      ;print spaces
00001FFC  14FC 0020               2200              MOVE.B  #' ',(A2)+      ;print spaces
00002000                          2201              
00002000                          2202              
00002000  14FC 0046               2203              MOVE.B  #'F',(A2)+      ;print spaces
00002004  14FC 0046               2204              MOVE.B  #'F',(A2)+      ;print spaces
00002008  14FC 0046               2205              MOVE.B  #'F',(A2)+      ;print spaces
0000200C  14FC 0046               2206              MOVE.B  #'F',(A2)+      ;print spaces
00002010                          2207              
00002010                          2208              
00002010                          2209              ;MOVE.L  (A0),D3
00002010                          2210              ;MOVE.L  D3,D6
00002010                          2211              ;MOVE.L  #1,D7
00002010                          2212              ;JSR     write_data_in_D3_to_buffer
00002010                          2213              
00002010  14BC 0000               2214              MOVE.B  #$00,(A2) * add NULL value to print string
00002014  43F9 0000067C           2215              LEA     bad_code_buffer,A1
0000201A  103C 000D               2216              MOVE.B  #13,D0
0000201E  4E4F                    2217              TRAP    #15   
00002020                          2218           
00002020  6000 F04C               2219              BRA     get_next_instruction           
00002024                          2220  printCode   
00002024  14BC 0000               2221              MOVE.B  #$00,(A2)   * add NULL value to print string
00002028  070A 0000               2222              MOVEP   (A2),D3
0000202C  43F9 00000624           2223              LEA     good_code_buffer,A1 * load buffer for good code to print
00002032  700D                    2224              MOVEQ   #13,D0
00002034  4E4F                    2225              TRAP    #15         * display code
00002036                          2226    
00002036  6000 F036               2227              BRA     get_next_instruction                     
0000203A                          2228  * OP Codes -------------------------------------------------
0000203A  =00000000               2229  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
0000203A  =00000001               2230  bin0001     EQU     %0001   ;MOVE.B
0000203A  =00000002               2231  bin0010     EQU     %0010   ;MOVE.L
0000203A  =00000003               2232  bin0011     EQU     %0011   ;MOVE.W
0000203A  =00000004               2233  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
0000203A  =00000005               2234  bin0101     EQU     %0101   ;SUBQ
0000203A  =00000006               2235  bin0110     EQU     %0110   ;Bcc
0000203A  =00000007               2236  bin0111     EQU     %0111   ;MOVEQ
0000203A  =00000008               2237  bin1000     EQU     %1000   ;DIVU.W
0000203A  =00000009               2238  bin1001     EQU     %1001   ;SUB, SUBA
0000203A  =0000000B               2239  bin1011     EQU     %1011   ;CMP, CMPA, EOR
0000203A  =0000000C               2240  bin1100     EQU     %1100   ;AND, MULS.W
0000203A  =0000000D               2241  bin1101     EQU     %1101   ;ADD, ADDA
0000203A  =0000000E               2242  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
0000203A                          2243  
0000203A                          2244  *Binary HEX values*---------------------------------------------------------------
0000203A  =00000000               2245  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
0000203A  =00000001               2246  hex_1   EQU     %0001 ;1
0000203A  =00000002               2247  hex_2   EQU     %0010 ;2    
0000203A  =00000003               2248  hex_3   EQU     %0011 ;3
0000203A  =00000004               2249  hex_4   EQU     %0100 ;4
0000203A  =00000005               2250  hex_5   EQU     %0101 ;5
0000203A  =00000006               2251  hex_6   EQU     %0110 ;6
0000203A  =00000007               2252  hex_7   EQU     %0111 ;7
0000203A  =00000008               2253  hex_8   EQU     %1000 ;8
0000203A  =00000009               2254  hex_9   EQU     %1001 ;9
0000203A  =0000000A               2255  hex_A   EQU     %1010 ;A
0000203A  =0000000B               2256  hex_B   EQU     %1011 ;B
0000203A  =0000000C               2257  hex_C   EQU     %1100 ;C
0000203A  =0000000D               2258  hex_D   EQU     %1101 ;D
0000203A  =0000000E               2259  hex_E   EQU     %1110 ;E
0000203A  =0000000F               2260  hex_F   EQU     %1111 ;F      
0000203A                          2261              
0000203A                          2262  ;LOOP:
0000203A                          2263                  *-compare the adress pointers current address with ending address to see if we need to continue
0000203A                          2264                  *- load the address registrer (pointer/ this helps us look at data)
0000203A                          2265                  *-load address register number into data register
0000203A                          2266                  
0000203A                          2267                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
0000203A                          2268                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
0000203A                          2269                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
0000203A                          2270                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
0000203A                          2271                  ;BEQ     FINISH      ;finish they are equal
0000203A                          2272                  ;RTS
0000203A                          2273  
0000203A                          2274          
0000203A                          2275          *----------END OF I/O SECTION*---
0000203A                          2276          *----------Start of OPCODE SUBROUTINE
0000203A  =0000A000               2277  stack            EQU        $A000  
0000203A  =0000000C               2278  shift            EQU        12                   * Shift 12 bits 
00000400                          2279                   ORG        $400
00000400                          2280           
00000400  4FF9 0000A000           2281  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           2282                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    2283                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           2284                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    2285                   MOVE.W     (A1),D0
00000416  123C 000C               2286                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    2287                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               2288                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               2289                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          2290                   
00000424  4EF9 00000484           2291  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           2292                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           2293                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           2294                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           2295                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           2296                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           2297                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           2298                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           2299                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           2300                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           2301                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           2302                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           2303                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           2304                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           2305                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           2306                   JMP        code1111        *Special/Reserved
00000484                          2307                   
00000484  4E72 2700               2308  code0000         STOP       #$2700
00000488  4E72 2700               2309  code0001         STOP       #$2700
0000048C  4E72 2700               2310  code0010         STOP       #$2700
00000490  4E72 2700               2311  code0011         STOP       #$2700
00000494  267C 00000000           2312  code0100         MOVE.L     #0,A3
0000049A  4241                    2313                   CLR        D1
0000049C  43F9 000006D5           2314                   LEA        enter_start_AD,A1
000004A2  700E                    2315                   MOVE.L     #14,D0
000004A4  4E4F                    2316                   TRAP       #15
000004A6  4E75                    2317                   RTS
000004A8  4E72 2700               2318  code0101         STOP       #$2700
000004AC  4E72 2700               2319  code0110         STOP       #$2700
000004B0  4E72 2700               2320  code0111         STOP       #$2700
000004B4  4E72 2700               2321  code1000         STOP       #$2700
000004B8  4E72 2700               2322  code1001         STOP       #$2700
000004BC  4E72 2700               2323  code1010         STOP       #$2700
000004C0  4E72 2700               2324  code1011         STOP       #$2700
000004C4  4E72 2700               2325  code1100         STOP       #$2700
000004C8  4E72 2700               2326  code1101         STOP       #$2700
000004CC  4E72 2700               2327  code1110         STOP       #$2700
000004D0  4E72 2700               2328  code1111         STOP       #$2700
000004D4                          2329  
000004D4                          2330  FINISH:
000004D4                          2331          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    2332              MOVE.L  A0,D3
000004D6  2C03                    2333              MOVE.L  D3,D6
000004D8  45F9 00000624           2334              LEA     good_code_buffer,A2
000004DE                          2335   
000004DE                          2336              
000004DE  14FC 0046               2337              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               2338              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               2339              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               2340              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               2341              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               2342              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               2343              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               2344              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               2345              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               2346              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               2347              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               2348              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               2349              MOVE.B  #'R',(A2)+
00000512  2610                    2350              MOVE.L  (A0),D3
00000514  2C03                    2351              MOVE.L  D3,D6
00000516  7E01                    2352              MOVE.L  #1,D7
00000518                          2353  
00000518                          2354              
00000518  14BC 0000               2355              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           2356              LEA     good_code_buffer,A1
00000522  103C 000D               2357              MOVE.B  #13,D0
00000526  4E4F                    2358              TRAP    #15   
00000528  FFFF FFFF               2359              SIMHALT
0000052C                          2360  
0000052C                          2361  *-390 -> 406 WITH NOP AT 400
0000052C                          2362  
0000052C                          2363  
0000052C                          2364  hexToAscii:
0000052C                          2365  ones:
0000052C  3A02                    2366      MOVE.W  D2,D5
0000052E  CAFC 0008               2367      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13BC               2368      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               2369      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          2370      *-adding res
0000053A                          2371      ;ADD     D2,D7
0000053A                          2372      
0000053A                          2373  
0000053A  4E75                    2374      RTS
0000053C                          2375  
0000053C                          2376  
0000053C                          2377  
0000053C                          2378  
0000053C                          2379  
0000053C                          2380  
0000053C                          2381  
0000053C                          2382  
0000053C                          2383  
0000053C                          2384  
0000053C                          2385  
0000053C                          2386  
0000053C                          2387  
0000053C                          2388  *-Parses input - take input from user to create a memory address
0000053C                          2389  *- entry is parsed to make sure it falls within a valid range
0000053C                          2390  *-good inputs are converteed to hex
0000053C                          2391  *-the entered addres get's stored in d3
0000053C                          2392  *-
0000053C                          2393  *-
0000053C                          2394  
0000053C                          2395  
0000053C                          2396  
0000053C  7C00                    2397  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    2398                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          2399                  
00000540                          2400                  *-CHECK TO SEE INPUT DATA
00000540  B205                    2401                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               2402                  BEQ     error_no_input no input was found
00000546  0C41 0008               2403                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               2404                  BGT     error_bad_entry
0000054E                          2405                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               2406                  BRA     parse_each
00000552                          2407  
00000552  7C00                    2408  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    2409                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    2410                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               2411                  BEQ     error_no_input
0000055C  0C41 0008               2412                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               2413                  BGT     error_bad_entry
00000564                          2414                  ;BGT     error_to_many_char
00000564  6000 0002               2415                  BRA     parse_each        
00000568                          2416  
00000568                          2417  *parse each analyzes each ind character entered
00000568                          2418  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          2419  
00000568  1419                    2420  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    2421                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               2422                  BEQ     parse_complete  end of user input
00000570  B43C 0066               2423                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               2424                  BGT     hex_compare
00000578                          2425                  
00000578                          2426                  *-
00000578                          2427                  *Comapare the decimal number values betyween 0 -9 first
00000578                          2428                  *
00000578                          2429                  *-
00000578  B43C 002F               2430  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          2431                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               2432                  BLE     error_char 
00000580  B43C 003A               2433                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               2434                  BLT     dec_convert
00000588                          2435                  *-
00000588                          2436                  *there are no number values, lets check alpha characters
00000588                          2437                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          2438                  *->71 'G' then we should go and convert to hex range A-F
00000588                          2439                  *-UPPER case
00000588                          2440                  *-      
00000588  B43C 0041               2441  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               2442                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               2443                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               2444                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               2445  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               2446                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               2447                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               2448                  BLT     lower_ascii
000005A8                          2449                  
000005A8                          2450           
000005A8  0402 0030               2451  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          2452                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    2453                  ASL.L   #4,D6
000005AE  DC02                    2454                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    2455                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          2456                                      *- 97 - 103
000005B2                          2457                  
000005B2                          2458                              
000005B2                          2459  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          2460  
000005B2  0402 0037               2461  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    2462                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    2463                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    2464                  BRA     parse_each  parse next item
000005BC                          2465  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               2466  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    2467                  ASL.L   #4,D6
000005C2  DC02                    2468                  ADD.B   D2,D6
000005C4  60A2                    2469                  BRA     parse_each
000005C6                          2470  
000005C6  7801                    2471  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    2472                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           2473  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    2474                  MOVE.L  #1,D0
000005D2  4E4F                    2475                  TRAP    #15
000005D4                          2476                  ;JMP     get_input
000005D4  43F9 000006C2           2477  error_char      LEA bad_char,A1
000005DA  4E4F                    2478                  trap #15
000005DC                          2479                  ;JMP get_input0
000005DC  43F9 000006AD           2480  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    2481                  TRAP #15
000005E4                          2482                  ;JMP  get_input
000005E4                          2483  
000005E4                          2484  
000005E4  FFFF FFFF               2485      SIMHALT             ; halt simulator
000005E8                          2486  
000005E8                          2487  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   2488  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          2489  
00000624                          2490  
00000624                          2491  good_code_buffer    DS.B    88
0000067C                          2492  
0000067C                          2493  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   2494  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   2495  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   2496  bad_char    DC.B    'Bad Char detected.',0
000006D5                          2497  *-errors
000006D5                          2498  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   2499  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          2500  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          2501  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          2502  
00000754= 45 6E 74 65 72 20 ...   2503  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          2504  
00000789                          2505  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               2506  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    2507                          MOVE.L  #1,D0
000007C2  4E4F                    2508                          TRAP    #15
000007C4                          2509                          ;JMP     get_input
000007C4                          2510  
000007C4                          2511  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          2512  
000007C4                          2513      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        163C
ABSOULTEWORD        15E2
ADDA_L              194C
ADDA_W              18C2
ADDRESSCOUNT        105C
ADD_B               1730
ADD_B_EA            19D6
ADD_L               183C
ADD_L_EA            1AF6
ADD_W               17B6
ADD_W_EA            1A6E
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_0_3_BIT         149C
GET_3_5BIT          149C
GET_NEXT_INSTRUCTION  106E
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         588
HEX_D               D
HEX_E               E
HEX_F               F
IA000               114A
IA001               11AC
IA010               1146
IA011               1148
IA100               126C
IMMABTABLE          111E
IMMEDIATEDATA       15B6
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12DE
M0001               12EA
M0010               12F6
M0011               130A
M0100               1322
M0101               133A
M0110               133C
M0111               133E
MAINLOOP            1036
MODETABLE           129E
N0000               143C
N0001               1442
N0010               1448
N0011               144E
N0100               1454
N0101               145A
N0110               1460
N0111               1466
N1000               146C
N1001               1472
N1010               1478
N1011               147E
N1100               1484
N1101               148A
N1110               1490
N1111               1496
NO_ENTRY            69A
NUMTABLE            13BC
ONES                52C
OP0001              151C
OP0100              14C0
OP1001              1B72
OP1101              16EC
OPERROR             1FC0
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           2024
PRINT_WORD          10C4
REGISTERPRINT       1340
REGNUMTABLE         134C
RN0000              138C
RN0001              1392
RN0010              1398
RN0011              139E
RN0100              13A4
RN0101              13AA
RN0110              13B0
RN0111              13B6
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
SUBA_L              1D9A
SUBA_W              1D10
SUB_B               1B7E
SUB_B_EA            1E24
SUB_L               1C8A
SUB_L_EA            1F44
SUB_W               1C04
SUB_W_EA            1EBC
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WORDORLONG          14A8
WRITE_DATA_IN_D3_TO_BUFFER  10AE
_NOP                14D0
_RTS                14F6
