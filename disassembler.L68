00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2017-05-08 ¿ÀÈÄ 11:12:38

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  *--- Notes
00001000                            15  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            16  * A4 will be our main pointer to current memory address and current data
00001000                            17  * D3 will be dedicated register to manipulate our data in
00001000                            18  *
00001000                            19  *
00001000                            20  *---------
00001000                            21  START:                  
00001000                            22              ; first instruction of program
00001000                            23              ;LEA     stack,SP
00001000                            24              *-present the hello message
00001000  43F9 000005D8             25              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 26              MOVE.B  #14,D0
0000100A  4E4F                      27              TRAP    #15
0000100C                            28              
0000100C                            29             
0000100C                            30  *- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            31  
0000100C                            32  * Put program code here
0000100C                            33  *-----
0000100C                            34  *This program starts by given a starting address and an ending address disassemble
0000100C                            35  *the binary code that is at that location.
0000100C                            36  *
0000100C                            37  *
0000100C                            38  *----
0000100C                            39  
0000100C                            40  *-------
0000100C                            41  * Needs to check for odd addressing**
0000100C                            42  *
0000100C                            43  *
0000100C                            44  *-----
0000100C                            45                  *---------------------I/O SECTION
0000100C                            46                  * Grabs ascii from user and converts to hex stored into memory
0000100C                            47                  * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            48                  * statically in memory and retrieved when needed to compare
0000100C                            49                  * this free's up a adress/data register to use
0000100C                            50                  *-----------------------
0000100C                            51  get_input_start_addr 
0000100C  267C 00000000             52                  MOVE.L  #0,A3
00001012  4241                      53                  CLR     D1
00001014  43F9 000006C5             54                  LEA     enter_start_AD,A1
0000101A  700E                      55                  MOVE.L  #14,D0
0000101C  4E4F                      56                  TRAP    #15
0000101E                            57                  
0000101E                            58                  
0000101E                            59  
0000101E                            60        
0000101E  43F9 000006E0             61                  LEA     userStartAddrInput,A1   load address to store the input from user
00001024  7002                      62                  MOVE.L  #2,D0
00001026  4E4F                      63                  TRAP    #15
00001028  4EB9 0000052C             64                  JSR     parse_input         parse the starting address
0000102E                            65                  
0000102E                            66                  
0000102E  2A46                      67                  MOVE.L  D6,A5   MOVE OUR STARTING ADDRESS TO A6
00001030                            68                  
00001030                            69                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
00001030                            70                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
00001030                            71  
00001030                            72  
00001030                            73  get_input_end_addr
00001030  267C 00000000             74                  MOVE.L  #0,A3
00001036  4241                      75                  CLR     D1
00001038  43F9 00000744             76                  LEA     userEnd,A1
0000103E  700E                      77                  MOVE.L  #14,D0
00001040  4E4F                      78                  TRAP    #15
00001042                            79                  
00001042                            80  
00001042                            81  
00001042  43F9 00000712             82                  LEA     userEndAddrInput,A1
00001048  1239 00000744             83                  MOVE.B  userEnd,D1
0000104E  7002                      84                  MOVE.L  #2,D0
00001050  4E4F                      85                  TRAP    #15
00001052  4EB9 00000542             86                  JSR     parse_end
00001058                            87  
00001058                            88                  
00001058  2C46                      89                  MOVE.L  D6,A6   MOVE OUT ENDING ADDRESS TO A7
0000105A                            90    
0000105A                            91               
0000105A                            92  STORE_SRT_END:
0000105A                            93                 
0000105A                            94                        ;store the starting and ending address into memory out of range
0000105A  9C4D                      95              SUB.W   A5,D6   SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000105C  23CD 00FFFF00             96              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001062  23CE 00FFFF10             97              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001068  23C6 00FFFF20             98              MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000106E  284D                      99              MOVE.L  A5,A4
00001070  6000 0032                100              BRA get_next_instruction
00001074                           101                           
00001074                           102     
00001074                           103  *---move_addresses:
00001074                           104                                  
00001074                           105                  *-MOVE 2 INTO DATA REG
00001074                           106                  
00001074                           107                  ;JSR     LOOP
00001074                           108                  *----LEA     good_code_buffer,a2 ;load the code buffer
00001074                           109                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO A0
00001074                           110                  *----MOVE.W  A4,A0
00001074                           111                  
00001074                           112                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
00001074                           113                  *----MOVE.B  #2,D4
00001074                           114                  
00001074                           115                  *-MOVE OLD ADDRESS TO DATA REGISTER
00001074                           116                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
00001074                           117                  *------MOVE.L  D3,D7
00001074                           118                  
00001074                           119  
00001074                           120  
00001074                           121  
00001074                           122                  *------LEA     good_code_buffer,A2 load again
00001074                           123                  *------JSR     print_d3
00001074                           124                  
00001074                           125                  
00001074                           126                  ;JSR     get_opcode 
00001074                           127  
00001074                           128                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
00001074                           129                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
00001074                           130                  ;SIMHALT
00001074                           131  
00001074                           132  
00001074                           133  * ---------------------------------------------------------- 
00001074                           134  * Decode ---------------------------------------------------
00001074  49F8 7000                135              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001078  6000 002A                136              BRA     get_next_instruction    ;put data in D3, incre. A4
0000107C                           137       
0000107C                           138  mainLoop          
0000107C                           139              *-----
0000107C                           140              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
0000107C                           141              *- listing of finished and un finished work
0000107C                           142              *-          ***Machine Code saved in D6*****
0000107C                           143              *-----
0000107C                           144  
0000107C  E84B                     145              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
0000107E                           146              
0000107E                           147              ;compare bits to instructions
0000107E                           148              
0000107E  B63C 0001                149              CMP.B   #bin0001,D3 ;MOVE.B
00001082                           150              *- Machine code saved in D6
00001082  6700 02A6                151              BEQ     op0001      ;branch to op0001
00001086                           152              ;CMP.B   #bin0011,D3 ;MOVE.W
00001086                           153              ;BEQ     op0011      ;branch to op0011
00001086                           154              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001086                           155              ;BEQ     op0010      ;branch to op0010           
00001086                           156              ;CMP.B   #bin0111,D3 ;MOVEQ
00001086                           157              ;BEQ     op0111      ;branch to op0111                        
00001086  B63C 0004                158              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
0000108A  6700 0242                159              BEQ     op0100          branch to op0100                        
0000108E                           160              ;CMP.B   #bin1101,D3 ;ADD, ADDA
0000108E                           161              ;BEQ     op1101      ;branch to op1101            
0000108E                           162              ;CMP.B   #bin1001,D3 ;SUB, SUBA
0000108E                           163              ;BEQ     op1001      ;branch to op1001                        
0000108E                           164              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
0000108E                           165              ;BEQ     op0000      ;branch to op0000                       
0000108E                           166              ;CMP.B   #bin0101,D3 ;SUBQ
0000108E                           167              ;BEQ     op0101      ;branch to op0101                         
0000108E                           168              ;CMP.B   #bin0110,D3 ;Bcc
0000108E                           169              ;BEQ     op0110      ;branch to op0110            
0000108E                           170              ;CMP.B   #bin1000,D3 ;DIVU.W
0000108E                           171              ;BEQ     op1000      ;branch to op1000                                      
0000108E                           172              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
0000108E                           173              ;BEQ     op1011      ;branch to op1011 
0000108E                           174              ;CMP.B   #bin1100,D3 ;AND, MULS.W
0000108E                           175              ;BEQ     op1100      ;branch to op1100                                    
0000108E                           176              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
0000108E                           177              ;BEQ     op1110      ;branch to op1110            
0000108E                           178              
0000108E  6000 032C                179              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001092                           180              
00001092                           181              ;branch to display opError display
00001092                           182              
00001092                           183              ;print all the things...
00001092                           184   *******************************************************************************
00001092                           185  *
00001092                           186  *******************************************************************************
00001092                           187  addressCount 
00001092                           188              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001092                           189              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001092                           190              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001092                           191              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001092                           192              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001092                           193              
00001092  4BF9 00FFFF10            194              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
00001098  2215                     195              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000109A  2A0C                     196              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000109C  B285                     197              CMP.L   D5,D1       * COMPARE THE ADDRESSES
0000109E  6F00 F434                198              BLE     FINISH      * branch to end if ending address reached
000010A2  4E75                     199              RTS                 * return IF WE HAVE NOT FINISHED
000010A4                           200              
000010A4                           201  get_next_instruction:
000010A4  4EB8 1092                202                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
000010A8                           203                  *-line count
000010A8  4245                     204                  CLR D5             *-CLEAR THIS REGISTER/
000010AA  45F9 00000614            205                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
000010B0  304C                     206                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
000010B2  7E02                     207                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
000010B4  2608                     208                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
000010B6  2C03                     209                  MOVE.L  D3,D6   
000010B8  45F9 00000614            210                  LEA     good_code_buffer,A2
000010BE                           211                                  *-write the current data moved to data register d3
000010BE  4EB9 000010E0            212                  JSR     write_data_in_D3_to_buffer
000010C4                           213                  
000010C4  14BC 0020                214                  MOVE.B  #' ',(A2)
000010C8  14BC 0020                215                  MOVE.B  #' ',(A2)
000010CC  14BC 0020                216                  MOVE.B  #' ',(A2)
000010D0  14BC 0020                217                  MOVE.B  #' ',(A2)
000010D4                           218                  
000010D4  4286                     219                  CLR.L   D6
000010D6  4283                     220                  CLR.L   D3
000010D8                           221                  
000010D8  3C1C                     222                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010DA                           223                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010DA  3606                     224                  MOVE.W  D6,D3
000010DC  E04B                     225                  LSR.W   #8,D3
000010DE                           226                  
000010DE  609C                     227                  BRA     mainLoop
000010E0                           228                  
000010E0                           229  write_data_in_D3_to_buffer:
000010E0                           230              *------
000010E0                           231              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010E0                           232              *
000010E0                           233              *
000010E0                           234              *---------
000010E0  BE7C 0002                235                  CMP.W   #2,D7 ERROR checking
000010E4  6600 0010                236                  BNE     print_word branch off to write the first word of the line
000010E8  4843                     237                  SWAP    D3
000010EA  4846                     238                  SWAP    D6
000010EC  4EB9 000010F6            239                  JSR     print_word
000010F2  4846                     240                  SWAP    D6
000010F4  2606                     241                  MOVE.L  D6,D3
000010F6                           242                  
000010F6                           243   print_word:
000010F6                           244                  *-****
000010F6                           245                  * called 4 times to decode from hex to ascii the first word 
000010F6                           246                  *   using the below jump table
000010F6                           247                  *
000010F6                           248                  *-------
000010F6  E04B                     249                  LSR.W   #8,D3
000010F8  E84B                     250                  LSR.W   #4,D3
000010FA  C6FC 0008                251                  MULU.W  #8,D3
000010FE  4DF9 000011EE            252                  LEA     numTable,A6
00001104  4EB6 3000                253                  JSR     (A6,D3)
00001108                           254                  
00001108  3606                     255                  MOVE.W  D6,D3   COPY DATA
0000110A  E94B                     256                  LSL.W   #4,D3
0000110C  E04B                     257                  LSR.W   #8,D3
0000110E  E84B                     258                  LSR.W   #4,D3
00001110  C6FC 0008                259                  MULU.W  #8,D3
00001114  4DF9 000011EE            260                  LEA     numTable,A6
0000111A  4EB6 3000                261                  JSR     (A6,D3)
0000111E                           262                  
0000111E  3606                     263                  MOVE.W  D6,D3
00001120                           264                  
00001120  E14B                     265                  LSL.W   #8,D3
00001122  E04B                     266                  LSR.W   #8,D3
00001124  E84B                     267                  LSR.W   #4,D3
00001126  C6FC 0008                268                  MULU.W  #8,D3
0000112A  4DF9 000011EE            269                  LEA numTable,A6
00001130  4EB6 3000                270                  JSR     (A6,D3)
00001134                           271                  
00001134                           272                  
00001134  3606                     273                  MOVE.W  D6,D3
00001136  E94B                     274                  LSL.W   #4,D3
00001138  E14B                     275                  LSL.W   #8,D3
0000113A  E04B                     276                  LSR.W   #8,D3
0000113C  E84B                     277                  LSR.W   #4,D3
0000113E  C6FC 0008                278                  MULU.W  #8,D3
00001142  4DF9 000011EE            279                  LEA     numTable,A6
00001148  4EB6 3000                280                  JSR     (A6,D3)
0000114C  5805                     281                  ADDI.B  #4,D5
0000114E  4E75                     282                  RTS
00001150                           283                  
00001150                           284  * -----------------------------------------------------------            
00001150                           285  * Jump Table modeTable ***************************************
00001150                           286  *** matches the associated Addressing mode     
00001150                           287  *************************************************************
00001150  4EB9 00001180            288  modeTable   JSR     M0000   ;Dn, Data Register 
00001156  4E75                     289              RTS             ;return, done printing
00001158  4EB9 0000118C            290              JSR     M0001   ;An, Address Register 
0000115E  4E75                     291              RTS             ;return, done printing
00001160  4EB9 00001198            292              JSR     M0010   ;(An), Address
00001166  4E75                     293              RTS             ;return, done printing
00001168  4EB9 000011AC            294              JSR     M0011   ;(An)+, Address with Postincrement
0000116E  4E75                     295              RTS             ;return, done printing
00001170  4EB9 000011C4            296              JSR     M0100   ;-(An), Address with Predecrement
00001176  4E75                     297              RTS             ;return, done printing
00001178  4EB9 000011DC            298              JSR     M0111   ;(xxx).W, (xxx).L, #imm
0000117E  4E75                     299              RTS             ;return, done printing           
00001180                           300  * -----------------------------------------------------------            
00001180                           301  * Subroutine M0000 ------------------------------------------
00001180                           302  M0000                               ;Dn
00001180  14FC 0044                303              MOVE.B  #'D',(A2)+      ;display D
00001184  4EB9 000011E2            304              JSR     registerPrint   ;display n
0000118A  4E75                     305              RTS
0000118C                           306  
0000118C                           307  * -----------------------------------------------------------            
0000118C                           308  * Subroutine M0001 ------------------------------------------
0000118C                           309  M0001                               ;An
0000118C  14FC 0041                310              MOVE.B  #'A',(A2)+      ;display A
00001190  4EB9 000011E2            311              JSR     registerPrint   ;display n
00001196  4E75                     312              RTS
00001198                           313  
00001198                           314  * -----------------------------------------------------------            
00001198                           315  * Subroutine M0010 ------------------------------------------
00001198                           316  M0010                               ;(An) Address
00001198  14FC 0028                317              MOVE.B  #'(',(A2)+      ;display (
0000119C  14FC 0041                318              MOVE.B  #'A',(A2)+      ;display A
000011A0  4EB9 000011E2            319              JSR     registerPrint   ;display n      
000011A6  14FC 0029                320              MOVE.B  #')',(A2)+      ;display )
000011AA  4E75                     321              RTS
000011AC                           322   
000011AC                           323  * -----------------------------------------------------------            
000011AC                           324  * Subroutine M0011 ------------------------------------------
000011AC                           325  M0011                               ;(An)+ 
000011AC  14FC 0028                326              MOVE.B  #'(',(A2)+      ;display (
000011B0  14FC 0041                327              MOVE.B  #'A',(A2)+      ;display A
000011B4  4EB9 000011E2            328              JSR     registerPrint   ;display n      
000011BA  14FC 0029                329              MOVE.B  #')',(A2)+      ;display )
000011BE  14FC 002B                330              MOVE.B  #'+',(A2)+      ;display +
000011C2  4E75                     331              RTS
000011C4                           332  
000011C4                           333  
000011C4                           334  * -----------------------------------------------------------            
000011C4                           335  * Subroutine M0100 ------------------------------------------
000011C4                           336  M0100                               ;-(An)
000011C4  14FC 002D                337              MOVE.B  #'-',(A2)+      ;display -
000011C8  14FC 0028                338              MOVE.B  #'(',(A2)+      ;display (
000011CC  14FC 0041                339              MOVE.B  #'A',(A2)+      ;display A
000011D0  4EB9 000011E2            340              JSR     registerPrint   ;display n      
000011D6  14FC 0029                341              MOVE.B  #')',(A2)+      ;display )
000011DA  4E75                     342              RTS
000011DC                           343  
000011DC                           344  
000011DC                           345  * -----------------------------------------------------------            
000011DC                           346  * Subroutine M0111 ------------------------------------------
000011DC                           347  M0111                               ;(xxx).W, (xxx).L, #imm
000011DC  14FC 0037                348              MOVE.B  #'7',(A2)+      ;display 7
000011E0  4E75                     349              RTS
000011E2                           350  
000011E2                           351  * ----------------------------------------------------------- 
000011E2                           352  registerPrint
000011E2  4FF9 000011EE            353              LEA     numTable,A7 Load the table into A7
000011E8  4EB7 1000                354              JSR     (A7,D1)     Jump to subroutine of value at D0
000011EC  4E75                     355              RTS
000011EE                           356              
000011EE                           357   
000011EE                           358  * -----------------------------------------------------------            
000011EE                           359  * Jump Table numTable ***************************************
000011EE                           360  *** prints the associated number of the register            *
000011EE                           361  *** Also prints hex values for data and addresses           *
000011EE                           362  *-----see below for decoding of what these sub-routines are
000011EE                           363  *************************************************************
000011EE  4EB9 0000126E            364  numTable    JSR     N0000   ;register 0
000011F4  4E75                     365              RTS             ;return, done printing
000011F6  4EB9 00001274            366              JSR     N0001   ;register 1
000011FC  4E75                     367              RTS             ;return, done printing
000011FE  4EB9 0000127A            368              JSR     N0010   ;register 2
00001204  4E75                     369              RTS             ;return, done printing
00001206  4EB9 00001280            370              JSR     N0011   ;register 3
0000120C  4E75                     371              RTS             ;return, done printing
0000120E  4EB9 00001286            372              JSR     N0100   ;register 4
00001214  4E75                     373              RTS             ;return, done printing
00001216  4EB9 0000128C            374              JSR     N0101   ;register 5
0000121C  4E75                     375              RTS             ;return, done printing
0000121E  4EB9 00001292            376              JSR     N0110   ;register 6
00001224  4E75                     377              RTS             ;return, done printing
00001226  4EB9 00001298            378              JSR     N0111   ;register 7
0000122C  4E75                     379              RTS             ;return, done printing
0000122E  4EB9 0000129E            380              JSR     N1000   ;num 8
00001234  4E75                     381              RTS             ;return, done printing
00001236  4EB9 000012A4            382              JSR     N1001   ;num 9
0000123C  4E75                     383              RTS             ;return, done printing
0000123E  4EB9 000012AA            384              JSR     N1010   ;num A
00001244  4E75                     385              RTS             ;return, done printing
00001246  4EB9 000012B0            386              JSR     N1011   ;num B
0000124C  4E75                     387              RTS             ;return, done printing
0000124E  4EB9 000012B6            388              JSR     N1100   ;num C
00001254  4E75                     389              RTS             ;return, done printing
00001256  4EB9 000012BC            390              JSR     N1101   ;num D
0000125C  4E75                     391              RTS             ;return, done printing
0000125E  4EB9 000012C2            392              JSR     N1110   ;num E
00001264  4E75                     393              RTS             ;return, done printing
00001266  4EB9 000012C8            394              JSR     N1111   ;num F
0000126C  4E75                     395              RTS             ;return, done printing
0000126E                           396  * -----------------------------------------------------------            
0000126E                           397  * Subroutine N0000 ------------------------------------------
0000126E                           398  N0000
0000126E  14FC 0030                399              MOVE.B  #'0',(A2)+      ;display 0
00001272  4E75                     400              RTS
00001274                           401  
00001274                           402  * -----------------------------------------------------------            
00001274                           403  * Subroutine N0001 ------------------------------------------
00001274                           404  N0001
00001274  14FC 0031                405              MOVE.B  #'1',(A2)+      ;display 1
00001278  4E75                     406              RTS
0000127A                           407  
0000127A                           408  * -----------------------------------------------------------            
0000127A                           409  * Subroutine N0010 ------------------------------------------
0000127A                           410  N0010
0000127A  14FC 0032                411              MOVE.B  #'2',(A2)+      ;display 2
0000127E  4E75                     412              RTS
00001280                           413   
00001280                           414  * -----------------------------------------------------------            
00001280                           415  * Subroutine N0011 ------------------------------------------
00001280                           416  N0011
00001280  14FC 0033                417              MOVE.B  #'3',(A2)+      ;display 3
00001284  4E75                     418              RTS
00001286                           419  
00001286                           420  * -----------------------------------------------------------            
00001286                           421  * Subroutine N0100 ------------------------------------------
00001286                           422  N0100
00001286  14FC 0034                423              MOVE.B  #'4',(A2)+      ;display 4
0000128A  4E75                     424              RTS
0000128C                           425  
0000128C                           426  * -----------------------------------------------------------            
0000128C                           427  * Subroutine N0101 ------------------------------------------
0000128C                           428  N0101
0000128C  14FC 0035                429              MOVE.B  #'5',(A2)+      ;display 5
00001290  4E75                     430              RTS
00001292                           431  
00001292                           432  * -----------------------------------------------------------            
00001292                           433  * Subroutine N0110 ------------------------------------------
00001292                           434  N0110
00001292  14FC 0036                435              MOVE.B  #'6',(A2)+      ;display 6
00001296  4E75                     436              RTS
00001298                           437              
00001298                           438  * -----------------------------------------------------------            
00001298                           439  * Subroutine N0111 ------------------------------------------
00001298                           440  N0111
00001298  14FC 0037                441              MOVE.B  #'7',(A2)+      ;display 7
0000129C  4E75                     442              RTS
0000129E                           443  
0000129E                           444  * ----------------------------------------------------------- 
0000129E                           445  * Subroutine N1000 ------------------------------------------
0000129E                           446  N1000       
0000129E  14FC 0038                447              MOVE.B  #'8',(A2)+      ;display 8
000012A2  4E75                     448              RTS
000012A4                           449  
000012A4                           450  * -----------------------------------------------------------            
000012A4                           451  * Subroutine N1001 ------------------------------------------
000012A4                           452  N1001   
000012A4  14FC 0039                453              MOVE.B  #'9',(A2)+      ;display 9
000012A8  4E75                     454              RTS
000012AA                           455  
000012AA                           456  * -----------------------------------------------------------            
000012AA                           457  * Subroutine N1010 ------------------------------------------
000012AA                           458  N1010   
000012AA  14FC 0041                459              MOVE.B  #'A',(A2)+      ;display A
000012AE  4E75                     460              RTS
000012B0                           461  
000012B0                           462  * -----------------------------------------------------------            
000012B0                           463  * Subroutine N1011 ------------------------------------------
000012B0                           464  N1011   
000012B0  14FC 0042                465              MOVE.B  #'B',(A2)+      ;display B
000012B4  4E75                     466              RTS
000012B6                           467  
000012B6                           468  * -----------------------------------------------------------            
000012B6                           469  * Subroutine N1100 ------------------------------------------
000012B6                           470  N1100   
000012B6  14FC 0043                471              MOVE.B  #'C',(A2)+      ;display C
000012BA  4E75                     472              RTS
000012BC                           473  
000012BC                           474  * -----------------------------------------------------------            
000012BC                           475  * Subroutine N1101 ------------------------------------------
000012BC                           476  N1101   
000012BC  14FC 0044                477              MOVE.B  #'D',(A2)+      ;display D
000012C0  4E75                     478              RTS
000012C2                           479  
000012C2                           480  * -----------------------------------------------------------            
000012C2                           481  * Subroutine N1110 ------------------------------------------
000012C2                           482  N1110   
000012C2  14FC 0045                483              MOVE.B  #'E',(A2)+      ;display E
000012C6  4E75                     484              RTS
000012C8                           485  
000012C8                           486  * -----------------------------------------------------------            
000012C8                           487  * Subroutine N1111 ------------------------------------------
000012C8                           488  N1111   
000012C8  14FC 0046                489              MOVE.B  #'F',(A2)+      ;display F
000012CC  4E75                     490              RTS   
000012CE                           491              
000012CE                           492              
000012CE                           493              
000012CE                           494              *---------------------------------------------------------------
000012CE                           495              *--------------------------------------------------------
000012CE                           496              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000012CE                           497              *-------------------------------------
000012CE                           498              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000012CE                           499  op0100      
000012CE                           500  
000012CE                           501  
000012CE                           502   
000012CE                           503              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000012CE                           504              ;BEQ     jumpToRt            
000012CE                           505              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000012CE                           506              ;BEQ     returnRt 
000012CE                           507             
000012CE                           508              ;JSR     WorL        
000012CE                           509              ;CMP.B   #hex7,D3    ;see if it's a LEA
000012CE                           510              ;BEQ     _lea        ;branch 
000012CE                           511              
000012CE                           512              ;JSR     clrORmm       
000012CE                           513              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000012CE                           514              ;BEQ     _clrB       ;branch             
000012CE                           515              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000012CE                           516              ;BEQ     _clrW       ;branch   
000012CE                           517              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000012CE                           518              ;BEQ     _clrL       ;branch
000012CE                           519    
000012CE                           520              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000012CE                           521              ;BEQ     _movemW     ;branch   
000012CE                           522              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000012CE                           523              ;BEQ     _movemL     ;branch              
000012CE                           524                          
000012CE                           525              ;BRA     opError     ;bad opcode branch to error
000012CE                           526              
000012CE                           527              
000012CE  BC7C 4E71                528              CMP.W   #$4E71,D6
000012D2  6700 000A                529              BEQ     _NOP
000012D6                           530              
000012D6  BC7C 4E75                531              CMP.W   #$4E75,D6   ;see if it's a RTS
000012DA  6700 0028                532              BEQ     _RTS        branch to RTS
000012DE                           533             
000012DE                           534  
000012DE                           535              
000012DE                           536  _NOP
000012DE  7E02                     537              MOVE.L  #2,D7       ;data is not error
000012E0  14FC 0020                538              MOVE.B  #' ',(A2)+      ;print spaces
000012E4  14FC 0020                539              MOVE.B  #' ',(A2)+      ;print spaces
000012E8  14FC 0020                540              MOVE.B  #' ',(A2)+      ;print spaces
000012EC  14FC 0020                541              MOVE.B  #' ',(A2)+      ;print spaces
000012F0  14FC 004E                542              MOVE.B  #'N',(A2)+      ;print N
000012F4  14FC 004F                543              MOVE.B  #'O',(A2)+      ;print O
000012F8  14FC 0050                544              MOVE.B  #'P',(A2)+      ;print P
000012FC  1A3C 0003                545              MOVE.B  #3,D5           ;counter for output
00001300  6000 011E                546              BRA     printCode
00001304                           547  
00001304                           548  _RTS    
00001304  7E02                     549              MOVE.L  #2,D7       ;data is not error
00001306  14FC 0020                550              MOVE.B  #' ',(A2)+      ;print spaces
0000130A  14FC 0020                551              MOVE.B  #' ',(A2)+      ;print spaces
0000130E  14FC 0020                552              MOVE.B  #' ',(A2)+      ;print spaces
00001312  14FC 0020                553              MOVE.B  #' ',(A2)+      ;print spaces
00001316  14FC 0052                554              MOVE.B  #'R',(A2)+      ;print R
0000131A  14FC 0054                555              MOVE.B  #'T',(A2)+      ;print T
0000131E  14FC 0053                556              MOVE.B  #'S',(A2)+      ;print S
00001322  1A3C 0003                557              MOVE.B  #3,D5           ;counter for output
00001326  6000 00F8                558              BRA     printCode
00001326  6000 00F8                559  -------------------- end include --------------------
0000132A                           560              INCLUDE 'op0001.x68'    MOVE.b Differetn file
0000132A                           561  
0000132A                           562  
0000132A                           563  
0000132A                           564  
0000132A                           565  op0001
0000132A  7E02                     566              MOVE.L  #2,D7       ;data is not error
0000132C  14FC 0020                567              MOVE.B  #' ',(A2)+      ;print spaces
00001330  14FC 0020                568              MOVE.B  #' ',(A2)+      ;print spaces
00001334  14FC 0020                569              MOVE.B  #' ',(A2)+      ;print spaces
00001338  14FC 0020                570              MOVE.B  #' ',(A2)+      ;print spaces
0000133C  14FC 004D                571              MOVE.B  #'M',(A2)+      ;print M
00001340  14FC 004F                572              MOVE.B  #'O',(A2)+      ;print O
00001344  14FC 0056                573              MOVE.B  #'V',(A2)+      ;print V
00001348  14FC 0045                574              MOVE.B  #'E',(A2)+      PRINT  E
0000134C  14FC 002E                575              MOVE.B  #'.',(A2)+
00001350  14FC 0042                576              MOVE.B  #'B',(A2)+
00001354  4242                     577              CLR     D2
00001356  4241                     578              CLR     D1
00001358  4240                     579              CLR     D0
0000135A  2406                     580              MOVE.L  D6,D2       MOVE the original machine code to D2 to play with
0000135C  E98A                     581              LSL.L   #4,D2       BIT* **** **** 0000
0000135E  E08A                     582              LSR.L   #8,D2       0000 0000 BIT* ****
00001360  EA8A                     583              LSR.L   #5,D2       0000 0000 0000 0BIT     
00001362  1202                     584              MOVE.B  D2,D1       MOVE OUT SHIFTED BTYE TO PLAY WITH TO D0 
00001364  C2FC 0008                585              MULU    #8,D1
00001368  4EB8 11E2                586              JSR     registerPrint
0000136C  4242                     587              CLR     D2
0000136E  4241                     588              CLR     D1
00001370  4240                     589              CLR     D0
00001372  3406                     590              MOVE.W  D6,D2  MOVE the original machine code to D2 to play with
00001374  EF8A                     591              LSL.L   #7,D2
00001376  E08A                     592              LSR.L   #8,D2
00001378  EA8A                     593              LSR.L   #5,D2
0000137A  1002                     594              MOVE.B  D2,D0
0000137C  C0FC 0008                595              MULU    #8,D0
00001380  4DF8 1150                596              LEA     modeTable,A6 Load the table into A6
00001384  4EB6 0000                597              JSR     (A6,D0)     Jump to subroutine of value at D0
00001388  4242                     598              CLR     D2
0000138A  4241                     599              CLR     D1
0000138C  4240                     600              CLR     D0
0000138E  3406                     601              MOVE.W  D6,D2  MOVE the original machine code to D2 to play with
00001390  E54A                     602              LSL.W   #2,D2
00001392  EA4A                     603              LSR.W   #5,D2
00001394  1002                     604              MOVE.B  D2,D0
00001396  C0FC 0008                605              MULU    #8,D0
0000139A  4DF8 1150                606              LEA     modeTable,A6 Load the table into A6
0000139E  4EB6 0000                607              JSR     (A6,D0)     Jump to subroutine of value at D0
000013A2  4242                     608              CLR     D2
000013A4  4241                     609              CLR     D1
000013A6  4240                     610              CLR     D0
000013A8  3406                     611              MOVE.W  D6, D2  MOVE the original machine code to D2 to play with
000013AA  E30A                     612              LSL.B   #1,D2   Shift the bits left by 1, IE 100 LSL.B -> 1000, we get the byte, then shift back LSR.B #1 -> 0100 (OMG EDWARD IS GOD)
000013AC  E20A                     613              LSR.B   #1,D2
000013AE  1202                     614              MOVE.B  D2,D1   MOVE OUT SHIFTED BTYE TO PLAY WITH TO D0             
000013B0  C2FC 0008                615              MULU    #8,D1
000013B4  4EB8 11E2                616               JSR     registerPrint
000013B8                           617  
000013B8  6000 0066                618              BRA     printCode
000013BC                           619  
000013BC                           620  
000013BC                           621  
000013BC                           622  
000013BC                           623  
000013BC                           624  
000013BC                           625  
000013BC                           626  
000013BC                           627  
000013BC                           628  
000013BC                           629  
000013BC                           630  -------------------- end include --------------------
000013BC                           631  
000013BC                           632  
000013BC                           633              
000013BC                           634  opError                             
000013BC  2608                     635              MOVE.L  A0,D3
000013BE  2C03                     636              MOVE.L  D3,D6
000013C0  45F9 0000066C            637              LEA     bad_code_buffer,A2
000013C6  7E02                     638              MOVE.L  #2,D7
000013C8  4EB8 10E0                639              JSR     write_data_in_D3_to_buffer
000013CC                           640              
000013CC  14FC 0020                641              MOVE.B  #' ',(A2)+      ;print spaces
000013D0  14FC 0020                642              MOVE.B  #' ',(A2)+      ;print spaces
000013D4  14FC 0020                643              MOVE.B  #' ',(A2)+      ;print spaces
000013D8  14FC 0020                644              MOVE.B  #' ',(A2)+      ;print spaces
000013DC  14FC 0044                645              MOVE.B  #'D',(A2)+      ;print D
000013E0  14FC 0041                646              MOVE.B  #'A',(A2)+      ;print A
000013E4  14FC 0054                647              MOVE.B  #'T',(A2)+      ;print T
000013E8  14FC 0041                648              MOVE.B  #'A',(A2)+      ;print A
000013EC  14FC 0020                649              MOVE.B  #' ',(A2)+      ;print spaces
000013F0  14FC 0020                650              MOVE.B  #' ',(A2)+      ;print spaces
000013F4  14FC 0020                651              MOVE.B  #' ',(A2)+      ;print spaces
000013F8  14FC 0020                652              MOVE.B  #' ',(A2)+      ;print spaces
000013FC                           653              
000013FC                           654              
000013FC  14FC 0046                655              MOVE.B  #'F',(A2)+      ;print spaces
00001400  14FC 0046                656              MOVE.B  #'F',(A2)+      ;print spaces
00001404  14FC 0046                657              MOVE.B  #'F',(A2)+      ;print spaces
00001408  14FC 0046                658              MOVE.B  #'F',(A2)+      ;print spaces
0000140C                           659              
0000140C                           660              
0000140C                           661              ;MOVE.L  (A0),D3
0000140C                           662              ;MOVE.L  D3,D6
0000140C                           663              ;MOVE.L  #1,D7
0000140C                           664              ;JSR     write_data_in_D3_to_buffer
0000140C                           665              
0000140C  14BC 0000                666              MOVE.B  #$00,(A2) * add NULL value to print string
00001410  43F9 0000066C            667              LEA     bad_code_buffer,A1
00001416  103C 000D                668              MOVE.B  #13,D0
0000141A  4E4F                     669              TRAP    #15   
0000141C                           670           
0000141C  6000 FC86                671              BRA     get_next_instruction           
00001420                           672  printCode   
00001420  14BC 0000                673              MOVE.B  #$00,(A2)   * add NULL value to print string
00001424  070A 0000                674              MOVEP   (A2),D3
00001428  43F9 00000614            675              LEA     good_code_buffer,A1 * load buffer for good code to print
0000142E  700D                     676              MOVEQ   #13,D0
00001430  4E4F                     677              TRAP    #15         * display code
00001432                           678    
00001432  6000 FC70                679              BRA     get_next_instruction                     
00001436                           680  * OP Codes -------------------------------------------------
00001436  =00000000                681  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00001436  =00000001                682  bin0001     EQU     %0001   ;MOVE.B
00001436  =00000002                683  bin0010     EQU     %0010   ;MOVE.L
00001436  =00000003                684  bin0011     EQU     %0011   ;MOVE.W
00001436  =00000004                685  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00001436  =00000005                686  bin0101     EQU     %0101   ;SUBQ
00001436  =00000006                687  bin0110     EQU     %0110   ;Bcc
00001436  =00000007                688  bin0111     EQU     %0111   ;MOVEQ
00001436  =00000008                689  bin1000     EQU     %1000   ;DIVU.W
00001436  =00000009                690  bin1001     EQU     %1001   ;SUB, SUBA
00001436  =0000000B                691  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00001436  =0000000C                692  bin1100     EQU     %1100   ;AND, MULS.W
00001436  =0000000D                693  bin1101     EQU     %1101   ;ADD, ADDA
00001436  =0000000E                694  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00001436                           695  
00001436                           696  
00001436                           697              
00001436                           698  ;LOOP:
00001436                           699                  *-compare the adress pointers current address with ending address to see if we need to continue
00001436                           700                  *- load the address registrer (pointer/ this helps us look at data)
00001436                           701                  *-load address register number into data register
00001436                           702                  
00001436                           703                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
00001436                           704                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
00001436                           705                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
00001436                           706                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
00001436                           707                  ;BEQ     FINISH      ;finish they are equal
00001436                           708                  ;RTS
00001436                           709  
00001436                           710          
00001436                           711          *----------END OF I/O SECTION*---
00001436                           712          *----------Start of OPCODE SUBROUTINE
00001436  =0000A000                713  stack            EQU        $A000  
00001436  =0000000C                714  shift            EQU        12                   * Shift 12 bits 
00000400                           715                   ORG        $400
00000400                           716           
00000400  4FF9 0000A000            717  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424            718                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                     719                   CLR.L      D0              *Zero it       
0000040E  227C 00009000            720                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                     721                   MOVE.W     (A1),D0
00000416  123C 000C                722                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                     723                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006                724                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000                725                   JSR        0(A0,D0)        *Jump indirect with index
00000424                           726                   
00000424  4EF9 00000484            727  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488            728                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C            729                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490            730                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494            731                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8            732                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC            733                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0            734                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4            735                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8            736                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC            737                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0            738                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4            739                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8            740                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC            741                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0            742                   JMP        code1111        *Special/Reserved
00000484                           743                   
00000484  4E72 2700                744  code0000         STOP       #$2700
00000488  4E72 2700                745  code0001         STOP       #$2700
0000048C  4E72 2700                746  code0010         STOP       #$2700
00000490  4E72 2700                747  code0011         STOP       #$2700
00000494  267C 00000000            748  code0100         MOVE.L     #0,A3
0000049A  4241                     749                   CLR        D1
0000049C  43F9 000006C5            750                   LEA        enter_start_AD,A1
000004A2  700E                     751                   MOVE.L     #14,D0
000004A4  4E4F                     752                   TRAP       #15
000004A6  4E75                     753                   RTS
000004A8  4E72 2700                754  code0101         STOP       #$2700
000004AC  4E72 2700                755  code0110         STOP       #$2700
000004B0  4E72 2700                756  code0111         STOP       #$2700
000004B4  4E72 2700                757  code1000         STOP       #$2700
000004B8  4E72 2700                758  code1001         STOP       #$2700
000004BC  4E72 2700                759  code1010         STOP       #$2700
000004C0  4E72 2700                760  code1011         STOP       #$2700
000004C4  4E72 2700                761  code1100         STOP       #$2700
000004C8  4E72 2700                762  code1101         STOP       #$2700
000004CC  4E72 2700                763  code1110         STOP       #$2700
000004D0  4E72 2700                764  code1111         STOP       #$2700
000004D4                           765  
000004D4                           766  FINISH:
000004D4                           767          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                     768              MOVE.L  A0,D3
000004D6  2C03                     769              MOVE.L  D3,D6
000004D8  45F9 00000614            770              LEA     good_code_buffer,A2
000004DE                           771   
000004DE                           772              
000004DE  14FC 0046                773              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049                774              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049                775              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E                776              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049                777              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053                778              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048                779              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041                780              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041                781              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041                782              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048                783              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041                784              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052                785              MOVE.B  #'R',(A2)+
00000512  2610                     786              MOVE.L  (A0),D3
00000514  2C03                     787              MOVE.L  D3,D6
00000516  7E01                     788              MOVE.L  #1,D7
00000518                           789  
00000518                           790              
00000518  14BC 0000                791              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000614            792              LEA     good_code_buffer,A1
00000522  103C 000D                793              MOVE.B  #13,D0
00000526  4E4F                     794              TRAP    #15   
00000528  FFFF FFFF                795              SIMHALT
0000052C                           796  
0000052C                           797  *-390 -> 406 WITH NOP AT 400
0000052C                           798  
0000052C                           799  
0000052C                           800  
0000052C                           801  
0000052C                           802  
0000052C                           803  
0000052C                           804  
0000052C                           805  
0000052C                           806  
0000052C                           807  
0000052C                           808  
0000052C                           809  
0000052C                           810  
0000052C                           811  
0000052C                           812  
0000052C                           813  *-Parses input - take input from user to create a memory address
0000052C                           814  *- entry is parsed to make sure it falls within a valid range
0000052C                           815  *-good inputs are converteed to hex
0000052C                           816  *-the entered addres get's stored in d3
0000052C                           817  *-
0000052C                           818  *-
0000052C                           819  
0000052C                           820  
0000052C                           821  
0000052C  7C00                     822  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000052E  7A00                     823                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000530                           824                  
00000530                           825                  *-CHECK TO SEE INPUT DATA
00000530  B205                     826                  CMP.B   D5,D1   D5 IS 0
00000532  6700 0086                827                  BEQ     error_no_input no input was found
00000536  0C41 0008                828                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000053A  6E00 0090                829                  BGT     error_bad_entry
0000053E                           830                  ;BGT     error_inv_to_many_char
0000053E  6000 0018                831                  BRA     parse_each
00000542                           832  
00000542  7C00                     833  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000544  7A00                     834                  MOVEQ   #$0,D5  CLEARS D5
00000546  B205                     835                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000548  6700 0070                836                  BEQ     error_no_input
0000054C  0C41 0008                837                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000550  6E00 007A                838                  BGT     error_bad_entry
00000554                           839                  ;BGT     error_to_many_char
00000554  6000 0002                840                  BRA     parse_each        
00000558                           841  
00000558                           842  *parse each analyzes each ind character entered
00000558                           843  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000558                           844  
00000558  1419                     845  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000055A  B405                     846                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000055C  6700 0058                847                  BEQ     parse_complete  end of user input
00000560  B43C 0066                848                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000564  6E00 0012                849                  BGT     hex_compare
00000568                           850                  
00000568                           851                  *-
00000568                           852                  *Comapare the decimal number values betyween 0 -9 first
00000568                           853                  *
00000568                           854                  *-
00000568  B43C 002F                855  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000056C                           856                                      *-for decimal values between [47, 57] are valid
0000056C  6F00 0056                857                  BLE     error_char 
00000570  B43C 003A                858                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000574  6D00 0022                859                  BLT     dec_convert
00000578                           860                  *-
00000578                           861                  *there are no number values, lets check alpha characters
00000578                           862                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000578                           863                  *->71 'G' then we should go and convert to hex range A-F
00000578                           864                  *-UPPER case
00000578                           865                  *-      
00000578  B43C 0041                866  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000057C  6D00 0046                867                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000580  B43C 0047                868                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000584  6D00 001C                869                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000588  B43C 0061                870  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000058C  6D00 0036                871                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
00000590  B43C 0067                872                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
00000594  6D00 0016                873                  BLT     lower_ascii
00000598                           874                  
00000598                           875           
00000598  0402 0030                876  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
0000059C                           877                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
0000059C  E986                     878                  ASL.L   #4,D6
0000059E  DC02                     879                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005A0  60B6                     880                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005A2                           881                                      *- 97 - 103
000005A2                           882                  
000005A2                           883                              
000005A2                           884  *- ASCII conversions UPPER case to hex value by substracting 55
000005A2                           885  
000005A2  0402 0037                886  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005A6  E986                     887                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005A8  DC02                     888                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005AA  60AC                     889                  BRA     parse_each  parse next item
000005AC                           890  *-ASCI lower case to hex value by subtracting 87
000005AC  0402 0057                891  lower_ascii     SUBI.B  #87,D2
000005B0  E986                     892                  ASL.L   #4,D6
000005B2  DC02                     893                  ADD.B   D2,D6
000005B4  60A2                     894                  BRA     parse_each
000005B6                           895  
000005B6  7801                     896  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005B8  4E75                     897                  RTS             JUMP FROM SUBROUTINE                
000005BA  43F9 0000068A            898  error_no_input  LEA no_entry,A1 load bad entry statment
000005C0  7001                     899                  MOVE.L  #1,D0
000005C2  4E4F                     900                  TRAP    #15
000005C4                           901                  ;JMP     get_input
000005C4  43F9 000006B2            902  error_char      LEA bad_char,A1
000005CA  4E4F                     903                  trap #15
000005CC                           904                  ;JMP get_input0
000005CC  43F9 0000069D            905  error_bad_entry LEA bad_entry,A1
000005D2  4E4F                     906                  TRAP #15
000005D4                           907                  ;JMP  get_input
000005D4                           908  
000005D4                           909  
000005D4  FFFF FFFF                910      SIMHALT             ; halt simulator
000005D8                           911  
000005D8                           912  * Put variables and constants here
000005D8= 48 65 6C 6C 6F 20 ...    913  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000614                           914  
00000614                           915  
00000614                           916  good_code_buffer    DS.B    88
0000066C                           917  
0000066C                           918  bad_code_buffer     DS.B    30
0000068A= 4E 6F 20 45 6E 74 ...    919  no_entry    DC.B    'No Entry detected.',0
0000069D= 42 61 64 20 45 6E ...    920  bad_entry   DC.B    'Bad Entry Dectected.',0
000006B2= 42 61 64 20 43 68 ...    921  bad_char    DC.B    'Bad Char detected.',0
000006C5                           922  *-errors
000006C5                           923  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006C5= 45 6E 74 65 72 20 ...    924  enter_start_AD  DC.B    'Enter a starting address: ',0
000006E0                           925  userStartAddrInput  DS.B    50  address used to store the data input from user
00000712                           926  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000744                           927  
00000744= 45 6E 74 65 72 20 ...    928  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000779                           929  
00000779                           930  userEndInput    DS.B    50  addresse used to store the data input from user
000007AC  43F8 068A                931  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007B0  7001                     932                          MOVE.L  #1,D0
000007B2  4E4F                     933                          TRAP    #15
000007B4                           934                          ;JMP     get_input
000007B4                           935  
000007B4                           936  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007B4                           937  
000007B4                           938      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESSCOUNT        1092
BAD_CHAR            6B2
BAD_CODE_BUFFER     66C
BAD_ENTRY           69D
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         568
DEC_CONVERT         598
ENTER_START_AD      6C5
ERROR_BAD_ENTRY     5CC
ERROR_CHAR          5C4
ERROR_INV_TO_MANY_CHAR  7AC
ERROR_NO_INPUT      5BA
FINISH              4D4
GET_INPUT_END_ADDR  1030
GET_INPUT_START_ADDR  100C
GET_NEXT_INSTRUCTION  10A4
GET_OPCODE          400
GOOD_CODE_BUFFER    614
HEX_COMPARE         578
JMP_TABLE           424
LF                  A
LOWER_ASCII         5AC
LOW_HEX_COMPARE     588
M0000               1180
M0001               118C
M0010               1198
M0011               11AC
M0100               11C4
M0111               11DC
MAINLOOP            107C
MODETABLE           1150
N0000               126E
N0001               1274
N0010               127A
N0011               1280
N0100               1286
N0101               128C
N0110               1292
N0111               1298
N1000               129E
N1001               12A4
N1010               12AA
N1011               12B0
N1100               12B6
N1101               12BC
N1110               12C2
N1111               12C8
NO_ENTRY            68A
NUMTABLE            11EE
OP0001              132A
OP0100              12CE
OPERROR             13BC
PARSE_COMPLETE      5B6
PARSE_EACH          558
PARSE_END           542
PARSE_INPUT         52C
PRINTCODE           1420
PRINT_WORD          10F6
REGISTERPRINT       11E2
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
STORE_SRT_END       105A
UPPER_ASCII         5A2
USEREND             744
USERENDADDRINPUT    712
USERENDINPUT        779
USERSTARTADDRINPUT  6E0
WELCOME_MESSAGE     5D8
WRITE_DATA_IN_D3_TO_BUFFER  10E0
_NOP                12DE
_RTS                1304
