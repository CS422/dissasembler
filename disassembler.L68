00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 12:11:54 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  
00001000                            15  *--- Notes
00001000                            16  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            17  * A4 will be our main pointer to current memory address and current data
00001000                            18  * D3 will be dedicated register to manipulate our data in
00001000                            19  *
00001000                            20  *
00001000                            21  *---------
00001000                            22  START:                  
00001000                            23              ; first instruction of program
00001000                            24              ;LEA     stack,SP
00001000                            25              *-present the hello message
00001000  43F9 000005E8             26              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 27              MOVE.B  #14,D0
0000100A  4E4F                      28              TRAP    #15
0000100C                            29              
0000100C                            30  *           
0000100C                            31  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            32  *
0000100C                            33  ** Put program code here
0000100C                            34  **-----
0000100C                            35  **This program starts by given a starting address and an ending address disassemble
0000100C                            36  **the binary code that is at that location.
0000100C                            37  **
0000100C                            38  **
0000100C                            39  **----
0000100C                            40  *
0000100C                            41  **-------
0000100C                            42  ** Needs to check for odd addressing**
0000100C                            43  **
0000100C                            44  **
0000100C                            45  **-----
0000100C                            46  *                *---------------------I/O SECTION
0000100C                            47  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            48  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            49  *                * statically in memory and retrieved when needed to compare
0000100C                            50  *                * this free's up a adress/data register to use
0000100C                            51  *                *-----------------------
0000100C                            52  *                
0000100C                            53  *                
0000100C                            54  *get_input_start_addr 
0000100C                            55  *                MOVE.L  #0,A3
0000100C                            56  *                CLR     D1
0000100C                            57  *                LEA     enter_start_AD,A1
0000100C                            58  *                MOVE.L  #14,D0
0000100C                            59  *                TRAP    #15
0000100C                            60  *                
0000100C                            61  *                
0000100C                            62  *
0000100C                            63  *      
0000100C                            64  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            65  *                MOVE.L  #2,D0
0000100C                            66  *                TRAP    #15
0000100C                            67  *                JSR     parse_input             parse the starting address
0000100C                            68  *                
0000100C                            69  *                
0000100C                            70  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            71  *                
0000100C                            72  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            73  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            74  *
0000100C                            75  *
0000100C                            76  *get_input_end_addr
0000100C                            77  *                MOVE.L  #0,A3
0000100C                            78  *                CLR     D1
0000100C                            79  *                LEA     userEnd,A1
0000100C                            80  *                MOVE.L  #14,D0
0000100C                            81  *                TRAP    #15
0000100C                            82  *                
0000100C                            83  *
0000100C                            84  *
0000100C                            85  *                LEA     userEndAddrInput,A1
0000100C                            86  *                MOVE.B  userEnd,D1
0000100C                            87  *                MOVE.L  #2,D0
0000100C                            88  *                TRAP    #15
0000100C                            89  *                JSR     parse_end
0000100C                            90  *
0000100C                            91  *                
0000100C                            92  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                            93  *  
0000100C                            94  *             
0000100C                            95  *STORE_SRT_END:
0000100C                            96  *               
0000100C                            97  *                      ;store the starting and ending address into memory out of range
0000100C                            98  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                            99  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           100  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           101  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           102  *            MOVE.L  A5,A4
0000100C                           103              
0000100C                           104              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           105              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           106              *
0000100C  2C3C 00000996            107              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     108              MOVE.L  D6,A5       Move D6 into a5
00001014                           109              
00001014  2C3C 000009CF            110              MOVE.L  #$9CF,D6
0000101A  2C46                     111              MOVE.L  D6,A6
0000101C                           112              
0000101C                           113              
0000101C  23CD 00FFFF00            114              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            115              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     116              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           117              *
0000102A                           118              *
0000102A                           119              *-------------END OF TESING CODE-----------
0000102A                           120          
0000102A  6000 004A                121              BRA get_next_instruction
0000102E                           122                           
0000102E                           123                           
0000102E                           124     
0000102E                           125  *---move_addresses:
0000102E                           126                                  
0000102E                           127                  *-MOVE 2 INTO DATA REG
0000102E                           128                  
0000102E                           129                  ;JSR     LOOP
0000102E                           130                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           131                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           132                  
0000102E                           133                  *----MOVE.W  A4,A0
0000102E                           134                  
0000102E                           135                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           136                  *----MOVE.B  #2,D4
0000102E                           137                  
0000102E                           138                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           139                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           140                  *------MOVE.L  D3,D7
0000102E                           141                  
0000102E                           142  
0000102E                           143  
0000102E                           144  
0000102E                           145                  *------LEA     good_code_buffer,A2 load again
0000102E                           146                  *------JSR     print_d3
0000102E                           147                  
0000102E                           148                  
0000102E                           149                  ;JSR     get_opcode 
0000102E                           150  
0000102E                           151                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           152                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           153                  ;SIMHALT
0000102E                           154  
0000102E                           155  
0000102E                           156  * ---------------------------------------------------------- 
0000102E                           157  * Decode ---------------------------------------------------
0000102E  49F8 7000                158              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 0042                159              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           160       
00001036                           161  mainLoop          
00001036                           162              *-----
00001036                           163              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           164              *- listing of finished and un finished work
00001036                           165              *-          ***Machine Code saved in D6*****
00001036                           166              *-----
00001036                           167  
00001036  E84B                     168              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           169              
00001038                           170              ;compare bits to instructions
00001038                           171              
00001038  B63C 0001                172              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           173              *- Machine code saved in D6
0000103C  6700 04E6                174              BEQ     op0001      ;branch to op0001
00001040                           175              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           176              ;BEQ     op0011      ;branch to op0011
00001040                           177              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           178              ;BEQ     op0010      ;branch to op0010           
00001040  B63C 0007                179              CMP.B   #bin0111,D3 ;MOVEQ
00001044  6700 0F82                180              BEQ     op0111      ;branch to op0111                        
00001048  B63C 0004                181              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
0000104C  6700 047A                182              BEQ     op0100          branch to op0100                        
00001050  B63C 000D                183              CMP.B   #bin1101,D3 ;ADD, ADDA
00001054  6700 069E                184              BEQ     op1101      ;branch to op1101            
00001058  B63C 0009                185              CMP.B   #bin1001,D3 ;SUB, SUBA
0000105C  6700 0B1C                186              BEQ     op1001      ;branch to op1001                        
00001060                           187              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001060                           188              ;BEQ     op0000      ;branch to op0000                       
00001060                           189              ;CMP.B   #bin0101,D3 ;SUBQ
00001060                           190              ;BEQ     op0101      ;branch to op0101                         
00001060                           191              ;CMP.B   #bin0110,D3 ;Bcc
00001060                           192              ;BEQ     op0110      ;branch to op0110            
00001060                           193              ;CMP.B   #bin1000,D3 ;DIVU.W
00001060                           194              ;BEQ     op1000      ;branch to op1000                                      
00001060                           195              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001060                           196              ;BEQ     op1011      ;branch to op1011 
00001060                           197              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001060                           198              ;BEQ     op1100      ;branch to op1100                                    
00001060                           199              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001060                           200              ;BEQ     op1110      ;branch to op1110            
00001060                           201              
00001060  6000 0FDE                202              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001064                           203              
00001064                           204              ;branch to display opError display
00001064                           205              
00001064                           206              ;print all the things...
00001064                           207   *******************************************************************************
00001064                           208  *
00001064                           209  *******************************************************************************
00001064                           210  addressCount 
00001064                           211              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001064                           212              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001064                           213              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001064                           214              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001064                           215              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001064                           216              
00001064  4BF9 00FFFF10            217              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
0000106A  2215                     218              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000106C  2A0C                     219              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000106E  B285                     220              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001070  6F00 F462                221              BLE     FINISH      * branch to end if ending address reached
00001074  4E75                     222              RTS                 * return IF WE HAVE NOT FINISHED
00001076                           223              
00001076                           224  get_next_instruction:
00001076  4EB8 1064                225                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
0000107A                           226                  *-line count
0000107A  4245                     227                  CLR D5             *-CLEAR THIS REGISTER/
0000107C                           228                  
0000107C  45F9 00000624            229                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
00001082  304C                     230                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
00001084  7E02                     231                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
00001086  2608                     232                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001088  2C03                     233                  MOVE.L  D3,D6   
0000108A  45F9 00000624            234                  LEA     good_code_buffer,A2
00001090                           235                                  *-write the current data moved to data register d3
00001090  4EB9 000010B6            236                  JSR     write_data_in_D3_to_buffer
00001096                           237                  
00001096  14BC 0020                238                  MOVE.B  #' ',(A2)
0000109A  14BC 0020                239                  MOVE.B  #' ',(A2)
0000109E  14BC 0020                240                  MOVE.B  #' ',(A2)
000010A2  14BC 0020                241                  MOVE.B  #' ',(A2)
000010A6                           242                  
000010A6  4286                     243                  CLR.L   D6
000010A8  4283                     244                  CLR.L   D3
000010AA                           245                  
000010AA  3A4C                     246                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
000010AC                           247                  
000010AC  3C1C                     248                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010AE                           249                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010AE                           250  
000010AE  2814                     251                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010B0  3606                     252                  MOVE.W  D6,D3
000010B2  E04B                     253                  LSR.W   #8,D3
000010B4                           254                  
000010B4  6080                     255                  BRA     mainLoop
000010B6                           256                  
000010B6                           257  write_data_in_D3_to_buffer:
000010B6                           258              *------
000010B6                           259              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010B6                           260              *
000010B6                           261              *
000010B6                           262              *---------
000010B6  BE7C 0002                263                  CMP.W   #2,D7 ERROR checking
000010BA  6600 0010                264                  BNE     print_word branch off to write the first word of the line
000010BE  4843                     265                  SWAP    D3
000010C0  4846                     266                  SWAP    D6
000010C2  4EB9 000010CC            267                  JSR     print_word
000010C8  4846                     268                  SWAP    D6
000010CA  2606                     269                  MOVE.L  D6,D3
000010CC                           270                  
000010CC                           271   print_word:
000010CC                           272                  *-****
000010CC                           273                  * called 4 times to decode from hex to ascii the first word 
000010CC                           274                  *   using the below jump table
000010CC                           275                  *
000010CC                           276                  *-------
000010CC  E04B                     277                  LSR.W   #8,D3
000010CE  E84B                     278                  LSR.W   #4,D3
000010D0  C6FC 0008                279                  MULU.W  #8,D3
000010D4  4DF9 000013C4            280                  LEA     numTable,A6
000010DA  4EB6 3000                281                  JSR     (A6,D3)
000010DE                           282                  
000010DE  3606                     283                  MOVE.W  D6,D3   COPY DATA
000010E0  E94B                     284                  LSL.W   #4,D3
000010E2  E04B                     285                  LSR.W   #8,D3
000010E4  E84B                     286                  LSR.W   #4,D3
000010E6  C6FC 0008                287                  MULU.W  #8,D3
000010EA  4DF9 000013C4            288                  LEA     numTable,A6
000010F0  4EB6 3000                289                  JSR     (A6,D3)
000010F4                           290                  
000010F4  3606                     291                  MOVE.W  D6,D3
000010F6                           292                  
000010F6  E14B                     293                  LSL.W   #8,D3
000010F8  E04B                     294                  LSR.W   #8,D3
000010FA  E84B                     295                  LSR.W   #4,D3
000010FC  C6FC 0008                296                  MULU.W  #8,D3
00001100  4DF9 000013C4            297                  LEA numTable,A6
00001106  4EB6 3000                298                  JSR     (A6,D3)
0000110A                           299                  
0000110A                           300                  
0000110A  3606                     301                  MOVE.W  D6,D3
0000110C  E94B                     302                  LSL.W   #4,D3
0000110E  E14B                     303                  LSL.W   #8,D3
00001110  E04B                     304                  LSR.W   #8,D3
00001112  E84B                     305                  LSR.W   #4,D3
00001114  C6FC 0008                306                  MULU.W  #8,D3
00001118  4DF9 000013C4            307                  LEA     numTable,A6
0000111E  4EB6 3000                308                  JSR     (A6,D3)
00001122  5805                     309                  ADDI.B  #4,D5
00001124  4E75                     310                  RTS
00001126                           311  * -----------------------------------------------------------            
00001126                           312  * Jump Table immAbTable *************************************
00001126                           313  *** matches the associated Addressing mode     
00001126                           314  *************************************************************
00001126  4EB9 00001152            315  immAbTable  JSR     IA000   ;Absoulute Word
0000112C  4E75                     316              RTS             ;return, done printing
0000112E  4EB9 000011B4            317              JSR     IA001   ;Aboulute Long
00001134  4E75                     318              RTS             ;return, done printing
00001136  4EB9 0000114E            319              JSR     IA010   ;blank
0000113C  4E75                     320              RTS             ;return, done printing
0000113E  4EB9 00001150            321              JSR     IA011   ;blank
00001144  4E75                     322              RTS             ;return, done printing  
00001146  4EB9 00001274            323              JSR     IA100   ;immediate Data
0000114C  4E75                     324              RTS             ;return, done printing
0000114E                           325  * -----------------------------------------------------------            
0000114E  4E75                     326  IA010       RTS
00001150  4E75                     327  IA011       RTS
00001152                           328  * -----------------------------------------------------------            
00001152                           329  * Subroutine IA000   ------------------------------------------
00001152                           330  IA000                               ;absoulteWord   
00001152  14FC 0024                331              MOVE.B  #'$',(A2)+ 
00001156  E08C                     332              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001158  E08C                     333              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000115A                           334              *4MSB   X***
0000115A  4241                     335              CLR     D1
0000115C  3204                     336              MOVE.W  D4,D1       X***
0000115E  E049                     337              LSR.W   #8,D1       00X*
00001160  E849                     338              LSR.W   #4,D1       000X
00001162  4FF9 000013C4            339              LEA     numTable ,A7 Load the table into A7
00001168  C2FC 0008                340              MULU    #8,D1
0000116C  4EB7 1000                341              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001170                           342              *next 4MSB  *X**
00001170  4241                     343              CLR     D1
00001172  3204                     344              MOVE.W  D4,D1       *X**
00001174  E949                     345              LSL.W   #4,D1       X**0        
00001176  E049                     346              LSR.W   #8,D1       00X*
00001178  E849                     347              LSR.W   #4,D1       000X
0000117A  4FF9 000013C4            348              LEA     numTable ,A7 Load the table into A7
00001180  C2FC 0008                349              MULU    #8,D1
00001184  4EB7 1000                350              JSR     (A7,D1)     Jump to subroutine of value at D1
00001188                           351              *next 4MSB  **X*
00001188  4241                     352              CLR     D1
0000118A  1204                     353              MOVE.B  D4,D1       00X*
0000118C  E809                     354              LSR.B   #4,D1       000X
0000118E  4FF9 000013C4            355              LEA     numTable ,A7 Load the table into A7
00001194  C2FC 0008                356                          MULU    #8,D1
00001198  4EB7 1000                357              JSR     (A7,D1)     Jump to subroutine of value at D1
0000119C                           358              *last 4  bits   ***X
0000119C  4241                     359              CLR     D1
0000119E  1204                     360              MOVE.B  D4,D1       00*X
000011A0  E909                     361              LSL.B   #4,D1       00X0    
000011A2  E809                     362              LSR.B   #4,D1       000X
000011A4  4FF9 000013C4            363              LEA     numTable ,A7 Load the table into A7
000011AA  C2FC 0008                364                          MULU    #8,D1
000011AE  4EB7 1000                365              JSR     (A7,D1)     Jump to subroutine of value at D1
000011B2  4E75                     366              RTS           
000011B4                           367  * -----------------------------------------------------------            
000011B4                           368  * Subroutine IA001   ------------------------------------------
000011B4                           369  IA001                               ;absoulteLong
000011B4  4241                     370              CLR     D1
000011B6  4242                     371              CLR     D2 
000011B8  14FC 0024                372              MOVE.B  #'$',(A2)+ 
000011BC  2404                     373              MOVE.L  D4,D2       D2 will be used for later
000011BE                           374  *----------- first Word Value D4
000011BE  E08C                     375              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011C0  E08C                     376              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011C2                           377              *4MSB   X***
000011C2  4241                     378              CLR     D1
000011C4  3204                     379              MOVE.W  D4,D1       X***
000011C6  E049                     380              LSR.W   #8,D1       00X*
000011C8  E849                     381              LSR.W   #4,D1       000X
000011CA  4FF9 000013C4            382              LEA     numTable ,A7 Load the table into A7
000011D0  C2FC 0008                383              MULU    #8,D1
000011D4  4EB7 1000                384              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011D8                           385              *next 4MSB  *X**
000011D8  4241                     386              CLR     D1
000011DA  3204                     387              MOVE.W  D4,D1       *X**
000011DC  E949                     388              LSL.W   #4,D1       X**0        
000011DE  E049                     389              LSR.W   #8,D1       00X*
000011E0  E849                     390              LSR.W   #4,D1       000X
000011E2  4FF9 000013C4            391              LEA     numTable ,A7 Load the table into A7
000011E8  C2FC 0008                392              MULU    #8,D1
000011EC  4EB7 1000                393              JSR     (A7,D1)     Jump to subroutine of value at D1
000011F0                           394              *next 4MSB  **X*
000011F0  4241                     395              CLR     D1
000011F2  1204                     396              MOVE.B  D4,D1       00X*
000011F4  E809                     397              LSR.B   #4,D1       000X
000011F6  4FF9 000013C4            398              LEA     numTable ,A7 Load the table into A7
000011FC  C2FC 0008                399              MULU    #8,D1
00001200  4EB7 1000                400              JSR     (A7,D1)     Jump to subroutine of value at D1
00001204                           401              *last 4  bits   ***X
00001204  4241                     402              CLR     D1
00001206  1204                     403              MOVE.B  D4,D1       00*X
00001208  E909                     404              LSL.B   #4,D1       00X0    
0000120A  E809                     405              LSR.B   #4,D1       000X
0000120C  4FF9 000013C4            406              LEA     numTable ,A7 Load the table into A7
00001212  C2FC 0008                407              MULU    #8,D1
00001216  4EB7 1000                408              JSR     (A7,D1)     Jump to subroutine of value at D1
0000121A                           409  *---------  Second Word Value D2    **** XXXX
0000121A                           410              *4MSB   X***
0000121A  4241                     411              CLR     D1
0000121C  3202                     412              MOVE.W  D2,D1
0000121E  E049                     413              LSR.W   #8,D1            00X*
00001220  E849                     414              LSR.W   #4,D1            000X
00001222  C2FC 0008                415              MULU    #8,D1
00001226  4FF9 000013C4            416              LEA     numTable ,A7 Load the table into A7
0000122C  4EB7 1000                417              JSR     (A7,D1)     Jump to subroutine of value at D1
00001230                           418              *next 4MSB  *X**
00001230  4241                     419              CLR     D1
00001232  3202                     420              MOVE.W  D2,D1
00001234  E949                     421              LSL.W   #4,D1       X**0
00001236  E049                     422              LSR.W   #8,D1       00X*
00001238  E809                     423              LSR.B   #4,D1       000X
0000123A  C2FC 0008                424              MULU    #8,D1
0000123E  4FF9 000013C4            425              LEA     numTable ,A7 Load the table into A7
00001244  4EB7 1000                426              JSR     (A7,D1)     Jump to subroutine of value at D1
00001248                           427              *next 4MSB  **X*
00001248  4241                     428              CLR     D1
0000124A  1202                     429              MOVE.B  D2,D1       00X*
0000124C  E809                     430              LSR.B   #4,D1       000X
0000124E  C2FC 0008                431              MULU    #8,D1
00001252  4FF9 000013C4            432              LEA     numTable ,A7 Load the table into A7
00001258  4EB7 1000                433              JSR     (A7,D1)     Jump to subroutine of value at D1
0000125C                           434              *next 4MSB  ***X
0000125C  4241                     435              CLR     D1
0000125E  1202                     436              MOVE.B  D2,D1       00*X
00001260  E909                     437              LSL.B   #4,D1       00X0
00001262  E809                     438              LSR.B   #4,D1       000X
00001264  C2FC 0008                439              MULU    #8,D1
00001268  4FF9 000013C4            440              LEA     numTable ,A7 Load the table into A7
0000126E  4EB7 1000                441              JSR     (A7,D1)     Jump to subroutine of value at D1
00001272                           442             
00001272  4E75                     443              RTS
00001274                           444   
00001274                           445  * -----------------------------------------------------------            
00001274                           446  * Subroutine IA100   ------------------------------------------
00001274                           447  IA100                               ;immediateData
00001274                           448  
00001274  14FC 0023                449              MOVE.B  #'#',(A2)+ 
00001278  14FC 0024                450              MOVE.B  #'$',(A2)+
0000127C  381D                     451              MOVE.W  (A5)+,D4    WE got the address for the operand
0000127E  3815                     452              MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001280                           453              *4MSB   00X*
00001280  4242                     454              CLR     D2
00001282  1404                     455              MOVE.B  D4,D2       00X*
00001284  E80A                     456              LSR.B   #4,D2       000X
00001286  C4FC 0008                457              MULU    #8,D2   
0000128A  4FF9 000013C4            458              LEA     numTable ,A7 Load the table into A7
00001290  4EB7 2000                459              JSR     (A7,D2)     Jump to subroutine of value at D2
00001294                           460              *last 4bits 00*X
00001294  4242                     461              CLR     D2
00001296  1404                     462              MOVE.B  D4,D2       00*X
00001298  E90A                     463              LSL.B   #4,D2       00X*
0000129A  E80A                     464              LSR.B   #4,D2       000X
0000129C  C4FC 0008                465              MULU    #8,D2   
000012A0                           466             
000012A0  4EB7 2000                467              JSR     (A7,D2)     Jump to subroutine of value at D2
000012A4                           468  
000012A4  4E75                     469              RTS
000012A6                           470  
000012A6                           471                            
000012A6                           472  * -----------------------------------------------------------            
000012A6                           473  * Jump Table modeTable ***************************************
000012A6                           474  *** matches the associated Addressing mode     
000012A6                           475  *************************************************************
000012A6  4EB9 000012E6            476  modeTable   JSR     M0000   ;Dn, Data Register 
000012AC  4E75                     477              RTS             ;return, done printing
000012AE  4EB9 000012F2            478              JSR     M0001   ;An, Address Register 
000012B4  4E75                     479              RTS             ;return, done printing
000012B6  4EB9 000012FE            480              JSR     M0010   ;(An), Address
000012BC  4E75                     481              RTS             ;return, done printing
000012BE  4EB9 00001312            482              JSR     M0011   ;(An)+, Address with Postincrement
000012C4  4E75                     483              RTS             ;return, done printing
000012C6                           484              
000012C6  4EB9 0000132A            485              JSR     M0100   ;-(An), Address with Predecrement
000012CC  4E75                     486              RTS             ;return, done printing
000012CE  4EB9 00001342            487              JSR     M0101   ; blank - not assigned for this project
000012D4  4E75                     488              RTS
000012D6  4EB9 00001344            489              JSR     M0110   ; blank - not assigned for this project
000012DC  4E75                     490              RTS
000012DE  4EB9 00001346            491              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012E4  4E75                     492              RTS             ;return, done printing           
000012E6                           493  * -----------------------------------------------------------            
000012E6                           494  * Subroutine M0000 ------------------------------------------
000012E6                           495  M0000                               ;Dn
000012E6  14FC 0044                496              MOVE.B  #'D',(A2)+      ;display D
000012EA  264A                     497              MOVEA.L A2,A3           ;get address for n
000012EC  14FC 0020                498              MOVE.B  #' ',(A2)+      ;blank
000012F0  4E75                     499              RTS
000012F2                           500  
000012F2                           501  * -----------------------------------------------------------            
000012F2                           502  * Subroutine M0001 ------------------------------------------
000012F2                           503  M0001                               ;An
000012F2  14FC 0041                504              MOVE.B  #'A',(A2)+      ;display A
000012F6  264A                     505              MOVEA.L A2,A3           ;get address for n
000012F8  14FC 0020                506              MOVE.B  #' ',(A2)+      ;blank
000012FC  4E75                     507              RTS
000012FE                           508  
000012FE                           509  * -----------------------------------------------------------            
000012FE                           510  * Subroutine M0010 ------------------------------------------
000012FE                           511  M0010                               ;(An) Address
000012FE  14FC 0028                512              MOVE.B  #'(',(A2)+      ;display (
00001302  14FC 0041                513              MOVE.B  #'A',(A2)+      ;display A
00001306  264A                     514              MOVEA.L A2,A3           ;get address for n
00001308  14FC 0020                515              MOVE.B  #' ',(A2)+      ;blank      
0000130C  14FC 0029                516              MOVE.B  #')',(A2)+      ;display )
00001310  4E75                     517              RTS
00001312                           518   
00001312                           519  * -----------------------------------------------------------            
00001312                           520  * Subroutine M0011 ------------------------------------------
00001312                           521  M0011                               ;(An)+ 
00001312  14FC 0028                522              MOVE.B  #'(',(A2)+      ;display (
00001316  14FC 0041                523              MOVE.B  #'A',(A2)+      ;display A
0000131A  264A                     524              MOVEA.L A2,A3           ;get address for n 
0000131C  14FC 0020                525              MOVE.B  #' ',(A2)+      ;blank     
00001320  14FC 0029                526              MOVE.B  #')',(A2)+      ;display )
00001324  14FC 002B                527              MOVE.B  #'+',(A2)+      ;display +
00001328  4E75                     528              RTS
0000132A                           529  
0000132A                           530  * -----------------------------------------------------------            
0000132A                           531  * Subroutine M0100 ------------------------------------------
0000132A                           532  M0100                               ;-(An)
0000132A  14FC 002D                533              MOVE.B  #'-',(A2)+      ;display -
0000132E  14FC 0028                534              MOVE.B  #'(',(A2)+      ;display (
00001332  14FC 0041                535              MOVE.B  #'A',(A2)+      ;display A
00001336  264A                     536              MOVEA.L A2,A3           ;get address for n
00001338  14FC 0020                537              MOVE.B  #' ',(A2)+      ;blank      
0000133C  14FC 0029                538              MOVE.B  #')',(A2)+      ;display )
00001340  4E75                     539              RTS
00001342                           540  
00001342                           541  * -----------------------------------------------------------    
00001342                           542  * Subroutine M0101 ------------------------------------------
00001342                           543  M0101                               ;do nothing
00001342  4E75                     544              RTS
00001344                           545  * -----------------------------------------------------------   
00001344                           546  * Subroutine M0110 ------------------------------------------
00001344                           547  M0110                               ;do nothing
00001344  4E75                     548              RTS
00001346                           549  * -----------------------------------------------------------     
00001346                           550  * Subroutine M0111 -------------------------Not finished-----
00001346                           551  * Register is stored at D1
00001346                           552  * ----case 1 : Register 100 => #imm => #XX 3 spaces
00001346                           553  * ----case 2 : Register 000 => (XXX).W => 
00001346                           554  * ----case 3 : Register 001 => (XXX).L
00001346                           555  * 
00001346                           556  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001346                           557  
00001346                           558  M0111                               ;(xxx).W, (xxx).L, #imm
00001346                           559                                      ; This will be taken care under opcode subroutine
00001346  4E75                     560              RTS
00001348                           561  
00001348                           562  * -----------------------------------------------------------
00001348                           563  * Subroutine immediateData 
00001348                           564  ;immediateData     
00001348                           565  ;            RTS
00001348                           566  * -----------------------------------------------------------
00001348                           567  
00001348                           568  * Subroutine registerPrint----------------------------------- 
00001348                           569  registerPrint
00001348  4FF9 000013C4            570              LEA     numTable,A7 Load the table into A7
0000134E  4EB7 1000                571              JSR     (A7,D1)     Jump to numTable with value at D1
00001352  4E75                     572              RTS
00001354                           573  
00001354                           574  * -----------------------------------------------------------            
00001354                           575  * Jump Table regNumTable ***************************************
00001354                           576  *** prints the associated number of the register            *
00001354                           577  *** Also prints hex values for data and addresses           *
00001354                           578  *-----see below for decoding of what these sub-routines are
00001354                           579  *************************************************************
00001354  4EB9 00001394            580  regNumTable JSR     RN0000   ;register 0
0000135A  4E75                     581              RTS             ;return, done printing
0000135C  4EB9 0000139A            582              JSR     RN0001   ;register 1
00001362  4E75                     583              RTS             ;return, done printing
00001364  4EB9 000013A0            584              JSR     RN0010   ;register 2
0000136A  4E75                     585              RTS             ;return, done printing
0000136C  4EB9 000013A6            586              JSR     RN0011   ;register 3
00001372  4E75                     587              RTS             ;return, done printing
00001374  4EB9 000013AC            588              JSR     RN0100   ;register 4
0000137A  4E75                     589              RTS             ;return, done printing
0000137C  4EB9 000013B2            590              JSR     RN0101   ;register 5
00001382  4E75                     591              RTS             ;return, done printing
00001384  4EB9 000013B8            592              JSR     RN0110   ;register 6
0000138A  4E75                     593              RTS             ;return, done printing
0000138C  4EB9 000013BE            594              JSR     RN0111   ;register 7
00001392  4E75                     595              RTS             ;return, done printing
00001394                           596  * -----------------------------------------------------------            
00001394                           597  * Subroutine RN0000 ------------------------------------------
00001394                           598  RN0000
00001394  16BC 0030                599              MOVE.B  #'0',(A3)      ;display 0
00001398  4E75                     600              RTS
0000139A                           601  
0000139A                           602  * -----------------------------------------------------------            
0000139A                           603  * Subroutine RN0001 ------------------------------------------
0000139A                           604  RN0001
0000139A  16BC 0031                605              MOVE.B  #'1',(A3)      ;display 1
0000139E  4E75                     606              RTS
000013A0                           607  
000013A0                           608  * -----------------------------------------------------------            
000013A0                           609  * Subroutine RN0010 ------------------------------------------
000013A0                           610  RN0010
000013A0  16BC 0032                611              MOVE.B  #'2',(A3)      ;display 2
000013A4  4E75                     612              RTS
000013A6                           613   
000013A6                           614  * -----------------------------------------------------------            
000013A6                           615  * Subroutine RN0011 ------------------------------------------
000013A6                           616  RN0011
000013A6  16BC 0033                617              MOVE.B  #'3',(A3)      ;display 3
000013AA  4E75                     618              RTS
000013AC                           619  
000013AC                           620  * -----------------------------------------------------------            
000013AC                           621  * Subroutine RN0100 ------------------------------------------
000013AC                           622  RN0100
000013AC  16BC 0034                623              MOVE.B  #'4',(A3)      ;display 4
000013B0  4E75                     624              RTS
000013B2                           625  
000013B2                           626  * -----------------------------------------------------------            
000013B2                           627  * Subroutine RN0101 ------------------------------------------
000013B2                           628  RN0101
000013B2  16BC 0035                629              MOVE.B  #'5',(A3)      ;display 5
000013B6  4E75                     630              RTS
000013B8                           631  
000013B8                           632  * -----------------------------------------------------------            
000013B8                           633  * Subroutine RN0110 ------------------------------------------
000013B8                           634  RN0110
000013B8  16BC 0036                635              MOVE.B  #'6',(A3)      ;display 6
000013BC  4E75                     636              RTS
000013BE                           637              
000013BE                           638  * -----------------------------------------------------------            
000013BE                           639  * Subroutine RN0111 ------------------------------------------
000013BE                           640  RN0111
000013BE  16BC 0037                641              MOVE.B  #'7',(A3)      ;display 7
000013C2  4E75                     642              RTS
000013C4                           643  
000013C4                           644  * -----------------------------------------------------------            
000013C4                           645  * Jump Table numTable ***************************************
000013C4                           646  *** prints the associated number of the register            *
000013C4                           647  *** Also prints hex values for data and addresses           *
000013C4                           648  *-----see below for decoding of what these sub-routines are
000013C4                           649  *************************************************************
000013C4  4EB9 00001444            650  numTable    JSR     N0000   ;register 0
000013CA  4E75                     651              RTS             ;return, done printing
000013CC  4EB9 0000144A            652              JSR     N0001   ;register 1
000013D2  4E75                     653              RTS             ;return, done printing
000013D4  4EB9 00001450            654              JSR     N0010   ;register 2
000013DA  4E75                     655              RTS             ;return, done printing
000013DC  4EB9 00001456            656              JSR     N0011   ;register 3
000013E2  4E75                     657              RTS             ;return, done printing
000013E4  4EB9 0000145C            658              JSR     N0100   ;register 4
000013EA  4E75                     659              RTS             ;return, done printing
000013EC  4EB9 00001462            660              JSR     N0101   ;register 5
000013F2  4E75                     661              RTS             ;return, done printing
000013F4  4EB9 00001468            662              JSR     N0110   ;register 6
000013FA  4E75                     663              RTS             ;return, done printing
000013FC  4EB9 0000146E            664              JSR     N0111   ;register 7
00001402  4E75                     665              RTS             ;return, done printing
00001404  4EB9 00001474            666              JSR     N1000   ;num 8
0000140A  4E75                     667              RTS             ;return, done printing
0000140C  4EB9 0000147A            668              JSR     N1001   ;num 9
00001412  4E75                     669              RTS             ;return, done printing
00001414  4EB9 00001480            670              JSR     N1010   ;num A
0000141A  4E75                     671              RTS             ;return, done printing
0000141C  4EB9 00001486            672              JSR     N1011   ;num B
00001422  4E75                     673              RTS             ;return, done printing
00001424  4EB9 0000148C            674              JSR     N1100   ;num C
0000142A  4E75                     675              RTS             ;return, done printing
0000142C  4EB9 00001492            676              JSR     N1101   ;num D
00001432  4E75                     677              RTS             ;return, done printing
00001434  4EB9 00001498            678              JSR     N1110   ;num E
0000143A  4E75                     679              RTS             ;return, done printing
0000143C  4EB9 0000149E            680              JSR     N1111   ;num F
00001442  4E75                     681              RTS             ;return, done printing
00001444                           682  * -----------------------------------------------------------            
00001444                           683  * Subroutine N0000 ------------------------------------------
00001444                           684  N0000
00001444  14FC 0030                685              MOVE.B  #'0',(A2)+      ;display 0
00001448  4E75                     686              RTS
0000144A                           687  
0000144A                           688  * -----------------------------------------------------------            
0000144A                           689  * Subroutine N0001 ------------------------------------------
0000144A                           690  N0001
0000144A  14FC 0031                691              MOVE.B  #'1',(A2)+      ;display 1
0000144E  4E75                     692              RTS
00001450                           693  
00001450                           694  * -----------------------------------------------------------            
00001450                           695  * Subroutine N0010 ------------------------------------------
00001450                           696  N0010
00001450  14FC 0032                697              MOVE.B  #'2',(A2)+      ;display 2
00001454  4E75                     698              RTS
00001456                           699   
00001456                           700  * -----------------------------------------------------------            
00001456                           701  * Subroutine N0011 ------------------------------------------
00001456                           702  N0011
00001456  14FC 0033                703              MOVE.B  #'3',(A2)+      ;display 3
0000145A  4E75                     704              RTS
0000145C                           705  
0000145C                           706  * -----------------------------------------------------------            
0000145C                           707  * Subroutine N0100 ------------------------------------------
0000145C                           708  N0100
0000145C  14FC 0034                709              MOVE.B  #'4',(A2)+      ;display 4
00001460  4E75                     710              RTS
00001462                           711  
00001462                           712  * -----------------------------------------------------------            
00001462                           713  * Subroutine N0101 ------------------------------------------
00001462                           714  N0101
00001462  14FC 0035                715              MOVE.B  #'5',(A2)+      ;display 5
00001466  4E75                     716              RTS
00001468                           717  
00001468                           718  * -----------------------------------------------------------            
00001468                           719  * Subroutine N0110 ------------------------------------------
00001468                           720  N0110
00001468  14FC 0036                721              MOVE.B  #'6',(A2)+      ;display 6
0000146C  4E75                     722              RTS
0000146E                           723              
0000146E                           724  * -----------------------------------------------------------            
0000146E                           725  * Subroutine N0111 ------------------------------------------
0000146E                           726  N0111
0000146E  14FC 0037                727              MOVE.B  #'7',(A2)+      ;display 7
00001472  4E75                     728              RTS
00001474                           729  
00001474                           730  * ----------------------------------------------------------- 
00001474                           731  * Subroutine N1000 ------------------------------------------
00001474                           732  N1000       
00001474  14FC 0038                733              MOVE.B  #'8',(A2)+      ;display 8
00001478  4E75                     734              RTS
0000147A                           735  
0000147A                           736  * -----------------------------------------------------------            
0000147A                           737  * Subroutine N1001 ------------------------------------------
0000147A                           738  N1001   
0000147A  14FC 0039                739              MOVE.B  #'9',(A2)+      ;display 9
0000147E  4E75                     740              RTS
00001480                           741  
00001480                           742  * -----------------------------------------------------------            
00001480                           743  * Subroutine N1010 ------------------------------------------
00001480                           744  N1010   
00001480  14FC 0041                745              MOVE.B  #'A',(A2)+      ;display A
00001484  4E75                     746              RTS
00001486                           747  
00001486                           748  * -----------------------------------------------------------            
00001486                           749  * Subroutine N1011 ------------------------------------------
00001486                           750  N1011   
00001486  14FC 0042                751              MOVE.B  #'B',(A2)+      ;display B
0000148A  4E75                     752              RTS
0000148C                           753  
0000148C                           754  * -----------------------------------------------------------            
0000148C                           755  * Subroutine N1100 ------------------------------------------
0000148C                           756  N1100   
0000148C  14FC 0043                757              MOVE.B  #'C',(A2)+      ;display C
00001490  4E75                     758              RTS
00001492                           759  
00001492                           760  * -----------------------------------------------------------            
00001492                           761  * Subroutine N1101 ------------------------------------------
00001492                           762  N1101   
00001492  14FC 0044                763              MOVE.B  #'D',(A2)+      ;display D
00001496  4E75                     764              RTS
00001498                           765  
00001498                           766  * -----------------------------------------------------------            
00001498                           767  * Subroutine N1110 ------------------------------------------
00001498                           768  N1110   
00001498  14FC 0045                769              MOVE.B  #'E',(A2)+      ;display E
0000149C  4E75                     770              RTS
0000149E                           771  
0000149E                           772  * -----------------------------------------------------------            
0000149E                           773  * Subroutine N1111 ------------------------------------------
0000149E                           774  N1111   
0000149E  14FC 0046                775              MOVE.B  #'F',(A2)+      ;display F
000014A2  4E75                     776              RTS   
000014A4                           777  *-------------------- HELPER FUCNTION LOCATION -----------
000014A4                           778  *- For Mode always D2
000014A4                           779  *-- For Register always D1
000014A4                           780  *-  Original Machine code In D6
000014A4                           781  
000014A4                           782  
000014A4                           783  *            HELPER LOCATION
000014A4                           784  *            HELPER LOCATION
000014A4                           785  *            HELPER LOCATION
000014A4                           786  *            HELPER LOCATION
000014A4                           787  *            HELPER LOCATION
000014A4                           788  
000014A4                           789  get_0_3_bit
000014A4                           790      
000014A4                           791  
000014A4                           792  get_3_5bit
000014A4                           793  *------------------------------------------------------------
000014A4                           794  * MachineCode: 0001 **** **** **BI T***
000014A4                           795  * Only next last 3 bits which is stored at D0 => Source Address mode
000014A4  4242                     796              CLR     D2
000014A6  4241                     797              CLR     D1
000014A8  1406                     798              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000014AA  E50A                     799              LSL.B   #2,D2       **** **** BIT* **00
000014AC  EA0A                     800              LSR.B   #5,D2       **** **** 0000 0BIT
000014AE  4E75                     801              RTS
000014B0                           802              *------------------------------------------------------------
000014B0                           803  
000014B0                           804  
000014B0                           805  *-----------------------FUNCTION word or Long --------------
000014B0                           806  *----------Used to decipher if we are decoding a word or long
000014B0                           807  *-  This subroutine determines f the operations is a word or a long, 
000014B0                           808  *- we use the AND operator to clear out everything except for the 
000014B0                           809  *-3 bit which will be found in D3, we play with our data in D3
000014B0                           810  *-the word or LONG can be found in the OPCODE FIELD which is 
000014B0                           811  *-bits 8 _6
000014B0                           812  
000014B0                           813  WordOrLong  
000014B0                           814          *-find this OPMODE          
000014B0  4283                     815          CLR.L   D3
000014B2  3606                     816          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
000014B4                           817          *-we will store this in D3
000014B4                           818          *-using a shortcut the AND operator
000014B4                           819          *-we need these bits
000014B4                           820          *-[**** XXXX X[XXX] ****]
000014B4                           821              *- starts repersenting bits we do not need
000014B4                           822              *-shortcut we do not need to shift as much
000014B4                           823              *-minor optimization
000014B4                           824              *-AND F to keep 0 to throw away
000014B4  C67C 0FF0                825          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
000014B8  EC4B                     826          LSR.W   #6,D3
000014BA                           827          *- now weneed to get the last 3 bits
000014BA                           828          *-shift to the right by 6 makes the last 3 bits in the 
000014BA                           829          *-byte postion
000014BA                           830          *-[**** **** XXXX X[XXX]]m we need to clear everything else
000014BA  C67C 000F                831          AND.W   #$000F,D3 clear everything except the last byte we need
000014BE  E34B                     832          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
000014C0                           833          *-make sure everyhting is clearn except the last byte
000014C0  C67C 000F                834          AND.W   #$000F,D3
000014C4                           835          *-Shift back by 1 bit to the right
000014C4  E24B                     836          LSR.W   #1,D3
000014C6  4E75                     837          RTS 
000014C8                           838          
000014C8                           839              
000014C8                           840              
000014C8                           841              
000014C8                           842              
000014C8                           843              *---------------------------------------------------------------
000014C8                           844              *--------------------------------------------------------
000014C8                           845              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000014C8                           846              *-------------------------------------
000014C8                           847              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000014C8                           848  op0100      
000014C8                           849  
000014C8                           850  
000014C8                           851   
000014C8                           852              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000014C8                           853              ;BEQ     jumpToRt            
000014C8                           854              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000014C8                           855              ;BEQ     returnRt 
000014C8                           856             
000014C8                           857              ;JSR     WorL        
000014C8                           858              ;CMP.B   #hex7,D3    ;see if it's a LEA
000014C8                           859              ;BEQ     _lea        ;branch 
000014C8                           860              
000014C8                           861              ;JSR     clrORmm       
000014C8                           862              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000014C8                           863              ;BEQ     _clrB       ;branch             
000014C8                           864              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000014C8                           865              ;BEQ     _clrW       ;branch   
000014C8                           866              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000014C8                           867              ;BEQ     _clrL       ;branch
000014C8                           868    
000014C8                           869              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000014C8                           870              ;BEQ     _movemW     ;branch   
000014C8                           871              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000014C8                           872              ;BEQ     _movemL     ;branch              
000014C8                           873                          
000014C8                           874              ;BRA     opError     ;bad opcode branch to error
000014C8                           875              
000014C8                           876              
000014C8  BC7C 4E71                877              CMP.W   #$4E71,D6
000014CC  6700 000A                878              BEQ     _NOP
000014D0                           879              
000014D0  BC7C 4E75                880              CMP.W   #$4E75,D6   ;see if it's a RTS
000014D4  6700 0028                881              BEQ     _RTS        branch to RTS
000014D8                           882             
000014D8                           883  
000014D8                           884              
000014D8                           885  _NOP
000014D8  7E02                     886              MOVE.L  #2,D7       ;data is not error
000014DA  14FC 0020                887              MOVE.B  #' ',(A2)+      ;print spaces
000014DE  14FC 0020                888              MOVE.B  #' ',(A2)+      ;print spaces
000014E2  14FC 0020                889              MOVE.B  #' ',(A2)+      ;print spaces
000014E6  14FC 0020                890              MOVE.B  #' ',(A2)+      ;print spaces
000014EA  14FC 004E                891              MOVE.B  #'N',(A2)+      ;print N
000014EE  14FC 004F                892              MOVE.B  #'O',(A2)+      ;print O
000014F2  14FC 0050                893              MOVE.B  #'P',(A2)+      ;print P
000014F6  1A3C 0003                894              MOVE.B  #3,D5           ;counter for output
000014FA  6000 0BA8                895              BRA     printCode
000014FE                           896  
000014FE                           897  _RTS    
000014FE  7E02                     898              MOVE.L  #2,D7       ;data is not error
00001500  14FC 0020                899              MOVE.B  #' ',(A2)+      ;print spaces
00001504  14FC 0020                900              MOVE.B  #' ',(A2)+      ;print spaces
00001508  14FC 0020                901              MOVE.B  #' ',(A2)+      ;print spaces
0000150C  14FC 0020                902              MOVE.B  #' ',(A2)+      ;print spaces
00001510  14FC 0052                903              MOVE.B  #'R',(A2)+      ;print R
00001514  14FC 0054                904              MOVE.B  #'T',(A2)+      ;print T
00001518  14FC 0053                905              MOVE.B  #'S',(A2)+      ;print S
0000151C  1A3C 0003                906              MOVE.B  #3,D5           ;counter for output
00001520  6000 0B82                907              BRA     printCode
00001520  6000 0B82                908  -------------------- end include --------------------
00001524                           909              INCLUDE 'op0001.x68'    MOVE.b Differetn file
00001524                           910  
00001524                           911  
00001524                           912  
00001524                           913  
00001524                           914  op0001
00001524  7E02                     915              MOVE.L  #2,D7       ;data is not error
00001526  14FC 0020                916              MOVE.B  #' ',(A2)+      ;print spaces
0000152A  14FC 0020                917              MOVE.B  #' ',(A2)+      ;print spaces
0000152E  14FC 0020                918              MOVE.B  #' ',(A2)+      ;print spaces
00001532  14FC 0020                919              MOVE.B  #' ',(A2)+      ;print spaces
00001536  14FC 004D                920              MOVE.B  #'M',(A2)+      ;print M
0000153A  14FC 004F                921              MOVE.B  #'O',(A2)+      ;print O
0000153E  14FC 0056                922              MOVE.B  #'V',(A2)+      ;print V
00001542  14FC 0045                923              MOVE.B  #'E',(A2)+      PRINT  E
00001546  14FC 002E                924              MOVE.B  #'.',(A2)+
0000154A  14FC 0042                925              MOVE.B  #'B',(A2)+
0000154E  14FC 0020                926              MOVE.B  #' ',(A2)+   
00001552  4242                     927              CLR     D2
00001554  4241                     928              CLR     D1
00001556  1406                     929              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001558  E50A                     930              LSL.B   #2,D2       **** **** BIT* **00
0000155A  EA0A                     931              LSR.B   #5,D2       **** **** 0000 0BIT
0000155C  1002                     932              MOVE.B  D2,D0
0000155E  C0FC 0008                933              MULU    #8,D0       value adjusted for jumping
00001562  4DF8 12A6                934              LEA     modeTable,A6 Load the table into A6
00001566  4EB6 0000                935              JSR     (A6,D0)     Jump to subroutine of value at D0
0000156A                           936              
0000156A  1206                     937              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000156C  EB09                     938              LSL.B   #5,D1       **** **** BIT0 0000
0000156E  EA09                     939              LSR.B   #5,D1       **** **** 0000 0BIT
00001570  1001                     940              MOVE.B  D1,D0      
00001572  C0FC 0008                941              MULU    #8,D0       value adjusted for jumping
00001576  4FF8 1354                942              LEA     regNumTable ,A7 Load the table into A7
0000157A  4EB7 0000                943              JSR     (A7,D0)     Jump to subroutine of value at D1
0000157E  4FF8 1126                944              LEA     immAbTable, A7
00001582  C2FC 0008                945              MULU    #8,D1
00001586  4EB7 1000                946              JSR     (A7,D1)    
0000158A                           947  
0000158A                           948  
0000158A  14FC 002C                949              MOVE.B  #',',(A2)+  comma between operands
0000158E  4242                     950              CLR     D2
00001590  4241                     951              CLR     D1
00001592  3406                     952              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001594  EF4A                     953              LSL.W   #7,D2       BIT* **** **** 0000
00001596  E04A                     954              LSR.W   #8,D2       0000 0000 BIT* ****
00001598  EA4A                     955              LSR.W   #5,D2       0000 0000 0000 0BIT 
0000159A  C4FC 0008                956              MULU    #8,D2       value adjusted for jumping
0000159E  4DF8 12A6                957              LEA     modeTable,A6 Load the table into A6
000015A2  4EB6 2000                958              JSR     (A6,D2)     Jump to subroutine of value at D2
000015A6                           959             
000015A6  3206                     960              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000015A8  E949                     961              LSL.W   #4,D1       BIT* **** **** 0000
000015AA  E049                     962              LSR.W   #8,D1       0000 0000 BIT* ****
000015AC  EA49                     963              LSR.W   #5,D1       0000 0000 0000 0BIT     
000015AE  C2FC 0008                964              MULU    #8,D1       value adjusted for jumping
000015B2  4FF8 1354                965              LEA     regNumTable ,A7 Load the table into A7
000015B6  4EB7 1000                966              JSR     (A7,D1)     Jump to subroutine of value at D1    
000015BA  6000 0AE8                967              BRA     printCode
000015BE                           968  immediateData
000015BE  14FC 0023                969              MOVE.B  #'#',(A2)+ 
000015C2  381D                     970              MOVE.W  (A5)+,D4    WE got the address for the operand
000015C4  3815                     971              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000015C6                           972              *4MSB   00X*
000015C6  4242                     973              CLR     D2
000015C8  1404                     974              MOVE.B  D4,D2       00X*
000015CA  E80A                     975              LSR.B   #4,D2       000X
000015CC  C4FC 0008                976              MULU    #8,D2   
000015D0  4FF8 13C4                977              LEA     numTable ,A7 Load the table into A7
000015D4  4EB7 2000                978              JSR     (A7,D2)     Jump to subroutine of value at D2
000015D8                           979              *last 4bits 00*X
000015D8  4242                     980              CLR     D2
000015DA  1404                     981              MOVE.B  D4,D2       00*X
000015DC  E90A                     982              LSL.B   #4,D2       00X*
000015DE  E80A                     983              LSR.B   #4,D2       000X
000015E0  C4FC 0008                984              MULU    #8,D2   
000015E4                           985             
000015E4  4EB7 2000                986              JSR     (A7,D2)     Jump to subroutine of value at D2
000015E8                           987  
000015E8  4E75                     988              RTS
000015EA                           989              
000015EA                           990  absoulteWord   
000015EA  14FC 0024                991              MOVE.B  #'$',(A2)+ 
000015EE  E08C                     992              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015F0  E08C                     993              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015F2                           994              *4MSB   X***
000015F2  4241                     995              CLR     D1
000015F4  3204                     996              MOVE.W  D4,D1       X***
000015F6  E049                     997              LSR.W   #8,D1       00X*
000015F8  E849                     998              LSR.W   #4,D1       000X
000015FA  4FF8 13C4                999              LEA     numTable ,A7 Load the table into A7
000015FE  C2FC 0008               1000              MULU    #8,D1
00001602  4EB7 1000               1001              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001606                          1002              *next 4MSB  *X**
00001606  4241                    1003              CLR     D1
00001608  3204                    1004              MOVE.W  D4,D1       *X**
0000160A  E949                    1005              LSL.W   #4,D1       X**0        
0000160C  E049                    1006              LSR.W   #8,D1       00X*
0000160E  E849                    1007              LSR.W   #4,D1       000X
00001610  4FF8 13C4               1008              LEA     numTable ,A7 Load the table into A7
00001614  C2FC 0008               1009              MULU    #8,D1
00001618  4EB7 1000               1010              JSR     (A7,D1)     Jump to subroutine of value at D1
0000161C                          1011              *next 4MSB  **X*
0000161C  4241                    1012              CLR     D1
0000161E  1204                    1013              MOVE.B  D4,D1       00X*
00001620  E809                    1014              LSR.B   #4,D1       000X
00001622  4FF8 13C4               1015              LEA     numTable ,A7 Load the table into A7
00001626  C2FC 0008               1016                          MULU    #8,D1
0000162A  4EB7 1000               1017              JSR     (A7,D1)     Jump to subroutine of value at D1
0000162E                          1018              *last 4  bits   ***X
0000162E  4241                    1019              CLR     D1
00001630  1204                    1020              MOVE.B  D4,D1       00*X
00001632  E909                    1021              LSL.B   #4,D1       00X0    
00001634  E809                    1022              LSR.B   #4,D1       000X
00001636  4FF8 13C4               1023              LEA     numTable ,A7 Load the table into A7
0000163A  C2FC 0008               1024                          MULU    #8,D1
0000163E  4EB7 1000               1025              JSR     (A7,D1)     Jump to subroutine of value at D1
00001642  4E75                    1026              RTS            
00001644                          1027  absoulteLong   
00001644  4241                    1028              CLR     D1
00001646  4242                    1029              CLR     D2 
00001648  14FC 0024               1030              MOVE.B  #'$',(A2)+ 
0000164C  2404                    1031              MOVE.L  D4,D2       D2 will be used for later
0000164E  E08C                    1032              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001650  E08C                    1033              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001652                          1034              *4MSB   X***
00001652  4241                    1035              CLR     D1
00001654  3204                    1036              MOVE.W  D4,D1       X***
00001656  E049                    1037              LSR.W   #8,D1       00X*
00001658  E849                    1038              LSR.W   #4,D1       000X
0000165A  4FF8 13C4               1039              LEA     numTable ,A7 Load the table into A7
0000165E  C2FC 0008               1040              MULU    #8,D1
00001662  4EB7 1000               1041              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001666                          1042              *next 4MSB  *X**
00001666  4241                    1043              CLR     D1
00001668  3204                    1044              MOVE.W  D4,D1       *X**
0000166A  E949                    1045              LSL.W   #4,D1       X**0        
0000166C  E049                    1046              LSR.W   #8,D1       00X*
0000166E  E849                    1047              LSR.W   #4,D1       000X
00001670  4FF8 13C4               1048              LEA     numTable ,A7 Load the table into A7
00001674  C2FC 0008               1049              MULU    #8,D1
00001678  4EB7 1000               1050              JSR     (A7,D1)     Jump to subroutine of value at D1
0000167C                          1051              *next 4MSB  **X*
0000167C  4241                    1052              CLR     D1
0000167E  1204                    1053              MOVE.B  D4,D1       00X*
00001680  E809                    1054              LSR.B   #4,D1       000X
00001682  4FF8 13C4               1055              LEA     numTable ,A7 Load the table into A7
00001686  C2FC 0008               1056                          MULU    #8,D1
0000168A  4EB7 1000               1057              JSR     (A7,D1)     Jump to subroutine of value at D1
0000168E                          1058              *last 4  bits   ***X
0000168E  4241                    1059              CLR     D1
00001690  1204                    1060              MOVE.B  D4,D1       00*X
00001692  E909                    1061              LSL.B   #4,D1       00X0    
00001694  E809                    1062              LSR.B   #4,D1       000X
00001696  4FF8 13C4               1063              LEA     numTable ,A7 Load the table into A7
0000169A  C2FC 0008               1064                          MULU    #8,D1
0000169E  4EB7 1000               1065              JSR     (A7,D1)     Jump to subroutine of value at D1
000016A2                          1066              *4MSB   X***
000016A2  4241                    1067              CLR     D1
000016A4  3202                    1068              MOVE.W  D2,D1
000016A6  E049                    1069              LSR.W   #8,D1            00X*
000016A8  E849                    1070              LSR.W   #4,D1            000X
000016AA  C2FC 0008               1071              MULU    #8,D1
000016AE  4FF8 13C4               1072              LEA     numTable ,A7 Load the table into A7
000016B2  4EB7 1000               1073              JSR     (A7,D1)     Jump to subroutine of value at D1
000016B6                          1074              *next 4MSB  *X**
000016B6  4241                    1075              CLR     D1
000016B8  3202                    1076              MOVE.W  D2,D1
000016BA  E949                    1077              LSL.W   #4,D1       X**0
000016BC  E049                    1078              LSR.W   #8,D1       00X*
000016BE  E809                    1079              LSR.B   #4,D1       000X
000016C0  C2FC 0008               1080              MULU    #8,D1
000016C4  4FF8 13C4               1081              LEA     numTable ,A7 Load the table into A7
000016C8  4EB7 1000               1082              JSR     (A7,D1)     Jump to subroutine of value at D1
000016CC                          1083              *next 4MSB  **X*
000016CC  4241                    1084              CLR     D1
000016CE  1202                    1085              MOVE.B  D2,D1       00X*
000016D0  E809                    1086              LSR.B   #4,D1       000X
000016D2  C2FC 0008               1087              MULU    #8,D1
000016D6  4FF8 13C4               1088              LEA     numTable ,A7 Load the table into A7
000016DA  4EB7 1000               1089              JSR     (A7,D1)     Jump to subroutine of value at D1
000016DE                          1090              *next 4MSB  ***X
000016DE  4241                    1091              CLR     D1
000016E0  1202                    1092              MOVE.B  D2,D1       00*X
000016E2  E909                    1093              LSL.B   #4,D1       00X0
000016E4  E809                    1094              LSR.B   #4,D1       000X
000016E6  C2FC 0008               1095              MULU    #8,D1
000016EA  4FF8 13C4               1096              LEA     numTable ,A7 Load the table into A7
000016EE  4EB7 1000               1097              JSR     (A7,D1)     Jump to subroutine of value at D1
000016F2                          1098             
000016F2                          1099  
000016F2  4E75                    1100              RTS
000016F4                          1101  
000016F4                          1102  
000016F4                          1103  
000016F4                          1104  
000016F4                          1105  
000016F4                          1106  
000016F4                          1107  
000016F4                          1108  
000016F4                          1109  
000016F4                          1110  
000016F4                          1111  
000016F4                          1112  
000016F4                          1113  
000016F4                          1114  
000016F4                          1115  
000016F4                          1116  
000016F4                          1117  
000016F4                          1118  
000016F4                          1119  
000016F4                          1120  
000016F4                          1121  
000016F4                          1122  
000016F4                          1123  
000016F4                          1124  -------------------- end include --------------------
000016F4                          1125              INCLUDE 'op1101.x68'    ADD,ADDA
000016F4                          1126  op1101 
000016F4                          1127      ;ADD, ADDA
000016F4                          1128      
000016F4                          1129      ; we need to determine what its size is (B,W,L) putting the data in D6
000016F4  4EB8 14B0               1130      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
000016F8                          1131      ; we use to decode and branch
000016F8                          1132      *-now D3 contains the OPMODE FIELD telling us wether this is
000016F8                          1133      *-a LONG or a WORD
000016F8                          1134      
000016F8                          1135      *-now we need to decipher if its any of the adds
000016F8  B63C 0000               1136      CMP.B   #hex_0,D3 is this ADD.B
000016FC  6700 003A               1137      BEQ add_B   ;<EA> -> Dn
00001700  B63C 0001               1138      CMP.B   #hex_1,D3   is it ADD.W
00001704  6700 00B8               1139      BEQ add_W ;<EA> ->Dn
00001708  B63C 0002               1140      CMP.B   #hex_2,D3   is it ADD.L
0000170C  6700 0136               1141      BEQ add_L ;<EA> ->Dn
00001710                          1142      
00001710  B63C 0003               1143      CMP.B   #hex_3,D3
00001714  6700 01B4               1144      BEQ adda_W
00001718                          1145      
00001718  B63C 0004               1146      CMP.B   #hex_4,D3
0000171C  6700 02C0               1147      BEQ add_B_EA Dn -> EA
00001720                          1148      
00001720  B63C 0005               1149      CMP.B   #hex_5,D3
00001724  6700 0350               1150      BEQ add_W_EA Dn ->EA
00001728                          1151      
00001728  B63C 0006               1152      CMP.B   #hex_6,D3
0000172C  6700 03D0               1153      BEQ add_L_EA Dn - >EA
00001730  B63C 0007               1154      CMP.B   #hex_7,D3
00001734  6700 021E               1155      BEQ adda_L
00001738                          1156  
00001738                          1157  add_B   ;add.B EA->Dn
00001738                          1158      
00001738                          1159      *-store the size of the operation for immediate decoding use here/below
00001738                          1160      *-D7 equals storage of size of operation
00001738                          1161      *- #3 is byte , #2 is word #1 is long
00001738                          1162      ;MOVE.B  #3,D7
00001738                          1163      
00001738                          1164  
00001738  14FC 0020               1165      MOVE.B  #' ',(A2)+
0000173C  14FC 0020               1166      MOVE.B  #' ',(A2)+
00001740  14FC 0020               1167      MOVE.B  #' ',(A2)+
00001744  14FC 0020               1168      MOVE.B  #' ',(A2)+
00001748  14FC 0041               1169      MOVE.B  #'A',(A2)+
0000174C  14FC 0044               1170      MOVE.B  #'D',(A2)+
00001750  14FC 0044               1171      MOVE.B  #'D',(A2)+
00001754  14FC 002E               1172      MOVE.B  #'.',(A2)+
00001758  14FC 0042               1173      MOVE.B  #'B',(A2)+
0000175C                          1174      *-always allow 4 spaces
0000175C  14FC 0020               1175      MOVE.B  #' ',(A2)+
00001760  14FC 0020               1176      MOVE.B  #' ',(A2)+
00001764  14FC 0020               1177      MOVE.B  #' ',(A2)+
00001768  14FC 0020               1178      MOVE.B  #' ',(A2)+
0000176C                          1179      
0000176C                          1180      *-deCDOE EA (Dn,Dn
0000176C                          1181          * MachineCode: 0001 **** **** **BI T***
0000176C                          1182      *-insert immediate addressing here
0000176C  4242                    1183              CLR     D2
0000176E  4241                    1184              CLR     D1
00001770  1406                    1185              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001772  E50A                    1186              LSL.B   #2,D2       **** **** BIT* **00
00001774  EA0A                    1187              LSR.B   #5,D2       **** **** 0000 0BIT
00001776  C4FC 0008               1188              MULU    #8,D2       value adjusted for jumping
0000177A  4DF8 12A6               1189              LEA     modeTable,A6 Load the table into A6
0000177E  4EB6 2000               1190              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001782                          1191  
00001782                          1192  
00001782                          1193   * MachineCode: 0001 **** **** **** *BIT
00001782                          1194              
00001782  1206                    1195              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001784  EB09                    1196              LSL.B   #5,D1       **** **** BIT0 0000
00001786  EA09                    1197              LSR.B   #5,D1       **** **** 0000 0BIT      
00001788  C2FC 0008               1198              MULU    #8,D1       value adjusted for jumping
0000178C  4FF8 1354               1199              LEA     regNumTable ,A7 Load the table into A7
00001790  4EB7 1000               1200              JSR     (A7,D1)     Jump to subroutine of value at D1
00001794  B23C 0020               1201              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001798  6700 FE24               1202              BEQ.W   immediateData   ;branch to immediateData
0000179C  14FC 002C               1203              MOVE.B  #',',(A2)+
000017A0  14FC 0044               1204              MOVE.B  #'D',(A2)+
000017A4                          1205              
000017A4                          1206    *------------------------------------------------------------
000017A4  4241                    1207              CLR     D1
000017A6  3206                    1208              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000017A8  E949                    1209              LSL.W   #4,D1       BIT* **** **** 0000
000017AA  E049                    1210              LSR.W   #8,D1       0000 0000 BIT* ****
000017AC  EA49                    1211              LSR.W   #5,D1       0000 0000 0000 0BIT     
000017AE  C2FC 0008               1212              MULU    #8,D1       value adjusted for jumping
000017B2  4FF8 13C4               1213              LEA     numTable ,A7 Load the table into A7
000017B6  4EB7 1000               1214              JSR     (A7,D1)     Jump to subroutine of value at D1   
000017BA  6000 08E8               1215              BRA printcode  
000017BE                          1216      
000017BE                          1217       
000017BE                          1218  add_W   ;add.B EA->Dn
000017BE                          1219      
000017BE                          1220      *-store the size of the operation for immediate decoding use here/below
000017BE                          1221      *-D7 equals storage of size of operation
000017BE                          1222      *- #3 is byte , #2 is word #1 is long
000017BE                          1223      ;MOVE.B  #3,D7
000017BE                          1224      
000017BE                          1225  
000017BE  14FC 0020               1226      MOVE.B  #' ',(A2)+
000017C2  14FC 0020               1227      MOVE.B  #' ',(A2)+
000017C6  14FC 0020               1228      MOVE.B  #' ',(A2)+
000017CA  14FC 0020               1229      MOVE.B  #' ',(A2)+
000017CE  14FC 0041               1230      MOVE.B  #'A',(A2)+
000017D2  14FC 0044               1231      MOVE.B  #'D',(A2)+
000017D6  14FC 0044               1232      MOVE.B  #'D',(A2)+
000017DA  14FC 002E               1233      MOVE.B  #'.',(A2)+
000017DE  14FC 0057               1234      MOVE.B  #'W',(A2)+
000017E2                          1235      *-always allow 4 spaces
000017E2  14FC 0020               1236      MOVE.B  #' ',(A2)+
000017E6  14FC 0020               1237      MOVE.B  #' ',(A2)+
000017EA  14FC 0020               1238      MOVE.B  #' ',(A2)+
000017EE  14FC 0020               1239      MOVE.B  #' ',(A2)+
000017F2                          1240      
000017F2                          1241      *-deCDOE EA (Dn,Dn
000017F2                          1242          * MachineCode: 0001 **** **** **BI T***
000017F2                          1243      *-insert immediate addressing here
000017F2  4242                    1244              CLR     D2
000017F4  4241                    1245              CLR     D1
000017F6  1406                    1246              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000017F8  E50A                    1247              LSL.B   #2,D2       **** **** BIT* **00
000017FA  EA0A                    1248              LSR.B   #5,D2       **** **** 0000 0BIT
000017FC  C4FC 0008               1249              MULU    #8,D2       value adjusted for jumping
00001800  4DF8 12A6               1250              LEA     modeTable,A6 Load the table into A6
00001804  4EB6 2000               1251              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001808                          1252  
00001808                          1253  
00001808                          1254   * MachineCode: 0001 **** **** **** *BIT
00001808                          1255              
00001808  1206                    1256              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000180A  EB09                    1257              LSL.B   #5,D1       **** **** BIT0 0000
0000180C  EA09                    1258              LSR.B   #5,D1       **** **** 0000 0BIT      
0000180E  C2FC 0008               1259              MULU    #8,D1       value adjusted for jumping
00001812  4FF8 1354               1260              LEA     regNumTable ,A7 Load the table into A7
00001816  4EB7 1000               1261              JSR     (A7,D1)     Jump to subroutine of value at D1
0000181A  B23C 0020               1262              CMP.B   #32,D1         ; #imm => #XX 3 spaces
0000181E  6700 FD9E               1263              BEQ.W   immediateData   ;branch to immediateData
00001822  14FC 002C               1264              MOVE.B  #',',(A2)+
00001826  14FC 0044               1265              MOVE.B  #'D',(A2)+
0000182A                          1266              
0000182A                          1267                *------------------------------------------------------------
0000182A  4241                    1268              CLR     D1
0000182C  3206                    1269              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000182E  E949                    1270              LSL.W   #4,D1       BIT* **** **** 0000
00001830  E049                    1271              LSR.W   #8,D1       0000 0000 BIT* ****
00001832  EA49                    1272              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001834  C2FC 0008               1273              MULU    #8,D1       value adjusted for jumping
00001838  4FF8 13C4               1274              LEA     numTable ,A7 Load the table into A7
0000183C  4EB7 1000               1275              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001840  6000 0862               1276              BRA printcode  
00001844                          1277     
00001844                          1278  add_L   ;add.B EA->Dn
00001844                          1279      
00001844                          1280      *-store the size of the operation for immediate decoding use here/below
00001844                          1281      *-D7 equals storage of size of operation
00001844                          1282      *- #3 is byte , #2 is word #1 is long
00001844                          1283      ;MOVE.B  #3,D7
00001844                          1284      
00001844                          1285  
00001844  14FC 0020               1286      MOVE.B  #' ',(A2)+
00001848  14FC 0020               1287      MOVE.B  #' ',(A2)+
0000184C  14FC 0020               1288      MOVE.B  #' ',(A2)+
00001850  14FC 0020               1289      MOVE.B  #' ',(A2)+
00001854  14FC 0041               1290      MOVE.B  #'A',(A2)+
00001858  14FC 0044               1291      MOVE.B  #'D',(A2)+
0000185C  14FC 0044               1292      MOVE.B  #'D',(A2)+
00001860  14FC 002E               1293      MOVE.B  #'.',(A2)+
00001864  14FC 004C               1294      MOVE.B  #'L',(A2)+
00001868                          1295      *-always allow 4 spaces
00001868  14FC 0020               1296      MOVE.B  #' ',(A2)+
0000186C  14FC 0020               1297      MOVE.B  #' ',(A2)+
00001870  14FC 0020               1298      MOVE.B  #' ',(A2)+
00001874  14FC 0020               1299      MOVE.B  #' ',(A2)+
00001878                          1300      
00001878                          1301      *-deCDOE EA (Dn,Dn
00001878                          1302          * MachineCode: 0001 **** **** **BI T***
00001878                          1303      *-insert immediate addressing here
00001878  4242                    1304              CLR     D2
0000187A  4241                    1305              CLR     D1
0000187C  1406                    1306              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000187E  E50A                    1307              LSL.B   #2,D2       **** **** BIT* **00
00001880  EA0A                    1308              LSR.B   #5,D2       **** **** 0000 0BIT
00001882  C4FC 0008               1309              MULU    #8,D2       value adjusted for jumping
00001886  4DF8 12A6               1310              LEA     modeTable,A6 Load the table into A6
0000188A  4EB6 2000               1311              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000188E                          1312  
0000188E                          1313  
0000188E                          1314   * MachineCode: 0001 **** **** **** *BIT
0000188E                          1315              
0000188E  1206                    1316              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001890  EB09                    1317              LSL.B   #5,D1       **** **** BIT0 0000
00001892  EA09                    1318              LSR.B   #5,D1       **** **** 0000 0BIT      
00001894  C2FC 0008               1319              MULU    #8,D1       value adjusted for jumping
00001898  4FF8 1354               1320              LEA     regNumTable ,A7 Load the table into A7
0000189C  4EB7 1000               1321              JSR     (A7,D1)     Jump to subroutine of value at D1
000018A0  B23C 0020               1322              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000018A4  6700 FD18               1323              BEQ.W   immediateData   ;branch to immediateData
000018A8  14FC 002C               1324              MOVE.B  #',',(A2)+
000018AC  14FC 0044               1325              MOVE.B  #'D',(A2)+
000018B0                          1326              
000018B0                          1327                *------------------------------------------------------------
000018B0  4241                    1328              CLR     D1
000018B2  3206                    1329              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000018B4  E949                    1330              LSL.W   #4,D1       BIT* **** **** 0000
000018B6  E049                    1331              LSR.W   #8,D1       0000 0000 BIT* ****
000018B8  EA49                    1332              LSR.W   #5,D1       0000 0000 0000 0BIT     
000018BA  C2FC 0008               1333              MULU    #8,D1       value adjusted for jumping
000018BE  4FF8 13C4               1334              LEA     numTable ,A7 Load the table into A7
000018C2  4EB7 1000               1335              JSR     (A7,D1)     Jump to subroutine of value at D1   
000018C6  6000 07DC               1336              BRA printcode  
000018CA                          1337      
000018CA                          1338  adda_W  ;ADDA.W
000018CA                          1339      *-maybe error checking
000018CA                          1340      *-we know its ADDA.W so print it to our buffer
000018CA                          1341      *-ex ADDA.W D2,D7
000018CA                          1342      
000018CA  14FC 0020               1343      MOVE.B  #' ',(A2)+
000018CE  14FC 0020               1344      MOVE.B  #' ',(A2)+
000018D2  14FC 0020               1345      MOVE.B  #' ',(A2)+
000018D6  14FC 0020               1346      MOVE.B  #' ',(A2)+
000018DA  14FC 0041               1347      MOVE.B  #'A',(A2)+
000018DE  14FC 0044               1348      MOVE.B  #'D',(A2)+
000018E2  14FC 0044               1349      MOVE.B  #'D',(A2)+
000018E6  14FC 0041               1350      MOVE.B  #'A',(A2)+
000018EA  14FC 002E               1351      MOVE.B  #'.',(A2)+
000018EE  14FC 0057               1352      MOVE.B  #'W',(A2)+
000018F2                          1353      *-always allow 4 spaces
000018F2  14FC 0020               1354      MOVE.B  #' ',(A2)+
000018F6  14FC 0020               1355      MOVE.B  #' ',(A2)+
000018FA  14FC 0020               1356      MOVE.B  #' ',(A2)+
000018FE  14FC 0020               1357      MOVE.B  #' ',(A2)+
00001902                          1358      
00001902                          1359      * MachineCode: 0001 **** **** **BI T***
00001902                          1360      *-insert immediate addressing here
00001902  4242                    1361              CLR     D2
00001904  4241                    1362              CLR     D1
00001906  1406                    1363              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001908  E50A                    1364              LSL.B   #2,D2       **** **** BIT* **00
0000190A  EA0A                    1365              LSR.B   #5,D2       **** **** 0000 0BIT
0000190C  C4FC 0008               1366              MULU    #8,D2       value adjusted for jumping
00001910  4DF8 12A6               1367              LEA     modeTable,A6 Load the table into A6
00001914  4EB6 2000               1368              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001918                          1369  
00001918                          1370  
00001918                          1371   * MachineCode: 0001 **** **** **** *BIT
00001918                          1372              
00001918  1206                    1373              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000191A  EB09                    1374              LSL.B   #5,D1       **** **** BIT0 0000
0000191C  EA09                    1375              LSR.B   #5,D1       **** **** 0000 0BIT      
0000191E  C2FC 0008               1376              MULU    #8,D1       value adjusted for jumping
00001922  4FF8 1354               1377              LEA     regNumTable ,A7 Load the table into A7
00001926  4EB7 1000               1378              JSR     (A7,D1)     Jump to subroutine of value at D1
0000192A  B23C 0020               1379              CMP.B   #32,D1         ; #imm => #XX 3 spaces
0000192E  6700 FC8E               1380              BEQ.W   immediateData   ;branch to immediateData
00001932                          1381      
00001932  14FC 002C               1382          MOVE.B  #',',(A2)+
00001936  14FC 0041               1383          MOVE.B  #'A',(A2)+
0000193A  4241                    1384              CLR     D1
0000193C  3206                    1385              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000193E  E949                    1386              LSL.W   #4,D1       BIT* **** **** 0000
00001940  E049                    1387              LSR.W   #8,D1       0000 0000 BIT* ****
00001942  EA49                    1388              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001944  C2FC 0008               1389              MULU    #8,D1       value adjusted for jumping
00001948  4FF8 13C4               1390              LEA     numTable ,A7 Load the table into A7
0000194C  4EB7 1000               1391              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001950                          1392          
00001950                          1393      
00001950  6000 0752               1394          BRA printCode
00001954                          1395          
00001954                          1396          
00001954                          1397          
00001954                          1398  
00001954                          1399  adda_L  ;ADDA.L
00001954                          1400      *-maybe error checking
00001954                          1401      *-we know its ADDA.L so print it to our buffer
00001954                          1402      *-ex ADDA.L D2,D7
00001954                          1403      
00001954  14FC 0020               1404      MOVE.B  #' ',(A2)+
00001958  14FC 0020               1405      MOVE.B  #' ',(A2)+
0000195C  14FC 0020               1406      MOVE.B  #' ',(A2)+
00001960  14FC 0020               1407      MOVE.B  #' ',(A2)+
00001964  14FC 0041               1408          MOVE.B  #'A',(A2)+
00001968  14FC 0044               1409          MOVE.B  #'D',(A2)+
0000196C  14FC 0044               1410          MOVE.B  #'D',(A2)+
00001970  14FC 0041               1411          MOVE.B  #'A',(A2)+
00001974  14FC 002E               1412          MOVE.B  #'.',(A2)+
00001978  14FC 004C               1413          MOVE.B  #'L',(A2)+
0000197C                          1414      *-always allow 4 spaces
0000197C  14FC 0020               1415          MOVE.B  #' ',(A2)+
00001980  14FC 0020               1416          MOVE.B  #' ',(A2)+
00001984  14FC 0020               1417          MOVE.B  #' ',(A2)+
00001988  14FC 0020               1418          MOVE.B  #' ',(A2)+      
0000198C                          1419      
0000198C                          1420      * MachineCode: 0001 **** **** **BI T***
0000198C                          1421      *-insert immediate addressing here
0000198C  4242                    1422              CLR     D2
0000198E  4241                    1423              CLR     D1
00001990  1406                    1424              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001992  E50A                    1425              LSL.B   #2,D2       **** **** BIT* **00
00001994  EA0A                    1426              LSR.B   #5,D2       **** **** 0000 0BIT
00001996  C4FC 0008               1427              MULU    #8,D2       value adjusted for jumping
0000199A  4DF8 12A6               1428              LEA     modeTable,A6 Load the table into A6
0000199E  4EB6 2000               1429              JSR     (A6,D2)     Jump to subroutine of value at D0   
000019A2                          1430  
000019A2                          1431  
000019A2                          1432   * MachineCode: 0001 **** **** **** *BIT
000019A2                          1433              
000019A2  1206                    1434              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000019A4  EB09                    1435              LSL.B   #5,D1       **** **** BIT0 0000
000019A6  EA09                    1436              LSR.B   #5,D1       **** **** 0000 0BIT      
000019A8  C2FC 0008               1437              MULU    #8,D1       value adjusted for jumping
000019AC  4FF8 1354               1438              LEA     regNumTable ,A7 Load the table into A7
000019B0  4EB7 1000               1439              JSR     (A7,D1)     Jump to subroutine of value at D1
000019B4  B23C 0020               1440              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000019B8  6700 FC04               1441              BEQ.W   immediateData   ;branch to immediateData
000019BC                          1442      
000019BC  14FC 002C               1443              MOVE.B  #',',(A2)+
000019C0  14FC 0041               1444              MOVE.B  #'A',(A2)+
000019C4  4241                    1445              CLR     D1
000019C6  3206                    1446              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000019C8  E949                    1447              LSL.W   #4,D1       BIT* **** **** 0000
000019CA  E049                    1448              LSR.W   #8,D1       0000 0000 BIT* ****
000019CC  EA49                    1449              LSR.W   #5,D1       0000 0000 0000 0BIT     
000019CE  C2FC 0008               1450              MULU    #8,D1       value adjusted for jumping
000019D2  4FF8 13C4               1451              LEA     numTable ,A7 Load the table into A7
000019D6  4EB7 1000               1452              JSR     (A7,D1)     Jump to subroutine of value at D1    
000019DA                          1453          
000019DA                          1454      
000019DA  6000 06C8               1455          BRA printCode
000019DE                          1456  
000019DE                          1457  
000019DE                          1458      
000019DE                          1459  add_B_EA   ;add.B Dn -> EA
000019DE                          1460      
000019DE                          1461      *-store the size of the operation for immediate decoding use here/below
000019DE                          1462      *-D7 equals storage of size of operation
000019DE                          1463      *- #3 is byte , #2 is word #1 is long
000019DE                          1464      ;MOVE.B  #3,D7
000019DE                          1465      
000019DE                          1466  
000019DE  14FC 0020               1467      MOVE.B  #' ',(A2)+
000019E2  14FC 0020               1468      MOVE.B  #' ',(A2)+
000019E6  14FC 0020               1469      MOVE.B  #' ',(A2)+
000019EA  14FC 0020               1470      MOVE.B  #' ',(A2)+
000019EE  14FC 0041               1471      MOVE.B  #'A',(A2)+
000019F2  14FC 0044               1472      MOVE.B  #'D',(A2)+
000019F6  14FC 0044               1473      MOVE.B  #'D',(A2)+
000019FA  14FC 002E               1474      MOVE.B  #'.',(A2)+
000019FE  14FC 0042               1475      MOVE.B  #'B',(A2)+
00001A02                          1476      *-always allow 4 spaces
00001A02  14FC 0020               1477      MOVE.B  #' ',(A2)+
00001A06  14FC 0020               1478      MOVE.B  #' ',(A2)+
00001A0A  14FC 0020               1479      MOVE.B  #' ',(A2)+
00001A0E  14FC 0020               1480      MOVE.B  #' ',(A2)+
00001A12                          1481      
00001A12                          1482      *-deCDOE EA (Dn,Dn
00001A12                          1483          * MachineCode: 0001 **** **** **BI T***
00001A12                          1484      *-insert immediate addressing here
00001A12  4242                    1485              CLR     D2
00001A14  4241                    1486              CLR     D1
00001A16  1406                    1487              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001A18  E50A                    1488              LSL.B   #2,D2       **** **** BIT* **00
00001A1A  EA0A                    1489              LSR.B   #5,D2       **** **** 0000 0BIT
00001A1C  C4FC 0008               1490              MULU    #8,D2       value adjusted for jumping
00001A20  4DF8 12A6               1491              LEA     modeTable,A6 Load the table into A6
00001A24  4EB6 2000               1492              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001A28                          1493  
00001A28                          1494  
00001A28                          1495   * MachineCode: 0001 **** **** **** *BIT
00001A28                          1496              
00001A28  1206                    1497              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001A2A  EB09                    1498              LSL.B   #5,D1       **** **** BIT0 0000
00001A2C  EA09                    1499              LSR.B   #5,D1       **** **** 0000 0BIT      
00001A2E  C2FC 0008               1500              MULU    #8,D1       value adjusted for jumping
00001A32  4FF8 1354               1501              LEA     regNumTable ,A7 Load the table into A7
00001A36  4EB7 1000               1502              JSR     (A7,D1)     Jump to subroutine of value at D1
00001A3A  B23C 0020               1503              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001A3E  6700 FB7E               1504              BEQ.W   immediateData   ;branch to immediateData
00001A42  14FC 002C               1505              MOVE.B  #',',(A2)+
00001A46                          1506   ;           MOVE.B  #'D',(A2)+
00001A46                          1507              
00001A46  4242                    1508              CLR     D2
00001A48  4241                    1509              CLR     D1
00001A4A  3406                    1510              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001A4C  EF4A                    1511              LSL.W   #7,D2       BIT* **** **** 0000
00001A4E  E04A                    1512              LSR.W   #8,D2       0000 0000 BIT* ****
00001A50  EA4A                    1513              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001A52  C4FC 0008               1514              MULU    #8,D2       value adjusted for jumping
00001A56  4DF8 12A6               1515              LEA     modeTable,A6 Load the table into A6
00001A5A  4EB6 2000               1516              JSR     (A6,D2)     Jump to subroutine of value at D2
00001A5E                          1517             
00001A5E  3206                    1518              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001A60  E949                    1519              LSL.W   #4,D1       BIT* **** **** 0000
00001A62  E049                    1520              LSR.W   #8,D1       0000 0000 BIT* ****
00001A64  EA49                    1521              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001A66  C2FC 0008               1522              MULU    #8,D1       value adjusted for jumping
00001A6A  4FF8 1354               1523              LEA     regNumTable ,A7 Load the table into A7
00001A6E  4EB7 1000               1524              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001A72  6000 0630               1525              BRA printcode  
00001A76                          1526              
00001A76                          1527              
00001A76                          1528  
00001A76                          1529     
00001A76                          1530  add_W_EA   ;add.B Dn -> EA
00001A76                          1531      
00001A76                          1532      *-store the size of the operation for immediate decoding use here/below
00001A76                          1533      *-D7 equals storage of size of operation
00001A76                          1534      *- #3 is byte , #2 is word #1 is long
00001A76                          1535      ;MOVE.B  #3,D7
00001A76  1E3C 0001               1536      MOVE.B  #1,D7
00001A7A                          1537      
00001A7A                          1538  
00001A7A  14FC 0020               1539      MOVE.B  #' ',(A2)+
00001A7E  14FC 0020               1540      MOVE.B  #' ',(A2)+
00001A82  14FC 0020               1541      MOVE.B  #' ',(A2)+
00001A86  14FC 0020               1542      MOVE.B  #' ',(A2)+
00001A8A  14FC 0041               1543      MOVE.B  #'A',(A2)+
00001A8E  14FC 0044               1544      MOVE.B  #'D',(A2)+
00001A92  14FC 0044               1545      MOVE.B  #'D',(A2)+
00001A96  14FC 002E               1546      MOVE.B  #'.',(A2)+
00001A9A  14FC 0057               1547      MOVE.B  #'W',(A2)+
00001A9E                          1548      *-always allow 4 spaces
00001A9E  14FC 0020               1549      MOVE.B  #' ',(A2)+
00001AA2  14FC 0020               1550      MOVE.B  #' ',(A2)+
00001AA6  14FC 0020               1551      MOVE.B  #' ',(A2)+
00001AAA  14FC 0020               1552      MOVE.B  #' ',(A2)+
00001AAE                          1553      
00001AAE                          1554      
00001AAE                          1555      
00001AAE  14FC 0044               1556          MOVE.B  #'D',(A2)+
00001AB2                          1557             
00001AB2  3206                    1558              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001AB4  E949                    1559              LSL.W   #4,D1       BIT* **** **** 0000
00001AB6  E049                    1560              LSR.W   #8,D1       0000 0000 BIT* ****
00001AB8  EA49                    1561              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001ABA  C2FC 0008               1562              MULU    #8,D1       value adjusted for jumping
00001ABE  4FF8 13C4               1563              LEA     NumTable ,A7 Load the table into A7
00001AC2  4EB7 1000               1564              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001AC6                          1565              
00001AC6                          1566              
00001AC6  14FC 002C               1567              MOVE.B  #',',(A2)+
00001ACA                          1568              *-INSERT IMMEDIATE DATA HERE
00001ACA                          1569      *-deCDOE EA (Dn,Dn
00001ACA                          1570          * MachineCode: 0001 **** **** **BI T***
00001ACA                          1571   *Only next last 3 bits which is stored at D0 => Source Address mode
00001ACA                          1572      *-insert immediate addressing here
00001ACA  4242                    1573              CLR     D2
00001ACC  4241                    1574              CLR     D1
00001ACE  1406                    1575              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001AD0  E50A                    1576              LSL.B   #2,D2       **** **** BIT* **00
00001AD2  EA0A                    1577              LSR.B   #5,D2       **** **** 0000 0BIT
00001AD4  C4FC 0008               1578              MULU    #8,D2       value adjusted for jumping
00001AD8  4DF8 12A6               1579              LEA     modeTable,A6 Load the table into A6
00001ADC  4EB6 2000               1580              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001AE0                          1581  
00001AE0                          1582  
00001AE0                          1583   * MachineCode: 0001 **** **** **** *BIT
00001AE0                          1584              
00001AE0  1206                    1585              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001AE2  EB09                    1586              LSL.B   #5,D1       **** **** BIT0 0000
00001AE4  EA09                    1587              LSR.B   #5,D1       **** **** 0000 0BIT      
00001AE6  C2FC 0008               1588              MULU    #8,D1       value adjusted for jumping
00001AEA  4FF8 1354               1589              LEA     regNumTable ,A7 Load the table into A7
00001AEE  4EB7 1000               1590              JSR     (A7,D1)     Jump to subroutine of value at D1
00001AF2  B23C 0020               1591              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001AF6  6700 FAC6               1592              BEQ.W   immediateData   ;branch to immediateData
00001AFA                          1593  
00001AFA                          1594  
00001AFA  6000 05A8               1595              BRA printcode  
00001AFE                          1596              
00001AFE                          1597  add_L_EA   ;add.L Dn -> EA
00001AFE  14FC 0020               1598      MOVE.B  #' ',(A2)+
00001B02  14FC 0020               1599      MOVE.B  #' ',(A2)+
00001B06  14FC 0020               1600      MOVE.B  #' ',(A2)+
00001B0A  14FC 0020               1601      MOVE.B  #' ',(A2)+
00001B0E  14FC 0041               1602      MOVE.B  #'A',(A2)+
00001B12  14FC 0044               1603      MOVE.B  #'D',(A2)+
00001B16  14FC 0044               1604      MOVE.B  #'D',(A2)+
00001B1A  14FC 002E               1605      MOVE.B  #'.',(A2)+
00001B1E  14FC 004C               1606      MOVE.B  #'L',(A2)+
00001B22                          1607      *-always allow 4 spaces
00001B22  14FC 0020               1608      MOVE.B  #' ',(A2)+
00001B26  14FC 0020               1609      MOVE.B  #' ',(A2)+
00001B2A  14FC 0020               1610      MOVE.B  #' ',(A2)+
00001B2E  14FC 0020               1611      MOVE.B  #' ',(A2)+
00001B32                          1612      
00001B32                          1613      
00001B32                          1614      
00001B32  14FC 0044               1615          MOVE.B  #'D',(A2)+
00001B36                          1616             
00001B36  3206                    1617              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001B38  E949                    1618              LSL.W   #4,D1       BIT* **** **** 0000
00001B3A  E049                    1619              LSR.W   #8,D1       0000 0000 BIT* ****
00001B3C  EA49                    1620              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001B3E  C2FC 0008               1621              MULU    #8,D1       value adjusted for jumping
00001B42  4FF8 13C4               1622              LEA     NumTable ,A7 Load the table into A7
00001B46  4EB7 1000               1623              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001B4A                          1624              
00001B4A                          1625              
00001B4A  14FC 002C               1626              MOVE.B  #',',(A2)+
00001B4E                          1627              *-INSERT IMMEDIATE DATA HERE
00001B4E                          1628      *-deCDOE EA (Dn,Dn
00001B4E                          1629          * MachineCode: 0001 **** **** **BI T***
00001B4E                          1630   *Only next last 3 bits which is stored at D0 => Source Address mode
00001B4E                          1631      *-insert immediate addressing here
00001B4E  4242                    1632              CLR     D2
00001B50  4241                    1633              CLR     D1
00001B52  1406                    1634              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001B54  E50A                    1635              LSL.B   #2,D2       **** **** BIT* **00
00001B56  EA0A                    1636              LSR.B   #5,D2       **** **** 0000 0BIT
00001B58  C4FC 0008               1637              MULU    #8,D2       value adjusted for jumping
00001B5C  4DF8 12A6               1638              LEA     modeTable,A6 Load the table into A6
00001B60  4EB6 2000               1639              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001B64                          1640  
00001B64                          1641  
00001B64                          1642   * MachineCode: 0001 **** **** **** *BIT
00001B64                          1643              
00001B64  1206                    1644              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001B66  EB09                    1645              LSL.B   #5,D1       **** **** BIT0 0000
00001B68  EA09                    1646              LSR.B   #5,D1       **** **** 0000 0BIT      
00001B6A  C2FC 0008               1647              MULU    #8,D1       value adjusted for jumping
00001B6E  4FF8 1354               1648              LEA     regNumTable ,A7 Load the table into A7
00001B72  4EB7 1000               1649              JSR     (A7,D1)     Jump to subroutine of value at D1
00001B76                          1650              
00001B76                          1651              *-ERROR HERE NOT SURE WHY AFTER ADD.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001B76                          1652  
00001B76                          1653  
00001B76  6000 052C               1654              BRA printcode  
00001B7A                          1655  
00001B7A                          1656  -------------------- end include --------------------
00001B7A                          1657              INCLUDE 'op1001.x68'    SUB,SUBA
00001B7A                          1658  
00001B7A                          1659  
00001B7A                          1660  op1001
00001B7A                          1661  
00001B7A                          1662      
00001B7A                          1663          ; we need to determine what its size is (B,W,L) putting the data in D6
00001B7A  4EB8 14B0               1664      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001B7E                          1665      ; we use to decode and branch
00001B7E                          1666      *-now D3 contains the OPMODE FIELD telling us wether this is
00001B7E                          1667      *-a LONG or a WORD
00001B7E                          1668      
00001B7E                          1669      *-now we need to decipher if its any of the subs
00001B7E  B63C 0000               1670      CMP.B   #hex_0,D3 is this SUB.B
00001B82  6700 0002               1671      BEQ sub_B   ;<EA> -> Dn
00001B86                          1672  
00001B86                          1673  
00001B86                          1674  sub_B
00001B86                          1675      ;EA ->Dn
00001B86                          1676      
00001B86                          1677          *-store the size of the operation for immediate decoding use here/below
00001B86                          1678      *-D7 equals storage of size of operation
00001B86                          1679      *- #3 is byte , #2 is word #1 is long
00001B86                          1680      ;MOVE.B  #3,D7
00001B86                          1681      
00001B86                          1682  
00001B86  14FC 0020               1683      MOVE.B  #' ',(A2)+
00001B8A  14FC 0020               1684      MOVE.B  #' ',(A2)+
00001B8E  14FC 0020               1685      MOVE.B  #' ',(A2)+
00001B92  14FC 0020               1686      MOVE.B  #' ',(A2)+
00001B96  14FC 0053               1687      MOVE.B  #'S',(A2)+
00001B9A  14FC 0055               1688      MOVE.B  #'U',(A2)+
00001B9E  14FC 0042               1689      MOVE.B  #'B',(A2)+
00001BA2  14FC 002E               1690      MOVE.B  #'.',(A2)+
00001BA6  14FC 0042               1691      MOVE.B  #'B',(A2)+
00001BAA                          1692      *-always allow 4 spaces
00001BAA  14FC 0020               1693      MOVE.B  #' ',(A2)+
00001BAE  14FC 0020               1694      MOVE.B  #' ',(A2)+
00001BB2  14FC 0020               1695      MOVE.B  #' ',(A2)+
00001BB6  14FC 0020               1696      MOVE.B  #' ',(A2)+
00001BBA                          1697      
00001BBA                          1698          *-deCDOE EA (Dn,Dn
00001BBA                          1699          * MachineCode: 0001 **** **** **BI T***
00001BBA                          1700      *-insert immediate subressing here
00001BBA  4242                    1701              CLR     D2
00001BBC  4241                    1702              CLR     D1
00001BBE  1406                    1703              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001BC0  E50A                    1704              LSL.B   #2,D2       **** **** BIT* **00
00001BC2  EA0A                    1705              LSR.B   #5,D2       **** **** 0000 0BIT
00001BC4  C4FC 0008               1706              MULU    #8,D2       value adjusted for jumping
00001BC8  4DF8 12A6               1707              LEA     modeTable,A6 Load the table into A6
00001BCC  4EB6 2000               1708              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001BD0                          1709  
00001BD0                          1710  
00001BD0                          1711   * MachineCode: 0001 **** **** **** *BIT
00001BD0                          1712              
00001BD0  1206                    1713              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001BD2  EB09                    1714              LSL.B   #5,D1       **** **** BIT0 0000
00001BD4  EA09                    1715              LSR.B   #5,D1       **** **** 0000 0BIT      
00001BD6  C2FC 0008               1716              MULU    #8,D1       value adjusted for jumping
00001BDA  4FF8 1354               1717              LEA     regNumTable ,A7 Load the table into A7
00001BDE  4EB7 1000               1718              JSR     (A7,D1)     Jump to subroutine of value at D1
00001BE2  B23C 0020               1719              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001BE6  6700 F9D6               1720              BEQ.W   immediateData   ;branch to immediateData
00001BEA  14FC 002C               1721              MOVE.B  #',',(A2)+
00001BEE  14FC 0044               1722              MOVE.B  #'D',(A2)+
00001BF2                          1723              
00001BF2                          1724    *------------------------------------------------------------
00001BF2  4241                    1725              CLR     D1
00001BF4  3206                    1726              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001BF6  E949                    1727              LSL.W   #4,D1       BIT* **** **** 0000
00001BF8  E049                    1728              LSR.W   #8,D1       0000 0000 BIT* ****
00001BFA  EA49                    1729              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001BFC  C2FC 0008               1730              MULU    #8,D1       value adjusted for jumping
00001C00  4FF8 13C4               1731              LEA     numTable ,A7 Load the table into A7
00001C04  4EB7 1000               1732              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C08  6000 049A               1733              BRA printcode  
00001C0C                          1734      
00001C0C                          1735      
00001C0C                          1736       
00001C0C                          1737  sub_W   ;sub.B EA->Dn
00001C0C                          1738      
00001C0C                          1739      *-store the size of the operation for immediate decoding use here/below
00001C0C                          1740      *-D7 equals storage of size of operation
00001C0C                          1741      *- #3 is byte , #2 is word #1 is long
00001C0C                          1742      ;MOVE.B  #3,D7
00001C0C                          1743      
00001C0C                          1744  
00001C0C  14FC 0020               1745      MOVE.B  #' ',(A2)+
00001C10  14FC 0020               1746      MOVE.B  #' ',(A2)+
00001C14  14FC 0020               1747      MOVE.B  #' ',(A2)+
00001C18  14FC 0020               1748      MOVE.B  #' ',(A2)+
00001C1C  14FC 0041               1749      MOVE.B  #'A',(A2)+
00001C20  14FC 0044               1750      MOVE.B  #'D',(A2)+
00001C24  14FC 0044               1751      MOVE.B  #'D',(A2)+
00001C28  14FC 002E               1752      MOVE.B  #'.',(A2)+
00001C2C  14FC 0057               1753      MOVE.B  #'W',(A2)+
00001C30                          1754      *-always allow 4 spaces
00001C30  14FC 0020               1755      MOVE.B  #' ',(A2)+
00001C34  14FC 0020               1756      MOVE.B  #' ',(A2)+
00001C38  14FC 0020               1757      MOVE.B  #' ',(A2)+
00001C3C  14FC 0020               1758      MOVE.B  #' ',(A2)+
00001C40                          1759      
00001C40                          1760      *-deCDOE EA (Dn,Dn
00001C40                          1761          * MachineCode: 0001 **** **** **BI T***
00001C40                          1762      *-insert immediate subressing here
00001C40  4242                    1763              CLR     D2
00001C42  4241                    1764              CLR     D1
00001C44  1406                    1765              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001C46  E50A                    1766              LSL.B   #2,D2       **** **** BIT* **00
00001C48  EA0A                    1767              LSR.B   #5,D2       **** **** 0000 0BIT
00001C4A  C4FC 0008               1768              MULU    #8,D2       value adjusted for jumping
00001C4E  4DF8 12A6               1769              LEA     modeTable,A6 Load the table into A6
00001C52  4EB6 2000               1770              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001C56                          1771  
00001C56                          1772  
00001C56                          1773   * MachineCode: 0001 **** **** **** *BIT
00001C56                          1774              
00001C56  1206                    1775              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001C58  EB09                    1776              LSL.B   #5,D1       **** **** BIT0 0000
00001C5A  EA09                    1777              LSR.B   #5,D1       **** **** 0000 0BIT      
00001C5C  C2FC 0008               1778              MULU    #8,D1       value adjusted for jumping
00001C60  4FF8 1354               1779              LEA     regNumTable ,A7 Load the table into A7
00001C64  4EB7 1000               1780              JSR     (A7,D1)     Jump to subroutine of value at D1
00001C68  B23C 0020               1781              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001C6C  6700 F950               1782              BEQ.W   immediateData   ;branch to immediateData
00001C70  14FC 002C               1783              MOVE.B  #',',(A2)+
00001C74  14FC 0044               1784              MOVE.B  #'D',(A2)+
00001C78                          1785              
00001C78                          1786                *------------------------------------------------------------
00001C78  4241                    1787              CLR     D1
00001C7A  3206                    1788              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001C7C  E949                    1789              LSL.W   #4,D1       BIT* **** **** 0000
00001C7E  E049                    1790              LSR.W   #8,D1       0000 0000 BIT* ****
00001C80  EA49                    1791              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001C82  C2FC 0008               1792              MULU    #8,D1       value adjusted for jumping
00001C86  4FF8 13C4               1793              LEA     numTable ,A7 Load the table into A7
00001C8A  4EB7 1000               1794              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C8E  6000 0414               1795              BRA printcode  
00001C92                          1796     
00001C92                          1797  sub_L   ;sub.B EA->Dn
00001C92                          1798      
00001C92                          1799      *-store the size of the operation for immediate decoding use here/below
00001C92                          1800      *-D7 equals storage of size of operation
00001C92                          1801      *- #3 is byte , #2 is word #1 is long
00001C92                          1802      ;MOVE.B  #3,D7
00001C92                          1803      
00001C92                          1804  
00001C92  14FC 0020               1805      MOVE.B  #' ',(A2)+
00001C96  14FC 0020               1806      MOVE.B  #' ',(A2)+
00001C9A  14FC 0020               1807      MOVE.B  #' ',(A2)+
00001C9E  14FC 0020               1808      MOVE.B  #' ',(A2)+
00001CA2  14FC 0041               1809      MOVE.B  #'A',(A2)+
00001CA6  14FC 0044               1810      MOVE.B  #'D',(A2)+
00001CAA  14FC 0044               1811      MOVE.B  #'D',(A2)+
00001CAE  14FC 002E               1812      MOVE.B  #'.',(A2)+
00001CB2  14FC 004C               1813      MOVE.B  #'L',(A2)+
00001CB6                          1814      *-always allow 4 spaces
00001CB6  14FC 0020               1815      MOVE.B  #' ',(A2)+
00001CBA  14FC 0020               1816      MOVE.B  #' ',(A2)+
00001CBE  14FC 0020               1817      MOVE.B  #' ',(A2)+
00001CC2  14FC 0020               1818      MOVE.B  #' ',(A2)+
00001CC6                          1819      
00001CC6                          1820      *-deCDOE EA (Dn,Dn
00001CC6                          1821          * MachineCode: 0001 **** **** **BI T***
00001CC6                          1822      *-insert immediate subressing here
00001CC6  4242                    1823              CLR     D2
00001CC8  4241                    1824              CLR     D1
00001CCA  1406                    1825              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001CCC  E50A                    1826              LSL.B   #2,D2       **** **** BIT* **00
00001CCE  EA0A                    1827              LSR.B   #5,D2       **** **** 0000 0BIT
00001CD0  C4FC 0008               1828              MULU    #8,D2       value adjusted for jumping
00001CD4  4DF8 12A6               1829              LEA     modeTable,A6 Load the table into A6
00001CD8  4EB6 2000               1830              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001CDC                          1831  
00001CDC                          1832  
00001CDC                          1833   * MachineCode: 0001 **** **** **** *BIT
00001CDC                          1834              
00001CDC  1206                    1835              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001CDE  EB09                    1836              LSL.B   #5,D1       **** **** BIT0 0000
00001CE0  EA09                    1837              LSR.B   #5,D1       **** **** 0000 0BIT      
00001CE2  C2FC 0008               1838              MULU    #8,D1       value adjusted for jumping
00001CE6  4FF8 1354               1839              LEA     regNumTable ,A7 Load the table into A7
00001CEA  4EB7 1000               1840              JSR     (A7,D1)     Jump to subroutine of value at D1
00001CEE  B23C 0020               1841              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001CF2  6700 F8CA               1842              BEQ.W   immediateData   ;branch to immediateData
00001CF6  14FC 002C               1843              MOVE.B  #',',(A2)+
00001CFA  14FC 0044               1844              MOVE.B  #'D',(A2)+
00001CFE                          1845              
00001CFE                          1846                *------------------------------------------------------------
00001CFE  4241                    1847              CLR     D1
00001D00  3206                    1848              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001D02  E949                    1849              LSL.W   #4,D1       BIT* **** **** 0000
00001D04  E049                    1850              LSR.W   #8,D1       0000 0000 BIT* ****
00001D06  EA49                    1851              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D08  C2FC 0008               1852              MULU    #8,D1       value adjusted for jumping
00001D0C  4FF8 13C4               1853              LEA     numTable ,A7 Load the table into A7
00001D10  4EB7 1000               1854              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001D14  6000 038E               1855              BRA printcode  
00001D18                          1856      
00001D18                          1857  suba_W  ;subA.W
00001D18                          1858      *-maybe error checking
00001D18                          1859      *-we know its subA.W so print it to our buffer
00001D18                          1860      *-ex subA.W D2,D7
00001D18                          1861      
00001D18  14FC 0020               1862      MOVE.B  #' ',(A2)+
00001D1C  14FC 0020               1863      MOVE.B  #' ',(A2)+
00001D20  14FC 0020               1864      MOVE.B  #' ',(A2)+
00001D24  14FC 0020               1865      MOVE.B  #' ',(A2)+
00001D28  14FC 0053               1866      MOVE.B  #'S',(A2)+
00001D2C  14FC 0055               1867      MOVE.B  #'U',(A2)+
00001D30  14FC 0042               1868      MOVE.B  #'B',(A2)+
00001D34  14FC 0041               1869      MOVE.B  #'A',(A2)+
00001D38  14FC 002E               1870      MOVE.B  #'.',(A2)+
00001D3C  14FC 0057               1871      MOVE.B  #'W',(A2)+
00001D40                          1872      *-always allow 4 spaces
00001D40  14FC 0020               1873      MOVE.B  #' ',(A2)+
00001D44  14FC 0020               1874      MOVE.B  #' ',(A2)+
00001D48  14FC 0020               1875      MOVE.B  #' ',(A2)+
00001D4C  14FC 0020               1876      MOVE.B  #' ',(A2)+
00001D50                          1877      
00001D50                          1878      * MachineCode: 0001 **** **** **BI T***
00001D50                          1879      *-insert immediate subressing here
00001D50  4242                    1880              CLR     D2
00001D52  4241                    1881              CLR     D1
00001D54  1406                    1882              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001D56  E50A                    1883              LSL.B   #2,D2       **** **** BIT* **00
00001D58  EA0A                    1884              LSR.B   #5,D2       **** **** 0000 0BIT
00001D5A  C4FC 0008               1885              MULU    #8,D2       value adjusted for jumping
00001D5E  4DF8 12A6               1886              LEA     modeTable,A6 Load the table into A6
00001D62  4EB6 2000               1887              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001D66                          1888  
00001D66                          1889  
00001D66                          1890   * MachineCode: 0001 **** **** **** *BIT
00001D66                          1891              
00001D66  1206                    1892              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001D68  EB09                    1893              LSL.B   #5,D1       **** **** BIT0 0000
00001D6A  EA09                    1894              LSR.B   #5,D1       **** **** 0000 0BIT      
00001D6C  C2FC 0008               1895              MULU    #8,D1       value adjusted for jumping
00001D70  4FF8 1354               1896              LEA     regNumTable ,A7 Load the table into A7
00001D74  4EB7 1000               1897              JSR     (A7,D1)     Jump to subroutine of value at D1
00001D78  B23C 0020               1898              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001D7C  6700 F840               1899              BEQ.W   immediateData   ;branch to immediateData
00001D80                          1900      
00001D80  14FC 002C               1901          MOVE.B  #',',(A2)+
00001D84  14FC 0041               1902          MOVE.B  #'A',(A2)+
00001D88  4241                    1903              CLR     D1
00001D8A  3206                    1904              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001D8C  E949                    1905              LSL.W   #4,D1       BIT* **** **** 0000
00001D8E  E049                    1906              LSR.W   #8,D1       0000 0000 BIT* ****
00001D90  EA49                    1907              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D92  C2FC 0008               1908              MULU    #8,D1       value adjusted for jumping
00001D96  4FF8 13C4               1909              LEA     numTable ,A7 Load the table into A7
00001D9A  4EB7 1000               1910              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001D9E                          1911          
00001D9E                          1912      
00001D9E  6000 0304               1913          BRA printCode
00001DA2                          1914          
00001DA2                          1915          
00001DA2                          1916          
00001DA2                          1917  
00001DA2                          1918  suba_L  ;subA.L
00001DA2                          1919      *-maybe error checking
00001DA2                          1920      *-we know its subA.L so print it to our buffer
00001DA2                          1921      *-ex subA.L D2,D7
00001DA2                          1922      
00001DA2  14FC 0020               1923      MOVE.B  #' ',(A2)+
00001DA6  14FC 0020               1924      MOVE.B  #' ',(A2)+
00001DAA  14FC 0020               1925      MOVE.B  #' ',(A2)+
00001DAE  14FC 0020               1926      MOVE.B  #' ',(A2)+
00001DB2  14FC 0053               1927          MOVE.B  #'S',(A2)+
00001DB6  14FC 0055               1928          MOVE.B  #'U',(A2)+
00001DBA  14FC 0042               1929          MOVE.B  #'B',(A2)+
00001DBE  14FC 0041               1930          MOVE.B  #'A',(A2)+
00001DC2  14FC 002E               1931          MOVE.B  #'.',(A2)+
00001DC6  14FC 004C               1932          MOVE.B  #'L',(A2)+
00001DCA                          1933      *-always allow 4 spaces
00001DCA  14FC 0020               1934          MOVE.B  #' ',(A2)+
00001DCE  14FC 0020               1935          MOVE.B  #' ',(A2)+
00001DD2  14FC 0020               1936          MOVE.B  #' ',(A2)+
00001DD6  14FC 0020               1937          MOVE.B  #' ',(A2)+      
00001DDA                          1938      
00001DDA                          1939      * MachineCode: 0001 **** **** **BI T***
00001DDA                          1940      *-insert immediate subressing here
00001DDA  4242                    1941              CLR     D2
00001DDC  4241                    1942              CLR     D1
00001DDE  1406                    1943              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001DE0  E50A                    1944              LSL.B   #2,D2       **** **** BIT* **00
00001DE2  EA0A                    1945              LSR.B   #5,D2       **** **** 0000 0BIT
00001DE4  C4FC 0008               1946              MULU    #8,D2       value adjusted for jumping
00001DE8  4DF8 12A6               1947              LEA     modeTable,A6 Load the table into A6
00001DEC  4EB6 2000               1948              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001DF0                          1949  
00001DF0                          1950  
00001DF0                          1951   * MachineCode: 0001 **** **** **** *BIT
00001DF0                          1952              
00001DF0  1206                    1953              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001DF2  EB09                    1954              LSL.B   #5,D1       **** **** BIT0 0000
00001DF4  EA09                    1955              LSR.B   #5,D1       **** **** 0000 0BIT      
00001DF6  C2FC 0008               1956              MULU    #8,D1       value adjusted for jumping
00001DFA  4FF8 1354               1957              LEA     regNumTable ,A7 Load the table into A7
00001DFE  4EB7 1000               1958              JSR     (A7,D1)     Jump to subroutine of value at D1
00001E02  B23C 0020               1959              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001E06  6700 F7B6               1960              BEQ.W   immediateData   ;branch to immediateData
00001E0A                          1961      
00001E0A  14FC 002C               1962              MOVE.B  #',',(A2)+
00001E0E  14FC 0041               1963              MOVE.B  #'A',(A2)+
00001E12  4241                    1964              CLR     D1
00001E14  3206                    1965              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001E16  E949                    1966              LSL.W   #4,D1       BIT* **** **** 0000
00001E18  E049                    1967              LSR.W   #8,D1       0000 0000 BIT* ****
00001E1A  EA49                    1968              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001E1C  C2FC 0008               1969              MULU    #8,D1       value adjusted for jumping
00001E20  4FF8 13C4               1970              LEA     numTable ,A7 Load the table into A7
00001E24  4EB7 1000               1971              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001E28                          1972          
00001E28                          1973      
00001E28  6000 027A               1974          BRA printCode
00001E2C                          1975  
00001E2C                          1976  
00001E2C                          1977      
00001E2C                          1978  sub_B_EA   ;sub.B Dn -> EA
00001E2C                          1979      
00001E2C                          1980      *-store the size of the operation for immediate decoding use here/below
00001E2C                          1981      *-D7 equals storage of size of operation
00001E2C                          1982      *- #3 is byte , #2 is word #1 is long
00001E2C                          1983      ;MOVE.B  #3,D7
00001E2C                          1984      
00001E2C                          1985  
00001E2C  14FC 0020               1986      MOVE.B  #' ',(A2)+
00001E30  14FC 0020               1987      MOVE.B  #' ',(A2)+
00001E34  14FC 0020               1988      MOVE.B  #' ',(A2)+
00001E38  14FC 0020               1989      MOVE.B  #' ',(A2)+
00001E3C  14FC 0053               1990      MOVE.B  #'S',(A2)+
00001E40  14FC 0055               1991      MOVE.B  #'U',(A2)+
00001E44  14FC 0042               1992      MOVE.B  #'B',(A2)+
00001E48  14FC 002E               1993      MOVE.B  #'.',(A2)+
00001E4C  14FC 0042               1994      MOVE.B  #'B',(A2)+
00001E50                          1995      *-always allow 4 spaces
00001E50  14FC 0020               1996      MOVE.B  #' ',(A2)+
00001E54  14FC 0020               1997      MOVE.B  #' ',(A2)+
00001E58  14FC 0020               1998      MOVE.B  #' ',(A2)+
00001E5C  14FC 0020               1999      MOVE.B  #' ',(A2)+
00001E60                          2000      
00001E60                          2001      *-deCDOE EA (Dn,Dn
00001E60                          2002          * MachineCode: 0001 **** **** **BI T***
00001E60                          2003      *-insert immediate subressing here
00001E60  4242                    2004              CLR     D2
00001E62  4241                    2005              CLR     D1
00001E64  1406                    2006              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001E66  E50A                    2007              LSL.B   #2,D2       **** **** BIT* **00
00001E68  EA0A                    2008              LSR.B   #5,D2       **** **** 0000 0BIT
00001E6A  C4FC 0008               2009              MULU    #8,D2       value adjusted for jumping
00001E6E  4DF8 12A6               2010              LEA     modeTable,A6 Load the table into A6
00001E72  4EB6 2000               2011              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001E76                          2012  
00001E76                          2013  
00001E76                          2014   * MachineCode: 0001 **** **** **** *BIT
00001E76                          2015              
00001E76  1206                    2016              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001E78  EB09                    2017              LSL.B   #5,D1       **** **** BIT0 0000
00001E7A  EA09                    2018              LSR.B   #5,D1       **** **** 0000 0BIT      
00001E7C  C2FC 0008               2019              MULU    #8,D1       value adjusted for jumping
00001E80  4FF8 1354               2020              LEA     regNumTable ,A7 Load the table into A7
00001E84  4EB7 1000               2021              JSR     (A7,D1)     Jump to subroutine of value at D1
00001E88  B23C 0020               2022              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001E8C  6700 F730               2023              BEQ.W   immediateData   ;branch to immediateData
00001E90  14FC 002C               2024              MOVE.B  #',',(A2)+
00001E94                          2025   ;           MOVE.B  #'D',(A2)+
00001E94                          2026              
00001E94  4242                    2027              CLR     D2
00001E96  4241                    2028              CLR     D1
00001E98  3406                    2029              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001E9A  EF4A                    2030              LSL.W   #7,D2       BIT* **** **** 0000
00001E9C  E04A                    2031              LSR.W   #8,D2       0000 0000 BIT* ****
00001E9E  EA4A                    2032              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001EA0  C4FC 0008               2033              MULU    #8,D2       value adjusted for jumping
00001EA4  4DF8 12A6               2034              LEA     modeTable,A6 Load the table into A6
00001EA8  4EB6 2000               2035              JSR     (A6,D2)     Jump to subroutine of value at D2
00001EAC                          2036             
00001EAC  3206                    2037              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001EAE  E949                    2038              LSL.W   #4,D1       BIT* **** **** 0000
00001EB0  E049                    2039              LSR.W   #8,D1       0000 0000 BIT* ****
00001EB2  EA49                    2040              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001EB4  C2FC 0008               2041              MULU    #8,D1       value adjusted for jumping
00001EB8  4FF8 1354               2042              LEA     regNumTable ,A7 Load the table into A7
00001EBC  4EB7 1000               2043              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001EC0  6000 01E2               2044              BRA printcode  
00001EC4                          2045              
00001EC4                          2046              
00001EC4                          2047  
00001EC4                          2048     
00001EC4                          2049  sub_W_EA   ;sub.B Dn -> EA
00001EC4                          2050      
00001EC4                          2051      *-store the size of the operation for immediate decoding use here/below
00001EC4                          2052      *-D7 equals storage of size of operation
00001EC4                          2053      *- #3 is byte , #2 is word #1 is long
00001EC4                          2054      ;MOVE.B  #3,D7
00001EC4  1E3C 0001               2055      MOVE.B  #1,D7
00001EC8                          2056      
00001EC8                          2057  
00001EC8  14FC 0020               2058      MOVE.B  #' ',(A2)+
00001ECC  14FC 0020               2059      MOVE.B  #' ',(A2)+
00001ED0  14FC 0020               2060      MOVE.B  #' ',(A2)+
00001ED4  14FC 0020               2061      MOVE.B  #' ',(A2)+
00001ED8  14FC 0053               2062      MOVE.B  #'S',(A2)+
00001EDC  14FC 0055               2063      MOVE.B  #'U',(A2)+
00001EE0  14FC 0042               2064      MOVE.B  #'B',(A2)+
00001EE4  14FC 002E               2065      MOVE.B  #'.',(A2)+
00001EE8  14FC 0057               2066      MOVE.B  #'W',(A2)+
00001EEC                          2067      *-always allow 4 spaces
00001EEC  14FC 0020               2068      MOVE.B  #' ',(A2)+
00001EF0  14FC 0020               2069      MOVE.B  #' ',(A2)+
00001EF4  14FC 0020               2070      MOVE.B  #' ',(A2)+
00001EF8  14FC 0020               2071      MOVE.B  #' ',(A2)+
00001EFC                          2072      
00001EFC                          2073      
00001EFC                          2074      
00001EFC  14FC 0044               2075          MOVE.B  #'D',(A2)+
00001F00                          2076             
00001F00  3206                    2077              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F02  E949                    2078              LSL.W   #4,D1       BIT* **** **** 0000
00001F04  E049                    2079              LSR.W   #8,D1       0000 0000 BIT* ****
00001F06  EA49                    2080              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F08  C2FC 0008               2081              MULU    #8,D1       value adjusted for jumping
00001F0C  4FF8 13C4               2082              LEA     NumTable ,A7 Load the table into A7
00001F10  4EB7 1000               2083              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F14                          2084              
00001F14                          2085              
00001F14  14FC 002C               2086              MOVE.B  #',',(A2)+
00001F18                          2087              *-INSERT IMMEDIATE DATA HERE
00001F18                          2088      *-deCDOE EA (Dn,Dn
00001F18                          2089          * MachineCode: 0001 **** **** **BI T***
00001F18                          2090   *Only next last 3 bits which is stored at D0 => Source subress mode
00001F18                          2091      *-insert immediate subressing here
00001F18  4242                    2092              CLR     D2
00001F1A  4241                    2093              CLR     D1
00001F1C  1406                    2094              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001F1E  E50A                    2095              LSL.B   #2,D2       **** **** BIT* **00
00001F20  EA0A                    2096              LSR.B   #5,D2       **** **** 0000 0BIT
00001F22  C4FC 0008               2097              MULU    #8,D2       value adjusted for jumping
00001F26  4DF8 12A6               2098              LEA     modeTable,A6 Load the table into A6
00001F2A  4EB6 2000               2099              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001F2E                          2100  
00001F2E                          2101  
00001F2E                          2102   * MachineCode: 0001 **** **** **** *BIT
00001F2E                          2103              
00001F2E  1206                    2104              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001F30  EB09                    2105              LSL.B   #5,D1       **** **** BIT0 0000
00001F32  EA09                    2106              LSR.B   #5,D1       **** **** 0000 0BIT      
00001F34  C2FC 0008               2107              MULU    #8,D1       value adjusted for jumping
00001F38  4FF8 1354               2108              LEA     regNumTable ,A7 Load the table into A7
00001F3C  4EB7 1000               2109              JSR     (A7,D1)     Jump to subroutine of value at D1
00001F40  B23C 0020               2110              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001F44  6700 F678               2111              BEQ.W   immediateData   ;branch to immediateData
00001F48                          2112  
00001F48                          2113  
00001F48  6000 015A               2114              BRA printcode  
00001F4C                          2115              
00001F4C                          2116  sub_L_EA   ;sub.L Dn -> EA
00001F4C  14FC 0020               2117      MOVE.B  #' ',(A2)+
00001F50  14FC 0020               2118      MOVE.B  #' ',(A2)+
00001F54  14FC 0020               2119      MOVE.B  #' ',(A2)+
00001F58  14FC 0020               2120      MOVE.B  #' ',(A2)+
00001F5C  14FC 0053               2121      MOVE.B  #'S',(A2)+
00001F60  14FC 0055               2122      MOVE.B  #'U',(A2)+
00001F64  14FC 0042               2123      MOVE.B  #'B',(A2)+
00001F68  14FC 002E               2124      MOVE.B  #'.',(A2)+
00001F6C  14FC 004C               2125      MOVE.B  #'L',(A2)+
00001F70                          2126      *-always allow 4 spaces
00001F70  14FC 0020               2127      MOVE.B  #' ',(A2)+
00001F74  14FC 0020               2128      MOVE.B  #' ',(A2)+
00001F78  14FC 0020               2129      MOVE.B  #' ',(A2)+
00001F7C  14FC 0020               2130      MOVE.B  #' ',(A2)+
00001F80                          2131      
00001F80                          2132      
00001F80                          2133      
00001F80  14FC 0044               2134          MOVE.B  #'D',(A2)+
00001F84                          2135             
00001F84  3206                    2136              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F86  E949                    2137              LSL.W   #4,D1       BIT* **** **** 0000
00001F88  E049                    2138              LSR.W   #8,D1       0000 0000 BIT* ****
00001F8A  EA49                    2139              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F8C  C2FC 0008               2140              MULU    #8,D1       value adjusted for jumping
00001F90  4FF8 13C4               2141              LEA     NumTable ,A7 Load the table into A7
00001F94  4EB7 1000               2142              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F98                          2143              
00001F98                          2144              
00001F98  14FC 002C               2145              MOVE.B  #',',(A2)+
00001F9C                          2146              *-INSERT IMMEDIATE DATA HERE
00001F9C                          2147      *-deCDOE EA (Dn,Dn
00001F9C                          2148          * MachineCode: 0001 **** **** **BI T***
00001F9C                          2149   *Only next last 3 bits which is stored at D0 => Source subress mode
00001F9C                          2150      *-insert immediate subressing here
00001F9C  4242                    2151              CLR     D2
00001F9E  4241                    2152              CLR     D1
00001FA0  1406                    2153              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001FA2  E50A                    2154              LSL.B   #2,D2       **** **** BIT* **00
00001FA4  EA0A                    2155              LSR.B   #5,D2       **** **** 0000 0BIT
00001FA6  C4FC 0008               2156              MULU    #8,D2       value adjusted for jumping
00001FAA  4DF8 12A6               2157              LEA     modeTable,A6 Load the table into A6
00001FAE  4EB6 2000               2158              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001FB2                          2159  
00001FB2                          2160  
00001FB2                          2161   * MachineCode: 0001 **** **** **** *BIT
00001FB2                          2162              
00001FB2  1206                    2163              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001FB4  EB09                    2164              LSL.B   #5,D1       **** **** BIT0 0000
00001FB6  EA09                    2165              LSR.B   #5,D1       **** **** 0000 0BIT      
00001FB8  C2FC 0008               2166              MULU    #8,D1       value adjusted for jumping
00001FBC  4FF8 1354               2167              LEA     regNumTable ,A7 Load the table into A7
00001FC0  4EB7 1000               2168              JSR     (A7,D1)     Jump to subroutine of value at D1
00001FC4                          2169              
00001FC4                          2170              *-ERROR HERE NOT SURE WHY AFTER sub.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001FC4                          2171  
00001FC4                          2172  
00001FC4  6000 00DE               2173              BRA printcode  
00001FC8                          2174  
00001FC8                          2175  
00001FC8                          2176  -------------------- end include --------------------
00001FC8                          2177              INCLUDE 'op0111.x68'    MOVEQ
00001FC8                          2178  op0111
00001FC8                          2179      *- MOVE Q
00001FC8  4243                    2180              CLR     D3          ;clear D3
00001FCA  1606                    2181              MOVE.B  D6,D3       ;copy data to D3
00001FCC                          2182              ;MOVE.L  #2,D7       ;size of data is long
00001FCC                          2183              ;Print/store SUBQ.B here
00001FCC  14FC 004D               2184              MOVE.B  #'M',(A2)+  ;print M
00001FD0  14FC 004F               2185              MOVE.B  #'O',(A2)+  ;print O
00001FD4  14FC 0056               2186              MOVE.B  #'V',(A2)+  ;print V
00001FD8  14FC 0045               2187              MOVE.B  #'E',(A2)+  ;print E
00001FDC  14FC 0051               2188              MOVE.B  #'Q',(A2)+  ;ptint Q
00001FE0  14FC 0020               2189              MOVE.B  #' ',(A2)+  ;
00001FE4  14FC 0020               2190              MOVE.B  #' ',(A2)+  ;print some spaces
00001FE8  14FC 0020               2191              MOVE.B  #' ',(A2)+
00001FEC  14FC 0020               2192              MOVE.B  #' ',(A2)+
00001FF0  14FC 0020               2193              MOVE.B  #' ',(A2)+
00001FF4  14FC 0023               2194              MOVE.B  #'#',(A2)+  ;print #
00001FF8  14FC 0024               2195              MOVE.B  #'$',(A2)+  ;print #
00001FFC                          2196              *-REMEMBER MOVEQ TAKES ONLY A BTYE OF DATA
00001FFC                          2197              
00001FFC                          2198              ;MOVE.B  #12,D5      ;counter for output
00001FFC  E80B                    2199              LSR.B   #4,D3       *-get bit 4 to 7 and jump with it DATA
00001FFE  C6FC 0008               2200              MULU.W  #8,D3       ;gotta get ready to jump
00002002  4DF8 13C4               2201              LEA     numTable,A6 ;load table
00002006  4EB6 3000               2202              JSR     (A6,D3)     ;branch to grab number
0000200A                          2203  
0000200A  4243                    2204              CLR     D3          ;clear D3
0000200C  1606                    2205              MOVE.B  D6,D3       ;copy data to D3
0000200E  E90B                    2206              LSL.B   #4,D3       ;get the biut 0 - 3 with it DATA to print BYTE SIZE
00002010  E80B                    2207              LSR.B   #4,D3
00002012  C6FC 0008               2208              MULU.W  #8,D3       ;gotta get ready to jump
00002016  4DF8 13C4               2209              LEA     numTable,A6 ;load table
0000201A  4EB6 3000               2210              JSR     (A6,D3)     ;branch to grab number
0000201E                          2211              
0000201E  14FC 002C               2212              MOVE.B  #',',(A2)+  ;print ,
00002022  14FC 0044               2213              MOVE.B  #'D',(A2)+  ;print D for data register and prepare to get Dn
00002026                          2214    *------------------------------------------------------------
00002026  4241                    2215              CLR     D1
00002028  3206                    2216              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000202A  E949                    2217              LSL.W   #4,D1       BIT* **** **** 0000
0000202C  E049                    2218              LSR.W   #8,D1       0000 0000 BIT* ****
0000202E  EA49                    2219              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002030  C2FC 0008               2220              MULU    #8,D1       value adjusted for jumping
00002034  4FF8 13C4               2221              LEA     numTable ,A7 Load the table into A7
00002038  4EB7 1000               2222              JSR     (A7,D1)     Jump to subroutine of value at D1  
0000203C                          2223              
0000203C  6000 0066               2224              BRA     printCode
0000203C  6000 0066               2225  -------------------- end include --------------------
00002040                          2226          
00002040                          2227              
00002040                          2228             
00002040                          2229  
00002040                          2230              
00002040                          2231  opError                             
00002040  2608                    2232              MOVE.L  A0,D3
00002042  2C03                    2233              MOVE.L  D3,D6
00002044  45F9 0000067C           2234              LEA     bad_code_buffer,A2
0000204A  7E02                    2235              MOVE.L  #2,D7
0000204C  4EB8 10B6               2236              JSR     write_data_in_D3_to_buffer
00002050                          2237              
00002050  14FC 0020               2238              MOVE.B  #' ',(A2)+      ;print spaces
00002054  14FC 0020               2239              MOVE.B  #' ',(A2)+      ;print spaces
00002058  14FC 0020               2240              MOVE.B  #' ',(A2)+      ;print spaces
0000205C  14FC 0020               2241              MOVE.B  #' ',(A2)+      ;print spaces
00002060  14FC 0044               2242              MOVE.B  #'D',(A2)+      ;print D
00002064  14FC 0041               2243              MOVE.B  #'A',(A2)+      ;print A
00002068  14FC 0054               2244              MOVE.B  #'T',(A2)+      ;print T
0000206C  14FC 0041               2245              MOVE.B  #'A',(A2)+      ;print A
00002070  14FC 0020               2246              MOVE.B  #' ',(A2)+      ;print spaces
00002074  14FC 0020               2247              MOVE.B  #' ',(A2)+      ;print spaces
00002078  14FC 0020               2248              MOVE.B  #' ',(A2)+      ;print spaces
0000207C  14FC 0020               2249              MOVE.B  #' ',(A2)+      ;print spaces
00002080                          2250              
00002080                          2251              
00002080  14FC 0046               2252              MOVE.B  #'F',(A2)+      ;print spaces
00002084  14FC 0046               2253              MOVE.B  #'F',(A2)+      ;print spaces
00002088  14FC 0046               2254              MOVE.B  #'F',(A2)+      ;print spaces
0000208C  14FC 0046               2255              MOVE.B  #'F',(A2)+      ;print spaces
00002090                          2256              
00002090                          2257              
00002090                          2258              ;MOVE.L  (A0),D3
00002090                          2259              ;MOVE.L  D3,D6
00002090                          2260              ;MOVE.L  #1,D7
00002090                          2261              ;JSR     write_data_in_D3_to_buffer
00002090                          2262              
00002090  14BC 0000               2263              MOVE.B  #$00,(A2) * add NULL value to print string
00002094  43F9 0000067C           2264              LEA     bad_code_buffer,A1
0000209A  103C 000D               2265              MOVE.B  #13,D0
0000209E  4E4F                    2266              TRAP    #15   
000020A0                          2267           
000020A0  6000 EFD4               2268              BRA     get_next_instruction           
000020A4                          2269  printCode   
000020A4  14BC 0000               2270              MOVE.B  #$00,(A2)   * add NULL value to print string
000020A8  070A 0000               2271              MOVEP   (A2),D3
000020AC  43F9 00000624           2272              LEA     good_code_buffer,A1 * load buffer for good code to print
000020B2  700D                    2273              MOVEQ   #13,D0
000020B4  4E4F                    2274              TRAP    #15         * display code
000020B6                          2275    
000020B6  6000 EFBE               2276              BRA     get_next_instruction                     
000020BA                          2277  * OP Codes -------------------------------------------------
000020BA  =00000000               2278  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
000020BA  =00000001               2279  bin0001     EQU     %0001   ;MOVE.B
000020BA  =00000002               2280  bin0010     EQU     %0010   ;MOVE.L
000020BA  =00000003               2281  bin0011     EQU     %0011   ;MOVE.W
000020BA  =00000004               2282  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
000020BA  =00000005               2283  bin0101     EQU     %0101   ;SUBQ
000020BA  =00000006               2284  bin0110     EQU     %0110   ;Bcc
000020BA  =00000007               2285  bin0111     EQU     %0111   ;MOVEQ
000020BA  =00000008               2286  bin1000     EQU     %1000   ;DIVU.W
000020BA  =00000009               2287  bin1001     EQU     %1001   ;SUB, SUBA
000020BA  =0000000B               2288  bin1011     EQU     %1011   ;CMP, CMPA, EOR
000020BA  =0000000C               2289  bin1100     EQU     %1100   ;AND, MULS.W
000020BA  =0000000D               2290  bin1101     EQU     %1101   ;ADD, ADDA
000020BA  =0000000E               2291  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
000020BA                          2292  
000020BA                          2293  *Binary HEX values*---------------------------------------------------------------
000020BA  =00000000               2294  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
000020BA  =00000001               2295  hex_1   EQU     %0001 ;1
000020BA  =00000002               2296  hex_2   EQU     %0010 ;2    
000020BA  =00000003               2297  hex_3   EQU     %0011 ;3
000020BA  =00000004               2298  hex_4   EQU     %0100 ;4
000020BA  =00000005               2299  hex_5   EQU     %0101 ;5
000020BA  =00000006               2300  hex_6   EQU     %0110 ;6
000020BA  =00000007               2301  hex_7   EQU     %0111 ;7
000020BA  =00000008               2302  hex_8   EQU     %1000 ;8
000020BA  =00000009               2303  hex_9   EQU     %1001 ;9
000020BA  =0000000A               2304  hex_A   EQU     %1010 ;A
000020BA  =0000000B               2305  hex_B   EQU     %1011 ;B
000020BA  =0000000C               2306  hex_C   EQU     %1100 ;C
000020BA  =0000000D               2307  hex_D   EQU     %1101 ;D
000020BA  =0000000E               2308  hex_E   EQU     %1110 ;E
000020BA  =0000000F               2309  hex_F   EQU     %1111 ;F      
000020BA                          2310              
000020BA                          2311  ;LOOP:
000020BA                          2312                  *-compare the adress pointers current address with ending address to see if we need to continue
000020BA                          2313                  *- load the address registrer (pointer/ this helps us look at data)
000020BA                          2314                  *-load address register number into data register
000020BA                          2315                  
000020BA                          2316                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
000020BA                          2317                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
000020BA                          2318                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
000020BA                          2319                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
000020BA                          2320                  ;BEQ     FINISH      ;finish they are equal
000020BA                          2321                  ;RTS
000020BA                          2322  
000020BA                          2323          
000020BA                          2324          *----------END OF I/O SECTION*---
000020BA                          2325          *----------Start of OPCODE SUBROUTINE
000020BA  =0000A000               2326  stack            EQU        $A000  
000020BA  =0000000C               2327  shift            EQU        12                   * Shift 12 bits 
00000400                          2328                   ORG        $400
00000400                          2329           
00000400  4FF9 0000A000           2330  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           2331                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    2332                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           2333                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    2334                   MOVE.W     (A1),D0
00000416  123C 000C               2335                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    2336                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               2337                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               2338                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          2339                   
00000424  4EF9 00000484           2340  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           2341                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           2342                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           2343                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           2344                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           2345                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           2346                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           2347                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           2348                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           2349                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           2350                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           2351                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           2352                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           2353                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           2354                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           2355                   JMP        code1111        *Special/Reserved
00000484                          2356                   
00000484  4E72 2700               2357  code0000         STOP       #$2700
00000488  4E72 2700               2358  code0001         STOP       #$2700
0000048C  4E72 2700               2359  code0010         STOP       #$2700
00000490  4E72 2700               2360  code0011         STOP       #$2700
00000494  267C 00000000           2361  code0100         MOVE.L     #0,A3
0000049A  4241                    2362                   CLR        D1
0000049C  43F9 000006D5           2363                   LEA        enter_start_AD,A1
000004A2  700E                    2364                   MOVE.L     #14,D0
000004A4  4E4F                    2365                   TRAP       #15
000004A6  4E75                    2366                   RTS
000004A8  4E72 2700               2367  code0101         STOP       #$2700
000004AC  4E72 2700               2368  code0110         STOP       #$2700
000004B0  4E72 2700               2369  code0111         STOP       #$2700
000004B4  4E72 2700               2370  code1000         STOP       #$2700
000004B8  4E72 2700               2371  code1001         STOP       #$2700
000004BC  4E72 2700               2372  code1010         STOP       #$2700
000004C0  4E72 2700               2373  code1011         STOP       #$2700
000004C4  4E72 2700               2374  code1100         STOP       #$2700
000004C8  4E72 2700               2375  code1101         STOP       #$2700
000004CC  4E72 2700               2376  code1110         STOP       #$2700
000004D0  4E72 2700               2377  code1111         STOP       #$2700
000004D4                          2378  
000004D4                          2379  FINISH:
000004D4                          2380          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    2381              MOVE.L  A0,D3
000004D6  2C03                    2382              MOVE.L  D3,D6
000004D8  45F9 00000624           2383              LEA     good_code_buffer,A2
000004DE                          2384   
000004DE                          2385              
000004DE  14FC 0046               2386              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               2387              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               2388              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               2389              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               2390              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               2391              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               2392              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               2393              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               2394              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               2395              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               2396              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               2397              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               2398              MOVE.B  #'R',(A2)+
00000512  2610                    2399              MOVE.L  (A0),D3
00000514  2C03                    2400              MOVE.L  D3,D6
00000516  7E01                    2401              MOVE.L  #1,D7
00000518                          2402  
00000518                          2403              
00000518  14BC 0000               2404              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           2405              LEA     good_code_buffer,A1
00000522  103C 000D               2406              MOVE.B  #13,D0
00000526  4E4F                    2407              TRAP    #15   
00000528  FFFF FFFF               2408              SIMHALT
0000052C                          2409  
0000052C                          2410  *-390 -> 406 WITH NOP AT 400
0000052C                          2411  
0000052C                          2412  
0000052C                          2413  hexToAscii:
0000052C                          2414  ones:
0000052C  3A02                    2415      MOVE.W  D2,D5
0000052E  CAFC 0008               2416      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13C4               2417      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               2418      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          2419      *-adding res
0000053A                          2420      ;ADD     D2,D7
0000053A                          2421      
0000053A                          2422  
0000053A  4E75                    2423      RTS
0000053C                          2424  
0000053C                          2425  
0000053C                          2426  
0000053C                          2427  
0000053C                          2428  
0000053C                          2429  
0000053C                          2430  
0000053C                          2431  
0000053C                          2432  
0000053C                          2433  
0000053C                          2434  
0000053C                          2435  
0000053C                          2436  
0000053C                          2437  *-Parses input - take input from user to create a memory address
0000053C                          2438  *- entry is parsed to make sure it falls within a valid range
0000053C                          2439  *-good inputs are converteed to hex
0000053C                          2440  *-the entered addres get's stored in d3
0000053C                          2441  *-
0000053C                          2442  *-
0000053C                          2443  
0000053C                          2444  
0000053C                          2445  
0000053C  7C00                    2446  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    2447                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          2448                  
00000540                          2449                  *-CHECK TO SEE INPUT DATA
00000540  B205                    2450                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               2451                  BEQ     error_no_input no input was found
00000546  0C41 0008               2452                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               2453                  BGT     error_bad_entry
0000054E                          2454                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               2455                  BRA     parse_each
00000552                          2456  
00000552  7C00                    2457  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    2458                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    2459                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               2460                  BEQ     error_no_input
0000055C  0C41 0008               2461                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               2462                  BGT     error_bad_entry
00000564                          2463                  ;BGT     error_to_many_char
00000564  6000 0002               2464                  BRA     parse_each        
00000568                          2465  
00000568                          2466  *parse each analyzes each ind character entered
00000568                          2467  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          2468  
00000568  1419                    2469  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    2470                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               2471                  BEQ     parse_complete  end of user input
00000570  B43C 0066               2472                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               2473                  BGT     hex_compare
00000578                          2474                  
00000578                          2475                  *-
00000578                          2476                  *Comapare the decimal number values betyween 0 -9 first
00000578                          2477                  *
00000578                          2478                  *-
00000578  B43C 002F               2479  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          2480                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               2481                  BLE     error_char 
00000580  B43C 003A               2482                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               2483                  BLT     dec_convert
00000588                          2484                  *-
00000588                          2485                  *there are no number values, lets check alpha characters
00000588                          2486                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          2487                  *->71 'G' then we should go and convert to hex range A-F
00000588                          2488                  *-UPPER case
00000588                          2489                  *-      
00000588  B43C 0041               2490  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               2491                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               2492                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               2493                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               2494  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               2495                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               2496                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               2497                  BLT     lower_ascii
000005A8                          2498                  
000005A8                          2499           
000005A8  0402 0030               2500  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          2501                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    2502                  ASL.L   #4,D6
000005AE  DC02                    2503                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    2504                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          2505                                      *- 97 - 103
000005B2                          2506                  
000005B2                          2507                              
000005B2                          2508  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          2509  
000005B2  0402 0037               2510  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    2511                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    2512                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    2513                  BRA     parse_each  parse next item
000005BC                          2514  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               2515  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    2516                  ASL.L   #4,D6
000005C2  DC02                    2517                  ADD.B   D2,D6
000005C4  60A2                    2518                  BRA     parse_each
000005C6                          2519  
000005C6  7801                    2520  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    2521                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           2522  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    2523                  MOVE.L  #1,D0
000005D2  4E4F                    2524                  TRAP    #15
000005D4                          2525                  ;JMP     get_input
000005D4  43F9 000006C2           2526  error_char      LEA bad_char,A1
000005DA  4E4F                    2527                  trap #15
000005DC                          2528                  ;JMP get_input0
000005DC  43F9 000006AD           2529  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    2530                  TRAP #15
000005E4                          2531                  ;JMP  get_input
000005E4                          2532  
000005E4                          2533  
000005E4  FFFF FFFF               2534      SIMHALT             ; halt simulator
000005E8                          2535  
000005E8                          2536  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   2537  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          2538  
00000624                          2539  
00000624                          2540  good_code_buffer    DS.B    88
0000067C                          2541  
0000067C                          2542  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   2543  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   2544  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   2545  bad_char    DC.B    'Bad Char detected.',0
000006D5                          2546  *-errors
000006D5                          2547  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   2548  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          2549  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          2550  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          2551  
00000754= 45 6E 74 65 72 20 ...   2552  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          2553  
00000789                          2554  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               2555  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    2556                          MOVE.L  #1,D0
000007C2  4E4F                    2557                          TRAP    #15
000007C4                          2558                          ;JMP     get_input
000007C4                          2559  
000007C4                          2560  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          2561  
000007C4                          2562      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        1644
ABSOULTEWORD        15EA
ADDA_L              1954
ADDA_W              18CA
ADDRESSCOUNT        1064
ADD_B               1738
ADD_B_EA            19DE
ADD_L               1844
ADD_L_EA            1AFE
ADD_W               17BE
ADD_W_EA            1A76
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_0_3_BIT         14A4
GET_3_5BIT          14A4
GET_NEXT_INSTRUCTION  1076
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         588
HEX_D               D
HEX_E               E
HEX_F               F
IA000               1152
IA001               11B4
IA010               114E
IA011               1150
IA100               1274
IMMABTABLE          1126
IMMEDIATEDATA       15BE
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12E6
M0001               12F2
M0010               12FE
M0011               1312
M0100               132A
M0101               1342
M0110               1344
M0111               1346
MAINLOOP            1036
MODETABLE           12A6
N0000               1444
N0001               144A
N0010               1450
N0011               1456
N0100               145C
N0101               1462
N0110               1468
N0111               146E
N1000               1474
N1001               147A
N1010               1480
N1011               1486
N1100               148C
N1101               1492
N1110               1498
N1111               149E
NO_ENTRY            69A
NUMTABLE            13C4
ONES                52C
OP0001              1524
OP0100              14C8
OP0111              1FC8
OP1001              1B7A
OP1101              16F4
OPERROR             2040
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           20A4
PRINT_WORD          10CC
REGISTERPRINT       1348
REGNUMTABLE         1354
RN0000              1394
RN0001              139A
RN0010              13A0
RN0011              13A6
RN0100              13AC
RN0101              13B2
RN0110              13B8
RN0111              13BE
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
SUBA_L              1DA2
SUBA_W              1D18
SUB_B               1B86
SUB_B_EA            1E2C
SUB_L               1C92
SUB_L_EA            1F4C
SUB_W               1C0C
SUB_W_EA            1EC4
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WORDORLONG          14B0
WRITE_DATA_IN_D3_TO_BUFFER  10B6
_NOP                14D8
_RTS                14FE
