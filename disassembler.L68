00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 12:27:04 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  
00001000                            15  *--- Notes
00001000                            16  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            17  * A4 will be our main pointer to current memory address and current data
00001000                            18  * D3 will be dedicated register to manipulate our data in
00001000                            19  *
00001000                            20  *
00001000                            21  *---------
00001000                            22  START:                  
00001000                            23              ; first instruction of program
00001000                            24              ;LEA     stack,SP
00001000                            25              *-present the hello message
00001000  43F9 000005E8             26              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 27              MOVE.B  #14,D0
0000100A  4E4F                      28              TRAP    #15
0000100C                            29              
0000100C                            30  *           
0000100C                            31  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            32  *
0000100C                            33  ** Put program code here
0000100C                            34  **-----
0000100C                            35  **This program starts by given a starting address and an ending address disassemble
0000100C                            36  **the binary code that is at that location.
0000100C                            37  **
0000100C                            38  **
0000100C                            39  **----
0000100C                            40  *
0000100C                            41  **-------
0000100C                            42  ** Needs to check for odd addressing**
0000100C                            43  **
0000100C                            44  **
0000100C                            45  **-----
0000100C                            46  *                *---------------------I/O SECTION
0000100C                            47  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            48  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            49  *                * statically in memory and retrieved when needed to compare
0000100C                            50  *                * this free's up a adress/data register to use
0000100C                            51  *                *-----------------------
0000100C                            52  *                
0000100C                            53  *                
0000100C                            54  *get_input_start_addr 
0000100C                            55  *                MOVE.L  #0,A3
0000100C                            56  *                CLR     D1
0000100C                            57  *                LEA     enter_start_AD,A1
0000100C                            58  *                MOVE.L  #14,D0
0000100C                            59  *                TRAP    #15
0000100C                            60  *                
0000100C                            61  *                
0000100C                            62  *
0000100C                            63  *      
0000100C                            64  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            65  *                MOVE.L  #2,D0
0000100C                            66  *                TRAP    #15
0000100C                            67  *                JSR     parse_input             parse the starting address
0000100C                            68  *                
0000100C                            69  *                
0000100C                            70  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            71  *                
0000100C                            72  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            73  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            74  *
0000100C                            75  *
0000100C                            76  *get_input_end_addr
0000100C                            77  *                MOVE.L  #0,A3
0000100C                            78  *                CLR     D1
0000100C                            79  *                LEA     userEnd,A1
0000100C                            80  *                MOVE.L  #14,D0
0000100C                            81  *                TRAP    #15
0000100C                            82  *                
0000100C                            83  *
0000100C                            84  *
0000100C                            85  *                LEA     userEndAddrInput,A1
0000100C                            86  *                MOVE.B  userEnd,D1
0000100C                            87  *                MOVE.L  #2,D0
0000100C                            88  *                TRAP    #15
0000100C                            89  *                JSR     parse_end
0000100C                            90  *
0000100C                            91  *                
0000100C                            92  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                            93  *  
0000100C                            94  *             
0000100C                            95  *STORE_SRT_END:
0000100C                            96  *               
0000100C                            97  *                      ;store the starting and ending address into memory out of range
0000100C                            98  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                            99  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           100  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           101  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           102  *            MOVE.L  A5,A4
0000100C                           103              
0000100C                           104              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           105              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           106              *
0000100C  2C3C 00000996            107              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     108              MOVE.L  D6,A5       Move D6 into a5
00001014                           109              
00001014  2C3C 000009CF            110              MOVE.L  #$9CF,D6
0000101A  2C46                     111              MOVE.L  D6,A6
0000101C                           112              
0000101C                           113              
0000101C  23CD 00FFFF00            114              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            115              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     116              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           117              *
0000102A                           118              *
0000102A                           119              *-------------END OF TESING CODE-----------
0000102A                           120          
0000102A  6000 0052                121              BRA get_next_instruction
0000102E                           122                           
0000102E                           123                           
0000102E                           124     
0000102E                           125  *---move_addresses:
0000102E                           126                                  
0000102E                           127                  *-MOVE 2 INTO DATA REG
0000102E                           128                  
0000102E                           129                  ;JSR     LOOP
0000102E                           130                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           131                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           132                  
0000102E                           133                  *----MOVE.W  A4,A0
0000102E                           134                  
0000102E                           135                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           136                  *----MOVE.B  #2,D4
0000102E                           137                  
0000102E                           138                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           139                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           140                  *------MOVE.L  D3,D7
0000102E                           141                  
0000102E                           142  
0000102E                           143  
0000102E                           144  
0000102E                           145                  *------LEA     good_code_buffer,A2 load again
0000102E                           146                  *------JSR     print_d3
0000102E                           147                  
0000102E                           148                  
0000102E                           149                  ;JSR     get_opcode 
0000102E                           150  
0000102E                           151                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           152                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           153                  ;SIMHALT
0000102E                           154  
0000102E                           155  
0000102E                           156  * ---------------------------------------------------------- 
0000102E                           157  * Decode ---------------------------------------------------
0000102E  49F8 7000                158              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 004A                159              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           160       
00001036                           161  mainLoop          
00001036                           162              *-----
00001036                           163              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           164              *- listing of finished and un finished work
00001036                           165              *-          ***Machine Code saved in D6*****
00001036                           166              *-----
00001036                           167  
00001036  E84B                     168              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           169              
00001038                           170              ;compare bits to instructions
00001038                           171              
00001038  B63C 0001                172              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           173              *- Machine code saved in D6
0000103C  6700 04F0                174              BEQ     op0001      ;branch to op0001
00001040                           175              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           176              ;BEQ     op0011      ;branch to op0011
00001040                           177              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           178              ;BEQ     op0010      ;branch to op0010           
00001040  B63C 0007                179              CMP.B   #bin0111,D3 ;MOVEQ
00001044  6700 0F8C                180              BEQ     op0111      ;branch to op0111                        
00001048  B63C 0004                181              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
0000104C  6700 0484                182              BEQ     op0100          branch to op0100                        
00001050  B63C 000D                183              CMP.B   #bin1101,D3 ;ADD, ADDA
00001054  6700 06A8                184              BEQ     op1101      ;branch to op1101            
00001058  B63C 0009                185              CMP.B   #bin1001,D3 ;SUB, SUBA
0000105C  6700 0B26                186              BEQ     op1001      ;branch to op1001                        
00001060                           187              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001060                           188              ;BEQ     op0000      ;branch to op0000                       
00001060                           189              ;CMP.B   #bin0101,D3 ;SUBQ
00001060                           190              ;BEQ     op0101      ;branch to op0101                         
00001060                           191              ;CMP.B   #bin0110,D3 ;Bcc
00001060                           192              ;BEQ     op0110      ;branch to op0110            
00001060  B63C 0008                193              CMP.B   #bin1000,D3 ;DIVU.W
00001064  6700 0FF8                194              BEQ     op1000      ;branch to op1000                                      
00001068                           195              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001068                           196              ;BEQ     op1011      ;branch to op1011 
00001068                           197              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001068                           198              ;BEQ     op1100      ;branch to op1100                                    
00001068                           199              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001068                           200              ;BEQ     op1110      ;branch to op1110            
00001068                           201              
00001068  6000 106E                202              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
0000106C                           203              
0000106C                           204              ;branch to display opError display
0000106C                           205              
0000106C                           206              ;print all the things...
0000106C                           207   *******************************************************************************
0000106C                           208  *
0000106C                           209  *******************************************************************************
0000106C                           210  addressCount 
0000106C                           211              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
0000106C                           212              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
0000106C                           213              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
0000106C                           214              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
0000106C                           215              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
0000106C                           216              
0000106C  4BF9 00FFFF10            217              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
00001072  2215                     218              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
00001074  2A0C                     219              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
00001076  B285                     220              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001078  6F00 F45A                221              BLE     FINISH      * branch to end if ending address reached
0000107C  4E75                     222              RTS                 * return IF WE HAVE NOT FINISHED
0000107E                           223              
0000107E                           224  get_next_instruction:
0000107E  4EB8 106C                225                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
00001082                           226                  *-line count
00001082  4245                     227                  CLR D5             *-CLEAR THIS REGISTER/
00001084                           228                  
00001084  45F9 00000624            229                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
0000108A  304C                     230                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
0000108C  7E02                     231                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
0000108E  2608                     232                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001090  2C03                     233                  MOVE.L  D3,D6   
00001092  45F9 00000624            234                  LEA     good_code_buffer,A2
00001098                           235                                  *-write the current data moved to data register d3
00001098  4EB9 000010C0            236                  JSR     write_data_in_D3_to_buffer
0000109E                           237                  
0000109E  14BC 0020                238                  MOVE.B  #' ',(A2)
000010A2  14BC 0020                239                  MOVE.B  #' ',(A2)
000010A6  14BC 0020                240                  MOVE.B  #' ',(A2)
000010AA  14BC 0020                241                  MOVE.B  #' ',(A2)
000010AE                           242                  
000010AE  4286                     243                  CLR.L   D6
000010B0  4283                     244                  CLR.L   D3
000010B2                           245                  
000010B2  3A4C                     246                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
000010B4                           247                  
000010B4  3C1C                     248                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010B6                           249                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010B6                           250  
000010B6  2814                     251                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010B8  3606                     252                  MOVE.W  D6,D3
000010BA  E04B                     253                  LSR.W   #8,D3
000010BC                           254                  
000010BC  6000 FF78                255                  BRA     mainLoop
000010C0                           256                  
000010C0                           257  write_data_in_D3_to_buffer:
000010C0                           258              *------
000010C0                           259              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010C0                           260              *
000010C0                           261              *
000010C0                           262              *---------
000010C0  BE7C 0002                263                  CMP.W   #2,D7 ERROR checking
000010C4  6600 0010                264                  BNE     print_word branch off to write the first word of the line
000010C8  4843                     265                  SWAP    D3
000010CA  4846                     266                  SWAP    D6
000010CC  4EB9 000010D6            267                  JSR     print_word
000010D2  4846                     268                  SWAP    D6
000010D4  2606                     269                  MOVE.L  D6,D3
000010D6                           270                  
000010D6                           271   print_word:
000010D6                           272                  *-****
000010D6                           273                  * called 4 times to decode from hex to ascii the first word 
000010D6                           274                  *   using the below jump table
000010D6                           275                  *
000010D6                           276                  *-------
000010D6  E04B                     277                  LSR.W   #8,D3
000010D8  E84B                     278                  LSR.W   #4,D3
000010DA  C6FC 0008                279                  MULU.W  #8,D3
000010DE  4DF9 000013CE            280                  LEA     numTable,A6
000010E4  4EB6 3000                281                  JSR     (A6,D3)
000010E8                           282                  
000010E8  3606                     283                  MOVE.W  D6,D3   COPY DATA
000010EA  E94B                     284                  LSL.W   #4,D3
000010EC  E04B                     285                  LSR.W   #8,D3
000010EE  E84B                     286                  LSR.W   #4,D3
000010F0  C6FC 0008                287                  MULU.W  #8,D3
000010F4  4DF9 000013CE            288                  LEA     numTable,A6
000010FA  4EB6 3000                289                  JSR     (A6,D3)
000010FE                           290                  
000010FE  3606                     291                  MOVE.W  D6,D3
00001100                           292                  
00001100  E14B                     293                  LSL.W   #8,D3
00001102  E04B                     294                  LSR.W   #8,D3
00001104  E84B                     295                  LSR.W   #4,D3
00001106  C6FC 0008                296                  MULU.W  #8,D3
0000110A  4DF9 000013CE            297                  LEA numTable,A6
00001110  4EB6 3000                298                  JSR     (A6,D3)
00001114                           299                  
00001114                           300                  
00001114  3606                     301                  MOVE.W  D6,D3
00001116  E94B                     302                  LSL.W   #4,D3
00001118  E14B                     303                  LSL.W   #8,D3
0000111A  E04B                     304                  LSR.W   #8,D3
0000111C  E84B                     305                  LSR.W   #4,D3
0000111E  C6FC 0008                306                  MULU.W  #8,D3
00001122  4DF9 000013CE            307                  LEA     numTable,A6
00001128  4EB6 3000                308                  JSR     (A6,D3)
0000112C  5805                     309                  ADDI.B  #4,D5
0000112E  4E75                     310                  RTS
00001130                           311  * -----------------------------------------------------------            
00001130                           312  * Jump Table immAbTable *************************************
00001130                           313  *** matches the associated Addressing mode     
00001130                           314  *************************************************************
00001130  4EB9 0000115C            315  immAbTable  JSR     IA000   ;Absoulute Word
00001136  4E75                     316              RTS             ;return, done printing
00001138  4EB9 000011BE            317              JSR     IA001   ;Aboulute Long
0000113E  4E75                     318              RTS             ;return, done printing
00001140  4EB9 00001158            319              JSR     IA010   ;blank
00001146  4E75                     320              RTS             ;return, done printing
00001148  4EB9 0000115A            321              JSR     IA011   ;blank
0000114E  4E75                     322              RTS             ;return, done printing  
00001150  4EB9 0000127E            323              JSR     IA100   ;immediate Data
00001156  4E75                     324              RTS             ;return, done printing
00001158                           325  * -----------------------------------------------------------            
00001158  4E75                     326  IA010       RTS
0000115A  4E75                     327  IA011       RTS
0000115C                           328  * -----------------------------------------------------------            
0000115C                           329  * Subroutine IA000   ------------------------------------------
0000115C                           330  IA000                               ;absoulteWord   
0000115C  14FC 0024                331              MOVE.B  #'$',(A2)+ 
00001160  E08C                     332              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001162  E08C                     333              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001164                           334              *4MSB   X***
00001164  4241                     335              CLR     D1
00001166  3204                     336              MOVE.W  D4,D1       X***
00001168  E049                     337              LSR.W   #8,D1       00X*
0000116A  E849                     338              LSR.W   #4,D1       000X
0000116C  4FF9 000013CE            339              LEA     numTable ,A7 Load the table into A7
00001172  C2FC 0008                340              MULU    #8,D1
00001176  4EB7 1000                341              JSR     (A7,D1)     Jump to subroutine of value at D1 
0000117A                           342              *next 4MSB  *X**
0000117A  4241                     343              CLR     D1
0000117C  3204                     344              MOVE.W  D4,D1       *X**
0000117E  E949                     345              LSL.W   #4,D1       X**0        
00001180  E049                     346              LSR.W   #8,D1       00X*
00001182  E849                     347              LSR.W   #4,D1       000X
00001184  4FF9 000013CE            348              LEA     numTable ,A7 Load the table into A7
0000118A  C2FC 0008                349              MULU    #8,D1
0000118E  4EB7 1000                350              JSR     (A7,D1)     Jump to subroutine of value at D1
00001192                           351              *next 4MSB  **X*
00001192  4241                     352              CLR     D1
00001194  1204                     353              MOVE.B  D4,D1       00X*
00001196  E809                     354              LSR.B   #4,D1       000X
00001198  4FF9 000013CE            355              LEA     numTable ,A7 Load the table into A7
0000119E  C2FC 0008                356                          MULU    #8,D1
000011A2  4EB7 1000                357              JSR     (A7,D1)     Jump to subroutine of value at D1
000011A6                           358              *last 4  bits   ***X
000011A6  4241                     359              CLR     D1
000011A8  1204                     360              MOVE.B  D4,D1       00*X
000011AA  E909                     361              LSL.B   #4,D1       00X0    
000011AC  E809                     362              LSR.B   #4,D1       000X
000011AE  4FF9 000013CE            363              LEA     numTable ,A7 Load the table into A7
000011B4  C2FC 0008                364                          MULU    #8,D1
000011B8  4EB7 1000                365              JSR     (A7,D1)     Jump to subroutine of value at D1
000011BC  4E75                     366              RTS           
000011BE                           367  * -----------------------------------------------------------            
000011BE                           368  * Subroutine IA001   ------------------------------------------
000011BE                           369  IA001                               ;absoulteLong
000011BE  4241                     370              CLR     D1
000011C0  4242                     371              CLR     D2 
000011C2  14FC 0024                372              MOVE.B  #'$',(A2)+ 
000011C6  2404                     373              MOVE.L  D4,D2       D2 will be used for later
000011C8                           374  *----------- first Word Value D4
000011C8  E08C                     375              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011CA  E08C                     376              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011CC                           377              *4MSB   X***
000011CC  4241                     378              CLR     D1
000011CE  3204                     379              MOVE.W  D4,D1       X***
000011D0  E049                     380              LSR.W   #8,D1       00X*
000011D2  E849                     381              LSR.W   #4,D1       000X
000011D4  4FF9 000013CE            382              LEA     numTable ,A7 Load the table into A7
000011DA  C2FC 0008                383              MULU    #8,D1
000011DE  4EB7 1000                384              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011E2                           385              *next 4MSB  *X**
000011E2  4241                     386              CLR     D1
000011E4  3204                     387              MOVE.W  D4,D1       *X**
000011E6  E949                     388              LSL.W   #4,D1       X**0        
000011E8  E049                     389              LSR.W   #8,D1       00X*
000011EA  E849                     390              LSR.W   #4,D1       000X
000011EC  4FF9 000013CE            391              LEA     numTable ,A7 Load the table into A7
000011F2  C2FC 0008                392              MULU    #8,D1
000011F6  4EB7 1000                393              JSR     (A7,D1)     Jump to subroutine of value at D1
000011FA                           394              *next 4MSB  **X*
000011FA  4241                     395              CLR     D1
000011FC  1204                     396              MOVE.B  D4,D1       00X*
000011FE  E809                     397              LSR.B   #4,D1       000X
00001200  4FF9 000013CE            398              LEA     numTable ,A7 Load the table into A7
00001206  C2FC 0008                399              MULU    #8,D1
0000120A  4EB7 1000                400              JSR     (A7,D1)     Jump to subroutine of value at D1
0000120E                           401              *last 4  bits   ***X
0000120E  4241                     402              CLR     D1
00001210  1204                     403              MOVE.B  D4,D1       00*X
00001212  E909                     404              LSL.B   #4,D1       00X0    
00001214  E809                     405              LSR.B   #4,D1       000X
00001216  4FF9 000013CE            406              LEA     numTable ,A7 Load the table into A7
0000121C  C2FC 0008                407              MULU    #8,D1
00001220  4EB7 1000                408              JSR     (A7,D1)     Jump to subroutine of value at D1
00001224                           409  *---------  Second Word Value D2    **** XXXX
00001224                           410              *4MSB   X***
00001224  4241                     411              CLR     D1
00001226  3202                     412              MOVE.W  D2,D1
00001228  E049                     413              LSR.W   #8,D1            00X*
0000122A  E849                     414              LSR.W   #4,D1            000X
0000122C  C2FC 0008                415              MULU    #8,D1
00001230  4FF9 000013CE            416              LEA     numTable ,A7 Load the table into A7
00001236  4EB7 1000                417              JSR     (A7,D1)     Jump to subroutine of value at D1
0000123A                           418              *next 4MSB  *X**
0000123A  4241                     419              CLR     D1
0000123C  3202                     420              MOVE.W  D2,D1
0000123E  E949                     421              LSL.W   #4,D1       X**0
00001240  E049                     422              LSR.W   #8,D1       00X*
00001242  E809                     423              LSR.B   #4,D1       000X
00001244  C2FC 0008                424              MULU    #8,D1
00001248  4FF9 000013CE            425              LEA     numTable ,A7 Load the table into A7
0000124E  4EB7 1000                426              JSR     (A7,D1)     Jump to subroutine of value at D1
00001252                           427              *next 4MSB  **X*
00001252  4241                     428              CLR     D1
00001254  1202                     429              MOVE.B  D2,D1       00X*
00001256  E809                     430              LSR.B   #4,D1       000X
00001258  C2FC 0008                431              MULU    #8,D1
0000125C  4FF9 000013CE            432              LEA     numTable ,A7 Load the table into A7
00001262  4EB7 1000                433              JSR     (A7,D1)     Jump to subroutine of value at D1
00001266                           434              *next 4MSB  ***X
00001266  4241                     435              CLR     D1
00001268  1202                     436              MOVE.B  D2,D1       00*X
0000126A  E909                     437              LSL.B   #4,D1       00X0
0000126C  E809                     438              LSR.B   #4,D1       000X
0000126E  C2FC 0008                439              MULU    #8,D1
00001272  4FF9 000013CE            440              LEA     numTable ,A7 Load the table into A7
00001278  4EB7 1000                441              JSR     (A7,D1)     Jump to subroutine of value at D1
0000127C                           442             
0000127C  4E75                     443              RTS
0000127E                           444   
0000127E                           445  * -----------------------------------------------------------            
0000127E                           446  * Subroutine IA100   ------------------------------------------
0000127E                           447  IA100                               ;immediateData
0000127E                           448  
0000127E  14FC 0023                449              MOVE.B  #'#',(A2)+ 
00001282  14FC 0024                450              MOVE.B  #'$',(A2)+
00001286  381D                     451              MOVE.W  (A5)+,D4    WE got the address for the operand
00001288  3815                     452              MOVE.W  (A5),D4     Got the value of operand, immeditae data
0000128A                           453              *4MSB   00X*
0000128A  4242                     454              CLR     D2
0000128C  1404                     455              MOVE.B  D4,D2       00X*
0000128E  E80A                     456              LSR.B   #4,D2       000X
00001290  C4FC 0008                457              MULU    #8,D2   
00001294  4FF9 000013CE            458              LEA     numTable ,A7 Load the table into A7
0000129A  4EB7 2000                459              JSR     (A7,D2)     Jump to subroutine of value at D2
0000129E                           460              *last 4bits 00*X
0000129E  4242                     461              CLR     D2
000012A0  1404                     462              MOVE.B  D4,D2       00*X
000012A2  E90A                     463              LSL.B   #4,D2       00X*
000012A4  E80A                     464              LSR.B   #4,D2       000X
000012A6  C4FC 0008                465              MULU    #8,D2   
000012AA                           466             
000012AA  4EB7 2000                467              JSR     (A7,D2)     Jump to subroutine of value at D2
000012AE                           468  
000012AE  4E75                     469              RTS
000012B0                           470  
000012B0                           471                            
000012B0                           472  * -----------------------------------------------------------            
000012B0                           473  * Jump Table modeTable ***************************************
000012B0                           474  *** matches the associated Addressing mode     
000012B0                           475  *************************************************************
000012B0  4EB9 000012F0            476  modeTable   JSR     M0000   ;Dn, Data Register 
000012B6  4E75                     477              RTS             ;return, done printing
000012B8  4EB9 000012FC            478              JSR     M0001   ;An, Address Register 
000012BE  4E75                     479              RTS             ;return, done printing
000012C0  4EB9 00001308            480              JSR     M0010   ;(An), Address
000012C6  4E75                     481              RTS             ;return, done printing
000012C8  4EB9 0000131C            482              JSR     M0011   ;(An)+, Address with Postincrement
000012CE  4E75                     483              RTS             ;return, done printing
000012D0                           484              
000012D0  4EB9 00001334            485              JSR     M0100   ;-(An), Address with Predecrement
000012D6  4E75                     486              RTS             ;return, done printing
000012D8  4EB9 0000134C            487              JSR     M0101   ; blank - not assigned for this project
000012DE  4E75                     488              RTS
000012E0  4EB9 0000134E            489              JSR     M0110   ; blank - not assigned for this project
000012E6  4E75                     490              RTS
000012E8  4EB9 00001350            491              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012EE  4E75                     492              RTS             ;return, done printing           
000012F0                           493  * -----------------------------------------------------------            
000012F0                           494  * Subroutine M0000 ------------------------------------------
000012F0                           495  M0000                               ;Dn
000012F0  14FC 0044                496              MOVE.B  #'D',(A2)+      ;display D
000012F4  264A                     497              MOVEA.L A2,A3           ;get address for n
000012F6  14FC 0020                498              MOVE.B  #' ',(A2)+      ;blank
000012FA  4E75                     499              RTS
000012FC                           500  
000012FC                           501  * -----------------------------------------------------------            
000012FC                           502  * Subroutine M0001 ------------------------------------------
000012FC                           503  M0001                               ;An
000012FC  14FC 0041                504              MOVE.B  #'A',(A2)+      ;display A
00001300  264A                     505              MOVEA.L A2,A3           ;get address for n
00001302  14FC 0020                506              MOVE.B  #' ',(A2)+      ;blank
00001306  4E75                     507              RTS
00001308                           508  
00001308                           509  * -----------------------------------------------------------            
00001308                           510  * Subroutine M0010 ------------------------------------------
00001308                           511  M0010                               ;(An) Address
00001308  14FC 0028                512              MOVE.B  #'(',(A2)+      ;display (
0000130C  14FC 0041                513              MOVE.B  #'A',(A2)+      ;display A
00001310  264A                     514              MOVEA.L A2,A3           ;get address for n
00001312  14FC 0020                515              MOVE.B  #' ',(A2)+      ;blank      
00001316  14FC 0029                516              MOVE.B  #')',(A2)+      ;display )
0000131A  4E75                     517              RTS
0000131C                           518   
0000131C                           519  * -----------------------------------------------------------            
0000131C                           520  * Subroutine M0011 ------------------------------------------
0000131C                           521  M0011                               ;(An)+ 
0000131C  14FC 0028                522              MOVE.B  #'(',(A2)+      ;display (
00001320  14FC 0041                523              MOVE.B  #'A',(A2)+      ;display A
00001324  264A                     524              MOVEA.L A2,A3           ;get address for n 
00001326  14FC 0020                525              MOVE.B  #' ',(A2)+      ;blank     
0000132A  14FC 0029                526              MOVE.B  #')',(A2)+      ;display )
0000132E  14FC 002B                527              MOVE.B  #'+',(A2)+      ;display +
00001332  4E75                     528              RTS
00001334                           529  
00001334                           530  * -----------------------------------------------------------            
00001334                           531  * Subroutine M0100 ------------------------------------------
00001334                           532  M0100                               ;-(An)
00001334  14FC 002D                533              MOVE.B  #'-',(A2)+      ;display -
00001338  14FC 0028                534              MOVE.B  #'(',(A2)+      ;display (
0000133C  14FC 0041                535              MOVE.B  #'A',(A2)+      ;display A
00001340  264A                     536              MOVEA.L A2,A3           ;get address for n
00001342  14FC 0020                537              MOVE.B  #' ',(A2)+      ;blank      
00001346  14FC 0029                538              MOVE.B  #')',(A2)+      ;display )
0000134A  4E75                     539              RTS
0000134C                           540  
0000134C                           541  * -----------------------------------------------------------    
0000134C                           542  * Subroutine M0101 ------------------------------------------
0000134C                           543  M0101                               ;do nothing
0000134C  4E75                     544              RTS
0000134E                           545  * -----------------------------------------------------------   
0000134E                           546  * Subroutine M0110 ------------------------------------------
0000134E                           547  M0110                               ;do nothing
0000134E  4E75                     548              RTS
00001350                           549  * -----------------------------------------------------------     
00001350                           550  * Subroutine M0111 -------------------------Not finished-----
00001350                           551  * Register is stored at D1
00001350                           552  * ----case 1 : Register 100 => #imm => #XX 3 spaces
00001350                           553  * ----case 2 : Register 000 => (XXX).W => 
00001350                           554  * ----case 3 : Register 001 => (XXX).L
00001350                           555  * 
00001350                           556  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001350                           557  
00001350                           558  M0111                               ;(xxx).W, (xxx).L, #imm
00001350                           559                                      ; This will be taken care under opcode subroutine
00001350  4E75                     560              RTS
00001352                           561  
00001352                           562  * -----------------------------------------------------------
00001352                           563  * Subroutine immediateData 
00001352                           564  ;immediateData     
00001352                           565  ;            RTS
00001352                           566  * -----------------------------------------------------------
00001352                           567  
00001352                           568  * Subroutine registerPrint----------------------------------- 
00001352                           569  registerPrint
00001352  4FF9 000013CE            570              LEA     numTable,A7 Load the table into A7
00001358  4EB7 1000                571              JSR     (A7,D1)     Jump to numTable with value at D1
0000135C  4E75                     572              RTS
0000135E                           573  
0000135E                           574  * -----------------------------------------------------------            
0000135E                           575  * Jump Table regNumTable ***************************************
0000135E                           576  *** prints the associated number of the register            *
0000135E                           577  *** Also prints hex values for data and addresses           *
0000135E                           578  *-----see below for decoding of what these sub-routines are
0000135E                           579  *************************************************************
0000135E  4EB9 0000139E            580  regNumTable JSR     RN0000   ;register 0
00001364  4E75                     581              RTS             ;return, done printing
00001366  4EB9 000013A4            582              JSR     RN0001   ;register 1
0000136C  4E75                     583              RTS             ;return, done printing
0000136E  4EB9 000013AA            584              JSR     RN0010   ;register 2
00001374  4E75                     585              RTS             ;return, done printing
00001376  4EB9 000013B0            586              JSR     RN0011   ;register 3
0000137C  4E75                     587              RTS             ;return, done printing
0000137E  4EB9 000013B6            588              JSR     RN0100   ;register 4
00001384  4E75                     589              RTS             ;return, done printing
00001386  4EB9 000013BC            590              JSR     RN0101   ;register 5
0000138C  4E75                     591              RTS             ;return, done printing
0000138E  4EB9 000013C2            592              JSR     RN0110   ;register 6
00001394  4E75                     593              RTS             ;return, done printing
00001396  4EB9 000013C8            594              JSR     RN0111   ;register 7
0000139C  4E75                     595              RTS             ;return, done printing
0000139E                           596  * -----------------------------------------------------------            
0000139E                           597  * Subroutine RN0000 ------------------------------------------
0000139E                           598  RN0000
0000139E  16BC 0030                599              MOVE.B  #'0',(A3)      ;display 0
000013A2  4E75                     600              RTS
000013A4                           601  
000013A4                           602  * -----------------------------------------------------------            
000013A4                           603  * Subroutine RN0001 ------------------------------------------
000013A4                           604  RN0001
000013A4  16BC 0031                605              MOVE.B  #'1',(A3)      ;display 1
000013A8  4E75                     606              RTS
000013AA                           607  
000013AA                           608  * -----------------------------------------------------------            
000013AA                           609  * Subroutine RN0010 ------------------------------------------
000013AA                           610  RN0010
000013AA  16BC 0032                611              MOVE.B  #'2',(A3)      ;display 2
000013AE  4E75                     612              RTS
000013B0                           613   
000013B0                           614  * -----------------------------------------------------------            
000013B0                           615  * Subroutine RN0011 ------------------------------------------
000013B0                           616  RN0011
000013B0  16BC 0033                617              MOVE.B  #'3',(A3)      ;display 3
000013B4  4E75                     618              RTS
000013B6                           619  
000013B6                           620  * -----------------------------------------------------------            
000013B6                           621  * Subroutine RN0100 ------------------------------------------
000013B6                           622  RN0100
000013B6  16BC 0034                623              MOVE.B  #'4',(A3)      ;display 4
000013BA  4E75                     624              RTS
000013BC                           625  
000013BC                           626  * -----------------------------------------------------------            
000013BC                           627  * Subroutine RN0101 ------------------------------------------
000013BC                           628  RN0101
000013BC  16BC 0035                629              MOVE.B  #'5',(A3)      ;display 5
000013C0  4E75                     630              RTS
000013C2                           631  
000013C2                           632  * -----------------------------------------------------------            
000013C2                           633  * Subroutine RN0110 ------------------------------------------
000013C2                           634  RN0110
000013C2  16BC 0036                635              MOVE.B  #'6',(A3)      ;display 6
000013C6  4E75                     636              RTS
000013C8                           637              
000013C8                           638  * -----------------------------------------------------------            
000013C8                           639  * Subroutine RN0111 ------------------------------------------
000013C8                           640  RN0111
000013C8  16BC 0037                641              MOVE.B  #'7',(A3)      ;display 7
000013CC  4E75                     642              RTS
000013CE                           643  
000013CE                           644  * -----------------------------------------------------------            
000013CE                           645  * Jump Table numTable ***************************************
000013CE                           646  *** prints the associated number of the register            *
000013CE                           647  *** Also prints hex values for data and addresses           *
000013CE                           648  *-----see below for decoding of what these sub-routines are
000013CE                           649  *************************************************************
000013CE  4EB9 0000144E            650  numTable    JSR     N0000   ;register 0
000013D4  4E75                     651              RTS             ;return, done printing
000013D6  4EB9 00001454            652              JSR     N0001   ;register 1
000013DC  4E75                     653              RTS             ;return, done printing
000013DE  4EB9 0000145A            654              JSR     N0010   ;register 2
000013E4  4E75                     655              RTS             ;return, done printing
000013E6  4EB9 00001460            656              JSR     N0011   ;register 3
000013EC  4E75                     657              RTS             ;return, done printing
000013EE  4EB9 00001466            658              JSR     N0100   ;register 4
000013F4  4E75                     659              RTS             ;return, done printing
000013F6  4EB9 0000146C            660              JSR     N0101   ;register 5
000013FC  4E75                     661              RTS             ;return, done printing
000013FE  4EB9 00001472            662              JSR     N0110   ;register 6
00001404  4E75                     663              RTS             ;return, done printing
00001406  4EB9 00001478            664              JSR     N0111   ;register 7
0000140C  4E75                     665              RTS             ;return, done printing
0000140E  4EB9 0000147E            666              JSR     N1000   ;num 8
00001414  4E75                     667              RTS             ;return, done printing
00001416  4EB9 00001484            668              JSR     N1001   ;num 9
0000141C  4E75                     669              RTS             ;return, done printing
0000141E  4EB9 0000148A            670              JSR     N1010   ;num A
00001424  4E75                     671              RTS             ;return, done printing
00001426  4EB9 00001490            672              JSR     N1011   ;num B
0000142C  4E75                     673              RTS             ;return, done printing
0000142E  4EB9 00001496            674              JSR     N1100   ;num C
00001434  4E75                     675              RTS             ;return, done printing
00001436  4EB9 0000149C            676              JSR     N1101   ;num D
0000143C  4E75                     677              RTS             ;return, done printing
0000143E  4EB9 000014A2            678              JSR     N1110   ;num E
00001444  4E75                     679              RTS             ;return, done printing
00001446  4EB9 000014A8            680              JSR     N1111   ;num F
0000144C  4E75                     681              RTS             ;return, done printing
0000144E                           682  * -----------------------------------------------------------            
0000144E                           683  * Subroutine N0000 ------------------------------------------
0000144E                           684  N0000
0000144E  14FC 0030                685              MOVE.B  #'0',(A2)+      ;display 0
00001452  4E75                     686              RTS
00001454                           687  
00001454                           688  * -----------------------------------------------------------            
00001454                           689  * Subroutine N0001 ------------------------------------------
00001454                           690  N0001
00001454  14FC 0031                691              MOVE.B  #'1',(A2)+      ;display 1
00001458  4E75                     692              RTS
0000145A                           693  
0000145A                           694  * -----------------------------------------------------------            
0000145A                           695  * Subroutine N0010 ------------------------------------------
0000145A                           696  N0010
0000145A  14FC 0032                697              MOVE.B  #'2',(A2)+      ;display 2
0000145E  4E75                     698              RTS
00001460                           699   
00001460                           700  * -----------------------------------------------------------            
00001460                           701  * Subroutine N0011 ------------------------------------------
00001460                           702  N0011
00001460  14FC 0033                703              MOVE.B  #'3',(A2)+      ;display 3
00001464  4E75                     704              RTS
00001466                           705  
00001466                           706  * -----------------------------------------------------------            
00001466                           707  * Subroutine N0100 ------------------------------------------
00001466                           708  N0100
00001466  14FC 0034                709              MOVE.B  #'4',(A2)+      ;display 4
0000146A  4E75                     710              RTS
0000146C                           711  
0000146C                           712  * -----------------------------------------------------------            
0000146C                           713  * Subroutine N0101 ------------------------------------------
0000146C                           714  N0101
0000146C  14FC 0035                715              MOVE.B  #'5',(A2)+      ;display 5
00001470  4E75                     716              RTS
00001472                           717  
00001472                           718  * -----------------------------------------------------------            
00001472                           719  * Subroutine N0110 ------------------------------------------
00001472                           720  N0110
00001472  14FC 0036                721              MOVE.B  #'6',(A2)+      ;display 6
00001476  4E75                     722              RTS
00001478                           723              
00001478                           724  * -----------------------------------------------------------            
00001478                           725  * Subroutine N0111 ------------------------------------------
00001478                           726  N0111
00001478  14FC 0037                727              MOVE.B  #'7',(A2)+      ;display 7
0000147C  4E75                     728              RTS
0000147E                           729  
0000147E                           730  * ----------------------------------------------------------- 
0000147E                           731  * Subroutine N1000 ------------------------------------------
0000147E                           732  N1000       
0000147E  14FC 0038                733              MOVE.B  #'8',(A2)+      ;display 8
00001482  4E75                     734              RTS
00001484                           735  
00001484                           736  * -----------------------------------------------------------            
00001484                           737  * Subroutine N1001 ------------------------------------------
00001484                           738  N1001   
00001484  14FC 0039                739              MOVE.B  #'9',(A2)+      ;display 9
00001488  4E75                     740              RTS
0000148A                           741  
0000148A                           742  * -----------------------------------------------------------            
0000148A                           743  * Subroutine N1010 ------------------------------------------
0000148A                           744  N1010   
0000148A  14FC 0041                745              MOVE.B  #'A',(A2)+      ;display A
0000148E  4E75                     746              RTS
00001490                           747  
00001490                           748  * -----------------------------------------------------------            
00001490                           749  * Subroutine N1011 ------------------------------------------
00001490                           750  N1011   
00001490  14FC 0042                751              MOVE.B  #'B',(A2)+      ;display B
00001494  4E75                     752              RTS
00001496                           753  
00001496                           754  * -----------------------------------------------------------            
00001496                           755  * Subroutine N1100 ------------------------------------------
00001496                           756  N1100   
00001496  14FC 0043                757              MOVE.B  #'C',(A2)+      ;display C
0000149A  4E75                     758              RTS
0000149C                           759  
0000149C                           760  * -----------------------------------------------------------            
0000149C                           761  * Subroutine N1101 ------------------------------------------
0000149C                           762  N1101   
0000149C  14FC 0044                763              MOVE.B  #'D',(A2)+      ;display D
000014A0  4E75                     764              RTS
000014A2                           765  
000014A2                           766  * -----------------------------------------------------------            
000014A2                           767  * Subroutine N1110 ------------------------------------------
000014A2                           768  N1110   
000014A2  14FC 0045                769              MOVE.B  #'E',(A2)+      ;display E
000014A6  4E75                     770              RTS
000014A8                           771  
000014A8                           772  * -----------------------------------------------------------            
000014A8                           773  * Subroutine N1111 ------------------------------------------
000014A8                           774  N1111   
000014A8  14FC 0046                775              MOVE.B  #'F',(A2)+      ;display F
000014AC  4E75                     776              RTS   
000014AE                           777  *-------------------- HELPER FUCNTION LOCATION -----------
000014AE                           778  *- For Mode always D2
000014AE                           779  *-- For Register always D1
000014AE                           780  *-  Original Machine code In D6
000014AE                           781  
000014AE                           782  
000014AE                           783  *            HELPER LOCATION
000014AE                           784  *            HELPER LOCATION
000014AE                           785  *            HELPER LOCATION
000014AE                           786  *            HELPER LOCATION
000014AE                           787  *            HELPER LOCATION
000014AE                           788  
000014AE                           789  get_0_3_bit
000014AE                           790      
000014AE                           791  
000014AE                           792  get_3_5bit
000014AE                           793  *------------------------------------------------------------
000014AE                           794  * MachineCode: 0001 **** **** **BI T***
000014AE                           795  * Only next last 3 bits which is stored at D0 => Source Address mode
000014AE  4242                     796              CLR     D2
000014B0  4241                     797              CLR     D1
000014B2  1406                     798              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000014B4  E50A                     799              LSL.B   #2,D2       **** **** BIT* **00
000014B6  EA0A                     800              LSR.B   #5,D2       **** **** 0000 0BIT
000014B8  4E75                     801              RTS
000014BA                           802              *------------------------------------------------------------
000014BA                           803  
000014BA                           804  
000014BA                           805  *-----------------------FUNCTION word or Long --------------
000014BA                           806  *----------Used to decipher if we are decoding a word or long
000014BA                           807  *-  This subroutine determines f the operations is a word or a long, 
000014BA                           808  *- we use the AND operator to clear out everything except for the 
000014BA                           809  *-3 bit which will be found in D3, we play with our data in D3
000014BA                           810  *-the word or LONG can be found in the OPCODE FIELD which is 
000014BA                           811  *-bits 8 _6
000014BA                           812  
000014BA                           813  WordOrLong  
000014BA                           814          *-find this OPMODE          
000014BA  4283                     815          CLR.L   D3
000014BC  3606                     816          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
000014BE                           817          *-we will store this in D3
000014BE                           818          *-using a shortcut the AND operator
000014BE                           819          *-we need these bits
000014BE                           820          *-[**** XXXX X[XXX] ****]
000014BE                           821              *- starts repersenting bits we do not need
000014BE                           822              *-shortcut we do not need to shift as much
000014BE                           823              *-minor optimization
000014BE                           824              *-AND F to keep 0 to throw away
000014BE  C67C 0FF0                825          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
000014C2  EC4B                     826          LSR.W   #6,D3
000014C4                           827          *- now weneed to get the last 3 bits
000014C4                           828          *-shift to the right by 6 makes the last 3 bits in the 
000014C4                           829          *-byte postion
000014C4                           830          *-[**** **** XXXX X[XXX]]m we need to clear everything else
000014C4  C67C 000F                831          AND.W   #$000F,D3 clear everything except the last byte we need
000014C8  E34B                     832          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
000014CA                           833          *-make sure everyhting is clearn except the last byte
000014CA  C67C 000F                834          AND.W   #$000F,D3
000014CE                           835          *-Shift back by 1 bit to the right
000014CE  E24B                     836          LSR.W   #1,D3
000014D0  4E75                     837          RTS 
000014D2                           838          
000014D2                           839              
000014D2                           840              
000014D2                           841              
000014D2                           842              
000014D2                           843              *---------------------------------------------------------------
000014D2                           844              *--------------------------------------------------------
000014D2                           845              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000014D2                           846              *-------------------------------------
000014D2                           847              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000014D2                           848  op0100      
000014D2                           849  
000014D2                           850  
000014D2                           851   
000014D2                           852              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000014D2                           853              ;BEQ     jumpToRt            
000014D2                           854              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000014D2                           855              ;BEQ     returnRt 
000014D2                           856             
000014D2                           857              ;JSR     WorL        
000014D2                           858              ;CMP.B   #hex7,D3    ;see if it's a LEA
000014D2                           859              ;BEQ     _lea        ;branch 
000014D2                           860              
000014D2                           861              ;JSR     clrORmm       
000014D2                           862              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000014D2                           863              ;BEQ     _clrB       ;branch             
000014D2                           864              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000014D2                           865              ;BEQ     _clrW       ;branch   
000014D2                           866              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000014D2                           867              ;BEQ     _clrL       ;branch
000014D2                           868    
000014D2                           869              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000014D2                           870              ;BEQ     _movemW     ;branch   
000014D2                           871              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000014D2                           872              ;BEQ     _movemL     ;branch              
000014D2                           873                          
000014D2                           874              ;BRA     opError     ;bad opcode branch to error
000014D2                           875              
000014D2                           876              
000014D2  BC7C 4E71                877              CMP.W   #$4E71,D6
000014D6  6700 000A                878              BEQ     _NOP
000014DA                           879              
000014DA  BC7C 4E75                880              CMP.W   #$4E75,D6   ;see if it's a RTS
000014DE  6700 0028                881              BEQ     _RTS        branch to RTS
000014E2                           882             
000014E2                           883  
000014E2                           884              
000014E2                           885  _NOP
000014E2  7E02                     886              MOVE.L  #2,D7       ;data is not error
000014E4  14FC 0020                887              MOVE.B  #' ',(A2)+      ;print spaces
000014E8  14FC 0020                888              MOVE.B  #' ',(A2)+      ;print spaces
000014EC  14FC 0020                889              MOVE.B  #' ',(A2)+      ;print spaces
000014F0  14FC 0020                890              MOVE.B  #' ',(A2)+      ;print spaces
000014F4  14FC 004E                891              MOVE.B  #'N',(A2)+      ;print N
000014F8  14FC 004F                892              MOVE.B  #'O',(A2)+      ;print O
000014FC  14FC 0050                893              MOVE.B  #'P',(A2)+      ;print P
00001500  1A3C 0003                894              MOVE.B  #3,D5           ;counter for output
00001504  6000 0C36                895              BRA     printCode
00001508                           896  
00001508                           897  _RTS    
00001508  7E02                     898              MOVE.L  #2,D7       ;data is not error
0000150A  14FC 0020                899              MOVE.B  #' ',(A2)+      ;print spaces
0000150E  14FC 0020                900              MOVE.B  #' ',(A2)+      ;print spaces
00001512  14FC 0020                901              MOVE.B  #' ',(A2)+      ;print spaces
00001516  14FC 0020                902              MOVE.B  #' ',(A2)+      ;print spaces
0000151A  14FC 0052                903              MOVE.B  #'R',(A2)+      ;print R
0000151E  14FC 0054                904              MOVE.B  #'T',(A2)+      ;print T
00001522  14FC 0053                905              MOVE.B  #'S',(A2)+      ;print S
00001526  1A3C 0003                906              MOVE.B  #3,D5           ;counter for output
0000152A  6000 0C10                907              BRA     printCode
0000152A  6000 0C10                908  -------------------- end include --------------------
0000152E                           909              INCLUDE 'op0001.x68'    MOVE.b Differetn file
0000152E                           910  
0000152E                           911  
0000152E                           912  
0000152E                           913  
0000152E                           914  op0001
0000152E  7E02                     915              MOVE.L  #2,D7       ;data is not error
00001530  14FC 0020                916              MOVE.B  #' ',(A2)+      ;print spaces
00001534  14FC 0020                917              MOVE.B  #' ',(A2)+      ;print spaces
00001538  14FC 0020                918              MOVE.B  #' ',(A2)+      ;print spaces
0000153C  14FC 0020                919              MOVE.B  #' ',(A2)+      ;print spaces
00001540  14FC 004D                920              MOVE.B  #'M',(A2)+      ;print M
00001544  14FC 004F                921              MOVE.B  #'O',(A2)+      ;print O
00001548  14FC 0056                922              MOVE.B  #'V',(A2)+      ;print V
0000154C  14FC 0045                923              MOVE.B  #'E',(A2)+      PRINT  E
00001550  14FC 002E                924              MOVE.B  #'.',(A2)+
00001554  14FC 0042                925              MOVE.B  #'B',(A2)+
00001558  14FC 0020                926              MOVE.B  #' ',(A2)+   
0000155C  4242                     927              CLR     D2
0000155E  4241                     928              CLR     D1
00001560  1406                     929              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001562  E50A                     930              LSL.B   #2,D2       **** **** BIT* **00
00001564  EA0A                     931              LSR.B   #5,D2       **** **** 0000 0BIT
00001566  1002                     932              MOVE.B  D2,D0
00001568  C0FC 0008                933              MULU    #8,D0       value adjusted for jumping
0000156C  4DF8 12B0                934              LEA     modeTable,A6 Load the table into A6
00001570  4EB6 0000                935              JSR     (A6,D0)     Jump to subroutine of value at D0
00001574                           936              
00001574  1206                     937              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001576  EB09                     938              LSL.B   #5,D1       **** **** BIT0 0000
00001578  EA09                     939              LSR.B   #5,D1       **** **** 0000 0BIT
0000157A  1001                     940              MOVE.B  D1,D0      
0000157C  C0FC 0008                941              MULU    #8,D0       value adjusted for jumping
00001580  4FF8 135E                942              LEA     regNumTable ,A7 Load the table into A7
00001584  4EB7 0000                943              JSR     (A7,D0)     Jump to subroutine of value at D1
00001588  4FF8 1130                944              LEA     immAbTable, A7
0000158C  C2FC 0008                945              MULU    #8,D1
00001590  4EB7 1000                946              JSR     (A7,D1)    
00001594                           947  
00001594                           948  
00001594  14FC 002C                949              MOVE.B  #',',(A2)+  comma between operands
00001598  4242                     950              CLR     D2
0000159A  4241                     951              CLR     D1
0000159C  3406                     952              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
0000159E  EF4A                     953              LSL.W   #7,D2       BIT* **** **** 0000
000015A0  E04A                     954              LSR.W   #8,D2       0000 0000 BIT* ****
000015A2  EA4A                     955              LSR.W   #5,D2       0000 0000 0000 0BIT 
000015A4  C4FC 0008                956              MULU    #8,D2       value adjusted for jumping
000015A8  4DF8 12B0                957              LEA     modeTable,A6 Load the table into A6
000015AC  4EB6 2000                958              JSR     (A6,D2)     Jump to subroutine of value at D2
000015B0                           959             
000015B0  3206                     960              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000015B2  E949                     961              LSL.W   #4,D1       BIT* **** **** 0000
000015B4  E049                     962              LSR.W   #8,D1       0000 0000 BIT* ****
000015B6  EA49                     963              LSR.W   #5,D1       0000 0000 0000 0BIT     
000015B8  C2FC 0008                964              MULU    #8,D1       value adjusted for jumping
000015BC  4FF8 135E                965              LEA     regNumTable ,A7 Load the table into A7
000015C0  4EB7 1000                966              JSR     (A7,D1)     Jump to subroutine of value at D1    
000015C4  6000 0B76                967              BRA     printCode
000015C8                           968  immediateData
000015C8  14FC 0023                969              MOVE.B  #'#',(A2)+ 
000015CC  381D                     970              MOVE.W  (A5)+,D4    WE got the address for the operand
000015CE  3815                     971              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000015D0                           972              *4MSB   00X*
000015D0  4242                     973              CLR     D2
000015D2  1404                     974              MOVE.B  D4,D2       00X*
000015D4  E80A                     975              LSR.B   #4,D2       000X
000015D6  C4FC 0008                976              MULU    #8,D2   
000015DA  4FF8 13CE                977              LEA     numTable ,A7 Load the table into A7
000015DE  4EB7 2000                978              JSR     (A7,D2)     Jump to subroutine of value at D2
000015E2                           979              *last 4bits 00*X
000015E2  4242                     980              CLR     D2
000015E4  1404                     981              MOVE.B  D4,D2       00*X
000015E6  E90A                     982              LSL.B   #4,D2       00X*
000015E8  E80A                     983              LSR.B   #4,D2       000X
000015EA  C4FC 0008                984              MULU    #8,D2   
000015EE                           985             
000015EE  4EB7 2000                986              JSR     (A7,D2)     Jump to subroutine of value at D2
000015F2                           987  
000015F2  4E75                     988              RTS
000015F4                           989              
000015F4                           990  absoulteWord   
000015F4  14FC 0024                991              MOVE.B  #'$',(A2)+ 
000015F8  E08C                     992              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015FA  E08C                     993              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015FC                           994              *4MSB   X***
000015FC  4241                     995              CLR     D1
000015FE  3204                     996              MOVE.W  D4,D1       X***
00001600  E049                     997              LSR.W   #8,D1       00X*
00001602  E849                     998              LSR.W   #4,D1       000X
00001604  4FF8 13CE                999              LEA     numTable ,A7 Load the table into A7
00001608  C2FC 0008               1000              MULU    #8,D1
0000160C  4EB7 1000               1001              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001610                          1002              *next 4MSB  *X**
00001610  4241                    1003              CLR     D1
00001612  3204                    1004              MOVE.W  D4,D1       *X**
00001614  E949                    1005              LSL.W   #4,D1       X**0        
00001616  E049                    1006              LSR.W   #8,D1       00X*
00001618  E849                    1007              LSR.W   #4,D1       000X
0000161A  4FF8 13CE               1008              LEA     numTable ,A7 Load the table into A7
0000161E  C2FC 0008               1009              MULU    #8,D1
00001622  4EB7 1000               1010              JSR     (A7,D1)     Jump to subroutine of value at D1
00001626                          1011              *next 4MSB  **X*
00001626  4241                    1012              CLR     D1
00001628  1204                    1013              MOVE.B  D4,D1       00X*
0000162A  E809                    1014              LSR.B   #4,D1       000X
0000162C  4FF8 13CE               1015              LEA     numTable ,A7 Load the table into A7
00001630  C2FC 0008               1016                          MULU    #8,D1
00001634  4EB7 1000               1017              JSR     (A7,D1)     Jump to subroutine of value at D1
00001638                          1018              *last 4  bits   ***X
00001638  4241                    1019              CLR     D1
0000163A  1204                    1020              MOVE.B  D4,D1       00*X
0000163C  E909                    1021              LSL.B   #4,D1       00X0    
0000163E  E809                    1022              LSR.B   #4,D1       000X
00001640  4FF8 13CE               1023              LEA     numTable ,A7 Load the table into A7
00001644  C2FC 0008               1024                          MULU    #8,D1
00001648  4EB7 1000               1025              JSR     (A7,D1)     Jump to subroutine of value at D1
0000164C  4E75                    1026              RTS            
0000164E                          1027  absoulteLong   
0000164E  4241                    1028              CLR     D1
00001650  4242                    1029              CLR     D2 
00001652  14FC 0024               1030              MOVE.B  #'$',(A2)+ 
00001656  2404                    1031              MOVE.L  D4,D2       D2 will be used for later
00001658  E08C                    1032              LSR.L   #8,D4       XXXX **** => 00XX XX**
0000165A  E08C                    1033              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000165C                          1034              *4MSB   X***
0000165C  4241                    1035              CLR     D1
0000165E  3204                    1036              MOVE.W  D4,D1       X***
00001660  E049                    1037              LSR.W   #8,D1       00X*
00001662  E849                    1038              LSR.W   #4,D1       000X
00001664  4FF8 13CE               1039              LEA     numTable ,A7 Load the table into A7
00001668  C2FC 0008               1040              MULU    #8,D1
0000166C  4EB7 1000               1041              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001670                          1042              *next 4MSB  *X**
00001670  4241                    1043              CLR     D1
00001672  3204                    1044              MOVE.W  D4,D1       *X**
00001674  E949                    1045              LSL.W   #4,D1       X**0        
00001676  E049                    1046              LSR.W   #8,D1       00X*
00001678  E849                    1047              LSR.W   #4,D1       000X
0000167A  4FF8 13CE               1048              LEA     numTable ,A7 Load the table into A7
0000167E  C2FC 0008               1049              MULU    #8,D1
00001682  4EB7 1000               1050              JSR     (A7,D1)     Jump to subroutine of value at D1
00001686                          1051              *next 4MSB  **X*
00001686  4241                    1052              CLR     D1
00001688  1204                    1053              MOVE.B  D4,D1       00X*
0000168A  E809                    1054              LSR.B   #4,D1       000X
0000168C  4FF8 13CE               1055              LEA     numTable ,A7 Load the table into A7
00001690  C2FC 0008               1056                          MULU    #8,D1
00001694  4EB7 1000               1057              JSR     (A7,D1)     Jump to subroutine of value at D1
00001698                          1058              *last 4  bits   ***X
00001698  4241                    1059              CLR     D1
0000169A  1204                    1060              MOVE.B  D4,D1       00*X
0000169C  E909                    1061              LSL.B   #4,D1       00X0    
0000169E  E809                    1062              LSR.B   #4,D1       000X
000016A0  4FF8 13CE               1063              LEA     numTable ,A7 Load the table into A7
000016A4  C2FC 0008               1064                          MULU    #8,D1
000016A8  4EB7 1000               1065              JSR     (A7,D1)     Jump to subroutine of value at D1
000016AC                          1066              *4MSB   X***
000016AC  4241                    1067              CLR     D1
000016AE  3202                    1068              MOVE.W  D2,D1
000016B0  E049                    1069              LSR.W   #8,D1            00X*
000016B2  E849                    1070              LSR.W   #4,D1            000X
000016B4  C2FC 0008               1071              MULU    #8,D1
000016B8  4FF8 13CE               1072              LEA     numTable ,A7 Load the table into A7
000016BC  4EB7 1000               1073              JSR     (A7,D1)     Jump to subroutine of value at D1
000016C0                          1074              *next 4MSB  *X**
000016C0  4241                    1075              CLR     D1
000016C2  3202                    1076              MOVE.W  D2,D1
000016C4  E949                    1077              LSL.W   #4,D1       X**0
000016C6  E049                    1078              LSR.W   #8,D1       00X*
000016C8  E809                    1079              LSR.B   #4,D1       000X
000016CA  C2FC 0008               1080              MULU    #8,D1
000016CE  4FF8 13CE               1081              LEA     numTable ,A7 Load the table into A7
000016D2  4EB7 1000               1082              JSR     (A7,D1)     Jump to subroutine of value at D1
000016D6                          1083              *next 4MSB  **X*
000016D6  4241                    1084              CLR     D1
000016D8  1202                    1085              MOVE.B  D2,D1       00X*
000016DA  E809                    1086              LSR.B   #4,D1       000X
000016DC  C2FC 0008               1087              MULU    #8,D1
000016E0  4FF8 13CE               1088              LEA     numTable ,A7 Load the table into A7
000016E4  4EB7 1000               1089              JSR     (A7,D1)     Jump to subroutine of value at D1
000016E8                          1090              *next 4MSB  ***X
000016E8  4241                    1091              CLR     D1
000016EA  1202                    1092              MOVE.B  D2,D1       00*X
000016EC  E909                    1093              LSL.B   #4,D1       00X0
000016EE  E809                    1094              LSR.B   #4,D1       000X
000016F0  C2FC 0008               1095              MULU    #8,D1
000016F4  4FF8 13CE               1096              LEA     numTable ,A7 Load the table into A7
000016F8  4EB7 1000               1097              JSR     (A7,D1)     Jump to subroutine of value at D1
000016FC                          1098             
000016FC                          1099  
000016FC  4E75                    1100              RTS
000016FE                          1101  
000016FE                          1102  
000016FE                          1103  
000016FE                          1104  
000016FE                          1105  
000016FE                          1106  
000016FE                          1107  
000016FE                          1108  
000016FE                          1109  
000016FE                          1110  
000016FE                          1111  
000016FE                          1112  
000016FE                          1113  
000016FE                          1114  
000016FE                          1115  
000016FE                          1116  
000016FE                          1117  
000016FE                          1118  
000016FE                          1119  
000016FE                          1120  
000016FE                          1121  
000016FE                          1122  
000016FE                          1123  
000016FE                          1124  -------------------- end include --------------------
000016FE                          1125              INCLUDE 'op1101.x68'    ADD,ADDA
000016FE                          1126  op1101 
000016FE                          1127      ;ADD, ADDA
000016FE                          1128      
000016FE                          1129      ; we need to determine what its size is (B,W,L) putting the data in D6
000016FE  4EB8 14BA               1130      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001702                          1131      ; we use to decode and branch
00001702                          1132      *-now D3 contains the OPMODE FIELD telling us wether this is
00001702                          1133      *-a LONG or a WORD
00001702                          1134      
00001702                          1135      *-now we need to decipher if its any of the adds
00001702  B63C 0000               1136      CMP.B   #hex_0,D3 is this ADD.B
00001706  6700 003A               1137      BEQ add_B   ;<EA> -> Dn
0000170A  B63C 0001               1138      CMP.B   #hex_1,D3   is it ADD.W
0000170E  6700 00B8               1139      BEQ add_W ;<EA> ->Dn
00001712  B63C 0002               1140      CMP.B   #hex_2,D3   is it ADD.L
00001716  6700 0136               1141      BEQ add_L ;<EA> ->Dn
0000171A                          1142      
0000171A  B63C 0003               1143      CMP.B   #hex_3,D3
0000171E  6700 01B4               1144      BEQ adda_W
00001722                          1145      
00001722  B63C 0004               1146      CMP.B   #hex_4,D3
00001726  6700 02C0               1147      BEQ add_B_EA Dn -> EA
0000172A                          1148      
0000172A  B63C 0005               1149      CMP.B   #hex_5,D3
0000172E  6700 0350               1150      BEQ add_W_EA Dn ->EA
00001732                          1151      
00001732  B63C 0006               1152      CMP.B   #hex_6,D3
00001736  6700 03D0               1153      BEQ add_L_EA Dn - >EA
0000173A  B63C 0007               1154      CMP.B   #hex_7,D3
0000173E  6700 021E               1155      BEQ adda_L
00001742                          1156  
00001742                          1157  add_B   ;add.B EA->Dn
00001742                          1158      
00001742                          1159      *-store the size of the operation for immediate decoding use here/below
00001742                          1160      *-D7 equals storage of size of operation
00001742                          1161      *- #3 is byte , #2 is word #1 is long
00001742                          1162      ;MOVE.B  #3,D7
00001742                          1163      
00001742                          1164  
00001742  14FC 0020               1165      MOVE.B  #' ',(A2)+
00001746  14FC 0020               1166      MOVE.B  #' ',(A2)+
0000174A  14FC 0020               1167      MOVE.B  #' ',(A2)+
0000174E  14FC 0020               1168      MOVE.B  #' ',(A2)+
00001752  14FC 0041               1169      MOVE.B  #'A',(A2)+
00001756  14FC 0044               1170      MOVE.B  #'D',(A2)+
0000175A  14FC 0044               1171      MOVE.B  #'D',(A2)+
0000175E  14FC 002E               1172      MOVE.B  #'.',(A2)+
00001762  14FC 0042               1173      MOVE.B  #'B',(A2)+
00001766                          1174      *-always allow 4 spaces
00001766  14FC 0020               1175      MOVE.B  #' ',(A2)+
0000176A  14FC 0020               1176      MOVE.B  #' ',(A2)+
0000176E  14FC 0020               1177      MOVE.B  #' ',(A2)+
00001772  14FC 0020               1178      MOVE.B  #' ',(A2)+
00001776                          1179      
00001776                          1180      *-deCDOE EA (Dn,Dn
00001776                          1181          * MachineCode: 0001 **** **** **BI T***
00001776                          1182      *-insert immediate addressing here
00001776  4242                    1183              CLR     D2
00001778  4241                    1184              CLR     D1
0000177A  1406                    1185              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000177C  E50A                    1186              LSL.B   #2,D2       **** **** BIT* **00
0000177E  EA0A                    1187              LSR.B   #5,D2       **** **** 0000 0BIT
00001780  C4FC 0008               1188              MULU    #8,D2       value adjusted for jumping
00001784  4DF8 12B0               1189              LEA     modeTable,A6 Load the table into A6
00001788  4EB6 2000               1190              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000178C                          1191  
0000178C                          1192  
0000178C                          1193   * MachineCode: 0001 **** **** **** *BIT
0000178C                          1194              
0000178C  1206                    1195              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000178E  EB09                    1196              LSL.B   #5,D1       **** **** BIT0 0000
00001790  EA09                    1197              LSR.B   #5,D1       **** **** 0000 0BIT      
00001792  C2FC 0008               1198              MULU    #8,D1       value adjusted for jumping
00001796  4FF8 135E               1199              LEA     regNumTable ,A7 Load the table into A7
0000179A  4EB7 1000               1200              JSR     (A7,D1)     Jump to subroutine of value at D1
0000179E  B23C 0020               1201              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000017A2  6700 FE24               1202              BEQ.W   immediateData   ;branch to immediateData
000017A6  14FC 002C               1203              MOVE.B  #',',(A2)+
000017AA  14FC 0044               1204              MOVE.B  #'D',(A2)+
000017AE                          1205              
000017AE                          1206    *------------------------------------------------------------
000017AE  4241                    1207              CLR     D1
000017B0  3206                    1208              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000017B2  E949                    1209              LSL.W   #4,D1       BIT* **** **** 0000
000017B4  E049                    1210              LSR.W   #8,D1       0000 0000 BIT* ****
000017B6  EA49                    1211              LSR.W   #5,D1       0000 0000 0000 0BIT     
000017B8  C2FC 0008               1212              MULU    #8,D1       value adjusted for jumping
000017BC  4FF8 13CE               1213              LEA     numTable ,A7 Load the table into A7
000017C0  4EB7 1000               1214              JSR     (A7,D1)     Jump to subroutine of value at D1   
000017C4  6000 0976               1215              BRA printcode  
000017C8                          1216      
000017C8                          1217       
000017C8                          1218  add_W   ;add.B EA->Dn
000017C8                          1219      
000017C8                          1220      *-store the size of the operation for immediate decoding use here/below
000017C8                          1221      *-D7 equals storage of size of operation
000017C8                          1222      *- #3 is byte , #2 is word #1 is long
000017C8                          1223      ;MOVE.B  #3,D7
000017C8                          1224      
000017C8                          1225  
000017C8  14FC 0020               1226      MOVE.B  #' ',(A2)+
000017CC  14FC 0020               1227      MOVE.B  #' ',(A2)+
000017D0  14FC 0020               1228      MOVE.B  #' ',(A2)+
000017D4  14FC 0020               1229      MOVE.B  #' ',(A2)+
000017D8  14FC 0041               1230      MOVE.B  #'A',(A2)+
000017DC  14FC 0044               1231      MOVE.B  #'D',(A2)+
000017E0  14FC 0044               1232      MOVE.B  #'D',(A2)+
000017E4  14FC 002E               1233      MOVE.B  #'.',(A2)+
000017E8  14FC 0057               1234      MOVE.B  #'W',(A2)+
000017EC                          1235      *-always allow 4 spaces
000017EC  14FC 0020               1236      MOVE.B  #' ',(A2)+
000017F0  14FC 0020               1237      MOVE.B  #' ',(A2)+
000017F4  14FC 0020               1238      MOVE.B  #' ',(A2)+
000017F8  14FC 0020               1239      MOVE.B  #' ',(A2)+
000017FC                          1240      
000017FC                          1241      *-deCDOE EA (Dn,Dn
000017FC                          1242          * MachineCode: 0001 **** **** **BI T***
000017FC                          1243      *-insert immediate addressing here
000017FC  4242                    1244              CLR     D2
000017FE  4241                    1245              CLR     D1
00001800  1406                    1246              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001802  E50A                    1247              LSL.B   #2,D2       **** **** BIT* **00
00001804  EA0A                    1248              LSR.B   #5,D2       **** **** 0000 0BIT
00001806  C4FC 0008               1249              MULU    #8,D2       value adjusted for jumping
0000180A  4DF8 12B0               1250              LEA     modeTable,A6 Load the table into A6
0000180E  4EB6 2000               1251              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001812                          1252  
00001812                          1253  
00001812                          1254   * MachineCode: 0001 **** **** **** *BIT
00001812                          1255              
00001812  1206                    1256              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001814  EB09                    1257              LSL.B   #5,D1       **** **** BIT0 0000
00001816  EA09                    1258              LSR.B   #5,D1       **** **** 0000 0BIT      
00001818  C2FC 0008               1259              MULU    #8,D1       value adjusted for jumping
0000181C  4FF8 135E               1260              LEA     regNumTable ,A7 Load the table into A7
00001820  4EB7 1000               1261              JSR     (A7,D1)     Jump to subroutine of value at D1
00001824  B23C 0020               1262              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001828  6700 FD9E               1263              BEQ.W   immediateData   ;branch to immediateData
0000182C  14FC 002C               1264              MOVE.B  #',',(A2)+
00001830  14FC 0044               1265              MOVE.B  #'D',(A2)+
00001834                          1266              
00001834                          1267                *------------------------------------------------------------
00001834  4241                    1268              CLR     D1
00001836  3206                    1269              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001838  E949                    1270              LSL.W   #4,D1       BIT* **** **** 0000
0000183A  E049                    1271              LSR.W   #8,D1       0000 0000 BIT* ****
0000183C  EA49                    1272              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000183E  C2FC 0008               1273              MULU    #8,D1       value adjusted for jumping
00001842  4FF8 13CE               1274              LEA     numTable ,A7 Load the table into A7
00001846  4EB7 1000               1275              JSR     (A7,D1)     Jump to subroutine of value at D1   
0000184A  6000 08F0               1276              BRA printcode  
0000184E                          1277     
0000184E                          1278  add_L   ;add.B EA->Dn
0000184E                          1279      
0000184E                          1280      *-store the size of the operation for immediate decoding use here/below
0000184E                          1281      *-D7 equals storage of size of operation
0000184E                          1282      *- #3 is byte , #2 is word #1 is long
0000184E                          1283      ;MOVE.B  #3,D7
0000184E                          1284      
0000184E                          1285  
0000184E  14FC 0020               1286      MOVE.B  #' ',(A2)+
00001852  14FC 0020               1287      MOVE.B  #' ',(A2)+
00001856  14FC 0020               1288      MOVE.B  #' ',(A2)+
0000185A  14FC 0020               1289      MOVE.B  #' ',(A2)+
0000185E  14FC 0041               1290      MOVE.B  #'A',(A2)+
00001862  14FC 0044               1291      MOVE.B  #'D',(A2)+
00001866  14FC 0044               1292      MOVE.B  #'D',(A2)+
0000186A  14FC 002E               1293      MOVE.B  #'.',(A2)+
0000186E  14FC 004C               1294      MOVE.B  #'L',(A2)+
00001872                          1295      *-always allow 4 spaces
00001872  14FC 0020               1296      MOVE.B  #' ',(A2)+
00001876  14FC 0020               1297      MOVE.B  #' ',(A2)+
0000187A  14FC 0020               1298      MOVE.B  #' ',(A2)+
0000187E  14FC 0020               1299      MOVE.B  #' ',(A2)+
00001882                          1300      
00001882                          1301      *-deCDOE EA (Dn,Dn
00001882                          1302          * MachineCode: 0001 **** **** **BI T***
00001882                          1303      *-insert immediate addressing here
00001882  4242                    1304              CLR     D2
00001884  4241                    1305              CLR     D1
00001886  1406                    1306              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001888  E50A                    1307              LSL.B   #2,D2       **** **** BIT* **00
0000188A  EA0A                    1308              LSR.B   #5,D2       **** **** 0000 0BIT
0000188C  C4FC 0008               1309              MULU    #8,D2       value adjusted for jumping
00001890  4DF8 12B0               1310              LEA     modeTable,A6 Load the table into A6
00001894  4EB6 2000               1311              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001898                          1312  
00001898                          1313  
00001898                          1314   * MachineCode: 0001 **** **** **** *BIT
00001898                          1315              
00001898  1206                    1316              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000189A  EB09                    1317              LSL.B   #5,D1       **** **** BIT0 0000
0000189C  EA09                    1318              LSR.B   #5,D1       **** **** 0000 0BIT      
0000189E  C2FC 0008               1319              MULU    #8,D1       value adjusted for jumping
000018A2  4FF8 135E               1320              LEA     regNumTable ,A7 Load the table into A7
000018A6  4EB7 1000               1321              JSR     (A7,D1)     Jump to subroutine of value at D1
000018AA  B23C 0020               1322              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000018AE  6700 FD18               1323              BEQ.W   immediateData   ;branch to immediateData
000018B2  14FC 002C               1324              MOVE.B  #',',(A2)+
000018B6  14FC 0044               1325              MOVE.B  #'D',(A2)+
000018BA                          1326              
000018BA                          1327                *------------------------------------------------------------
000018BA  4241                    1328              CLR     D1
000018BC  3206                    1329              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000018BE  E949                    1330              LSL.W   #4,D1       BIT* **** **** 0000
000018C0  E049                    1331              LSR.W   #8,D1       0000 0000 BIT* ****
000018C2  EA49                    1332              LSR.W   #5,D1       0000 0000 0000 0BIT     
000018C4  C2FC 0008               1333              MULU    #8,D1       value adjusted for jumping
000018C8  4FF8 13CE               1334              LEA     numTable ,A7 Load the table into A7
000018CC  4EB7 1000               1335              JSR     (A7,D1)     Jump to subroutine of value at D1   
000018D0  6000 086A               1336              BRA printcode  
000018D4                          1337      
000018D4                          1338  adda_W  ;ADDA.W
000018D4                          1339      *-maybe error checking
000018D4                          1340      *-we know its ADDA.W so print it to our buffer
000018D4                          1341      *-ex ADDA.W D2,D7
000018D4                          1342      
000018D4  14FC 0020               1343      MOVE.B  #' ',(A2)+
000018D8  14FC 0020               1344      MOVE.B  #' ',(A2)+
000018DC  14FC 0020               1345      MOVE.B  #' ',(A2)+
000018E0  14FC 0020               1346      MOVE.B  #' ',(A2)+
000018E4  14FC 0041               1347      MOVE.B  #'A',(A2)+
000018E8  14FC 0044               1348      MOVE.B  #'D',(A2)+
000018EC  14FC 0044               1349      MOVE.B  #'D',(A2)+
000018F0  14FC 0041               1350      MOVE.B  #'A',(A2)+
000018F4  14FC 002E               1351      MOVE.B  #'.',(A2)+
000018F8  14FC 0057               1352      MOVE.B  #'W',(A2)+
000018FC                          1353      *-always allow 4 spaces
000018FC  14FC 0020               1354      MOVE.B  #' ',(A2)+
00001900  14FC 0020               1355      MOVE.B  #' ',(A2)+
00001904  14FC 0020               1356      MOVE.B  #' ',(A2)+
00001908  14FC 0020               1357      MOVE.B  #' ',(A2)+
0000190C                          1358      
0000190C                          1359      * MachineCode: 0001 **** **** **BI T***
0000190C                          1360      *-insert immediate addressing here
0000190C  4242                    1361              CLR     D2
0000190E  4241                    1362              CLR     D1
00001910  1406                    1363              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001912  E50A                    1364              LSL.B   #2,D2       **** **** BIT* **00
00001914  EA0A                    1365              LSR.B   #5,D2       **** **** 0000 0BIT
00001916  C4FC 0008               1366              MULU    #8,D2       value adjusted for jumping
0000191A  4DF8 12B0               1367              LEA     modeTable,A6 Load the table into A6
0000191E  4EB6 2000               1368              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001922                          1369  
00001922                          1370  
00001922                          1371   * MachineCode: 0001 **** **** **** *BIT
00001922                          1372              
00001922  1206                    1373              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001924  EB09                    1374              LSL.B   #5,D1       **** **** BIT0 0000
00001926  EA09                    1375              LSR.B   #5,D1       **** **** 0000 0BIT      
00001928  C2FC 0008               1376              MULU    #8,D1       value adjusted for jumping
0000192C  4FF8 135E               1377              LEA     regNumTable ,A7 Load the table into A7
00001930  4EB7 1000               1378              JSR     (A7,D1)     Jump to subroutine of value at D1
00001934  B23C 0020               1379              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001938  6700 FC8E               1380              BEQ.W   immediateData   ;branch to immediateData
0000193C                          1381      
0000193C  14FC 002C               1382          MOVE.B  #',',(A2)+
00001940  14FC 0041               1383          MOVE.B  #'A',(A2)+
00001944  4241                    1384              CLR     D1
00001946  3206                    1385              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001948  E949                    1386              LSL.W   #4,D1       BIT* **** **** 0000
0000194A  E049                    1387              LSR.W   #8,D1       0000 0000 BIT* ****
0000194C  EA49                    1388              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000194E  C2FC 0008               1389              MULU    #8,D1       value adjusted for jumping
00001952  4FF8 13CE               1390              LEA     numTable ,A7 Load the table into A7
00001956  4EB7 1000               1391              JSR     (A7,D1)     Jump to subroutine of value at D1    
0000195A                          1392          
0000195A                          1393      
0000195A  6000 07E0               1394          BRA printCode
0000195E                          1395          
0000195E                          1396          
0000195E                          1397          
0000195E                          1398  
0000195E                          1399  adda_L  ;ADDA.L
0000195E                          1400      *-maybe error checking
0000195E                          1401      *-we know its ADDA.L so print it to our buffer
0000195E                          1402      *-ex ADDA.L D2,D7
0000195E                          1403      
0000195E  14FC 0020               1404      MOVE.B  #' ',(A2)+
00001962  14FC 0020               1405      MOVE.B  #' ',(A2)+
00001966  14FC 0020               1406      MOVE.B  #' ',(A2)+
0000196A  14FC 0020               1407      MOVE.B  #' ',(A2)+
0000196E  14FC 0041               1408          MOVE.B  #'A',(A2)+
00001972  14FC 0044               1409          MOVE.B  #'D',(A2)+
00001976  14FC 0044               1410          MOVE.B  #'D',(A2)+
0000197A  14FC 0041               1411          MOVE.B  #'A',(A2)+
0000197E  14FC 002E               1412          MOVE.B  #'.',(A2)+
00001982  14FC 004C               1413          MOVE.B  #'L',(A2)+
00001986                          1414      *-always allow 4 spaces
00001986  14FC 0020               1415          MOVE.B  #' ',(A2)+
0000198A  14FC 0020               1416          MOVE.B  #' ',(A2)+
0000198E  14FC 0020               1417          MOVE.B  #' ',(A2)+
00001992  14FC 0020               1418          MOVE.B  #' ',(A2)+      
00001996                          1419      
00001996                          1420      * MachineCode: 0001 **** **** **BI T***
00001996                          1421      *-insert immediate addressing here
00001996  4242                    1422              CLR     D2
00001998  4241                    1423              CLR     D1
0000199A  1406                    1424              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000199C  E50A                    1425              LSL.B   #2,D2       **** **** BIT* **00
0000199E  EA0A                    1426              LSR.B   #5,D2       **** **** 0000 0BIT
000019A0  C4FC 0008               1427              MULU    #8,D2       value adjusted for jumping
000019A4  4DF8 12B0               1428              LEA     modeTable,A6 Load the table into A6
000019A8  4EB6 2000               1429              JSR     (A6,D2)     Jump to subroutine of value at D0   
000019AC                          1430  
000019AC                          1431  
000019AC                          1432   * MachineCode: 0001 **** **** **** *BIT
000019AC                          1433              
000019AC  1206                    1434              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000019AE  EB09                    1435              LSL.B   #5,D1       **** **** BIT0 0000
000019B0  EA09                    1436              LSR.B   #5,D1       **** **** 0000 0BIT      
000019B2  C2FC 0008               1437              MULU    #8,D1       value adjusted for jumping
000019B6  4FF8 135E               1438              LEA     regNumTable ,A7 Load the table into A7
000019BA  4EB7 1000               1439              JSR     (A7,D1)     Jump to subroutine of value at D1
000019BE  B23C 0020               1440              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000019C2  6700 FC04               1441              BEQ.W   immediateData   ;branch to immediateData
000019C6                          1442      
000019C6  14FC 002C               1443              MOVE.B  #',',(A2)+
000019CA  14FC 0041               1444              MOVE.B  #'A',(A2)+
000019CE  4241                    1445              CLR     D1
000019D0  3206                    1446              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000019D2  E949                    1447              LSL.W   #4,D1       BIT* **** **** 0000
000019D4  E049                    1448              LSR.W   #8,D1       0000 0000 BIT* ****
000019D6  EA49                    1449              LSR.W   #5,D1       0000 0000 0000 0BIT     
000019D8  C2FC 0008               1450              MULU    #8,D1       value adjusted for jumping
000019DC  4FF8 13CE               1451              LEA     numTable ,A7 Load the table into A7
000019E0  4EB7 1000               1452              JSR     (A7,D1)     Jump to subroutine of value at D1    
000019E4                          1453          
000019E4                          1454      
000019E4  6000 0756               1455          BRA printCode
000019E8                          1456  
000019E8                          1457  
000019E8                          1458      
000019E8                          1459  add_B_EA   ;add.B Dn -> EA
000019E8                          1460      
000019E8                          1461      *-store the size of the operation for immediate decoding use here/below
000019E8                          1462      *-D7 equals storage of size of operation
000019E8                          1463      *- #3 is byte , #2 is word #1 is long
000019E8                          1464      ;MOVE.B  #3,D7
000019E8                          1465      
000019E8                          1466  
000019E8  14FC 0020               1467      MOVE.B  #' ',(A2)+
000019EC  14FC 0020               1468      MOVE.B  #' ',(A2)+
000019F0  14FC 0020               1469      MOVE.B  #' ',(A2)+
000019F4  14FC 0020               1470      MOVE.B  #' ',(A2)+
000019F8  14FC 0041               1471      MOVE.B  #'A',(A2)+
000019FC  14FC 0044               1472      MOVE.B  #'D',(A2)+
00001A00  14FC 0044               1473      MOVE.B  #'D',(A2)+
00001A04  14FC 002E               1474      MOVE.B  #'.',(A2)+
00001A08  14FC 0042               1475      MOVE.B  #'B',(A2)+
00001A0C                          1476      *-always allow 4 spaces
00001A0C  14FC 0020               1477      MOVE.B  #' ',(A2)+
00001A10  14FC 0020               1478      MOVE.B  #' ',(A2)+
00001A14  14FC 0020               1479      MOVE.B  #' ',(A2)+
00001A18  14FC 0020               1480      MOVE.B  #' ',(A2)+
00001A1C                          1481      
00001A1C                          1482      *-deCDOE EA (Dn,Dn
00001A1C                          1483          * MachineCode: 0001 **** **** **BI T***
00001A1C                          1484      *-insert immediate addressing here
00001A1C  4242                    1485              CLR     D2
00001A1E  4241                    1486              CLR     D1
00001A20  1406                    1487              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001A22  E50A                    1488              LSL.B   #2,D2       **** **** BIT* **00
00001A24  EA0A                    1489              LSR.B   #5,D2       **** **** 0000 0BIT
00001A26  C4FC 0008               1490              MULU    #8,D2       value adjusted for jumping
00001A2A  4DF8 12B0               1491              LEA     modeTable,A6 Load the table into A6
00001A2E  4EB6 2000               1492              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001A32                          1493  
00001A32                          1494  
00001A32                          1495   * MachineCode: 0001 **** **** **** *BIT
00001A32                          1496              
00001A32  1206                    1497              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001A34  EB09                    1498              LSL.B   #5,D1       **** **** BIT0 0000
00001A36  EA09                    1499              LSR.B   #5,D1       **** **** 0000 0BIT      
00001A38  C2FC 0008               1500              MULU    #8,D1       value adjusted for jumping
00001A3C  4FF8 135E               1501              LEA     regNumTable ,A7 Load the table into A7
00001A40  4EB7 1000               1502              JSR     (A7,D1)     Jump to subroutine of value at D1
00001A44  B23C 0020               1503              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001A48  6700 FB7E               1504              BEQ.W   immediateData   ;branch to immediateData
00001A4C  14FC 002C               1505              MOVE.B  #',',(A2)+
00001A50                          1506   ;           MOVE.B  #'D',(A2)+
00001A50                          1507              
00001A50  4242                    1508              CLR     D2
00001A52  4241                    1509              CLR     D1
00001A54  3406                    1510              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001A56  EF4A                    1511              LSL.W   #7,D2       BIT* **** **** 0000
00001A58  E04A                    1512              LSR.W   #8,D2       0000 0000 BIT* ****
00001A5A  EA4A                    1513              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001A5C  C4FC 0008               1514              MULU    #8,D2       value adjusted for jumping
00001A60  4DF8 12B0               1515              LEA     modeTable,A6 Load the table into A6
00001A64  4EB6 2000               1516              JSR     (A6,D2)     Jump to subroutine of value at D2
00001A68                          1517             
00001A68  3206                    1518              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001A6A  E949                    1519              LSL.W   #4,D1       BIT* **** **** 0000
00001A6C  E049                    1520              LSR.W   #8,D1       0000 0000 BIT* ****
00001A6E  EA49                    1521              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001A70  C2FC 0008               1522              MULU    #8,D1       value adjusted for jumping
00001A74  4FF8 135E               1523              LEA     regNumTable ,A7 Load the table into A7
00001A78  4EB7 1000               1524              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001A7C  6000 06BE               1525              BRA printcode  
00001A80                          1526              
00001A80                          1527              
00001A80                          1528  
00001A80                          1529     
00001A80                          1530  add_W_EA   ;add.B Dn -> EA
00001A80                          1531      
00001A80                          1532      *-store the size of the operation for immediate decoding use here/below
00001A80                          1533      *-D7 equals storage of size of operation
00001A80                          1534      *- #3 is byte , #2 is word #1 is long
00001A80                          1535      ;MOVE.B  #3,D7
00001A80  1E3C 0001               1536      MOVE.B  #1,D7
00001A84                          1537      
00001A84                          1538  
00001A84  14FC 0020               1539      MOVE.B  #' ',(A2)+
00001A88  14FC 0020               1540      MOVE.B  #' ',(A2)+
00001A8C  14FC 0020               1541      MOVE.B  #' ',(A2)+
00001A90  14FC 0020               1542      MOVE.B  #' ',(A2)+
00001A94  14FC 0041               1543      MOVE.B  #'A',(A2)+
00001A98  14FC 0044               1544      MOVE.B  #'D',(A2)+
00001A9C  14FC 0044               1545      MOVE.B  #'D',(A2)+
00001AA0  14FC 002E               1546      MOVE.B  #'.',(A2)+
00001AA4  14FC 0057               1547      MOVE.B  #'W',(A2)+
00001AA8                          1548      *-always allow 4 spaces
00001AA8  14FC 0020               1549      MOVE.B  #' ',(A2)+
00001AAC  14FC 0020               1550      MOVE.B  #' ',(A2)+
00001AB0  14FC 0020               1551      MOVE.B  #' ',(A2)+
00001AB4  14FC 0020               1552      MOVE.B  #' ',(A2)+
00001AB8                          1553      
00001AB8                          1554      
00001AB8                          1555      
00001AB8  14FC 0044               1556          MOVE.B  #'D',(A2)+
00001ABC                          1557             
00001ABC  3206                    1558              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001ABE  E949                    1559              LSL.W   #4,D1       BIT* **** **** 0000
00001AC0  E049                    1560              LSR.W   #8,D1       0000 0000 BIT* ****
00001AC2  EA49                    1561              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001AC4  C2FC 0008               1562              MULU    #8,D1       value adjusted for jumping
00001AC8  4FF8 13CE               1563              LEA     NumTable ,A7 Load the table into A7
00001ACC  4EB7 1000               1564              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001AD0                          1565              
00001AD0                          1566              
00001AD0  14FC 002C               1567              MOVE.B  #',',(A2)+
00001AD4                          1568              *-INSERT IMMEDIATE DATA HERE
00001AD4                          1569      *-deCDOE EA (Dn,Dn
00001AD4                          1570          * MachineCode: 0001 **** **** **BI T***
00001AD4                          1571   *Only next last 3 bits which is stored at D0 => Source Address mode
00001AD4                          1572      *-insert immediate addressing here
00001AD4  4242                    1573              CLR     D2
00001AD6  4241                    1574              CLR     D1
00001AD8  1406                    1575              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001ADA  E50A                    1576              LSL.B   #2,D2       **** **** BIT* **00
00001ADC  EA0A                    1577              LSR.B   #5,D2       **** **** 0000 0BIT
00001ADE  C4FC 0008               1578              MULU    #8,D2       value adjusted for jumping
00001AE2  4DF8 12B0               1579              LEA     modeTable,A6 Load the table into A6
00001AE6  4EB6 2000               1580              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001AEA                          1581  
00001AEA                          1582  
00001AEA                          1583   * MachineCode: 0001 **** **** **** *BIT
00001AEA                          1584              
00001AEA  1206                    1585              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001AEC  EB09                    1586              LSL.B   #5,D1       **** **** BIT0 0000
00001AEE  EA09                    1587              LSR.B   #5,D1       **** **** 0000 0BIT      
00001AF0  C2FC 0008               1588              MULU    #8,D1       value adjusted for jumping
00001AF4  4FF8 135E               1589              LEA     regNumTable ,A7 Load the table into A7
00001AF8  4EB7 1000               1590              JSR     (A7,D1)     Jump to subroutine of value at D1
00001AFC  B23C 0020               1591              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001B00  6700 FAC6               1592              BEQ.W   immediateData   ;branch to immediateData
00001B04                          1593  
00001B04                          1594  
00001B04  6000 0636               1595              BRA printcode  
00001B08                          1596              
00001B08                          1597  add_L_EA   ;add.L Dn -> EA
00001B08  14FC 0020               1598      MOVE.B  #' ',(A2)+
00001B0C  14FC 0020               1599      MOVE.B  #' ',(A2)+
00001B10  14FC 0020               1600      MOVE.B  #' ',(A2)+
00001B14  14FC 0020               1601      MOVE.B  #' ',(A2)+
00001B18  14FC 0041               1602      MOVE.B  #'A',(A2)+
00001B1C  14FC 0044               1603      MOVE.B  #'D',(A2)+
00001B20  14FC 0044               1604      MOVE.B  #'D',(A2)+
00001B24  14FC 002E               1605      MOVE.B  #'.',(A2)+
00001B28  14FC 004C               1606      MOVE.B  #'L',(A2)+
00001B2C                          1607      *-always allow 4 spaces
00001B2C  14FC 0020               1608      MOVE.B  #' ',(A2)+
00001B30  14FC 0020               1609      MOVE.B  #' ',(A2)+
00001B34  14FC 0020               1610      MOVE.B  #' ',(A2)+
00001B38  14FC 0020               1611      MOVE.B  #' ',(A2)+
00001B3C                          1612      
00001B3C                          1613      
00001B3C                          1614      
00001B3C  14FC 0044               1615          MOVE.B  #'D',(A2)+
00001B40                          1616             
00001B40  3206                    1617              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001B42  E949                    1618              LSL.W   #4,D1       BIT* **** **** 0000
00001B44  E049                    1619              LSR.W   #8,D1       0000 0000 BIT* ****
00001B46  EA49                    1620              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001B48  C2FC 0008               1621              MULU    #8,D1       value adjusted for jumping
00001B4C  4FF8 13CE               1622              LEA     NumTable ,A7 Load the table into A7
00001B50  4EB7 1000               1623              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001B54                          1624              
00001B54                          1625              
00001B54  14FC 002C               1626              MOVE.B  #',',(A2)+
00001B58                          1627              *-INSERT IMMEDIATE DATA HERE
00001B58                          1628      *-deCDOE EA (Dn,Dn
00001B58                          1629          * MachineCode: 0001 **** **** **BI T***
00001B58                          1630   *Only next last 3 bits which is stored at D0 => Source Address mode
00001B58                          1631      *-insert immediate addressing here
00001B58  4242                    1632              CLR     D2
00001B5A  4241                    1633              CLR     D1
00001B5C  1406                    1634              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001B5E  E50A                    1635              LSL.B   #2,D2       **** **** BIT* **00
00001B60  EA0A                    1636              LSR.B   #5,D2       **** **** 0000 0BIT
00001B62  C4FC 0008               1637              MULU    #8,D2       value adjusted for jumping
00001B66  4DF8 12B0               1638              LEA     modeTable,A6 Load the table into A6
00001B6A  4EB6 2000               1639              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001B6E                          1640  
00001B6E                          1641  
00001B6E                          1642   * MachineCode: 0001 **** **** **** *BIT
00001B6E                          1643              
00001B6E  1206                    1644              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001B70  EB09                    1645              LSL.B   #5,D1       **** **** BIT0 0000
00001B72  EA09                    1646              LSR.B   #5,D1       **** **** 0000 0BIT      
00001B74  C2FC 0008               1647              MULU    #8,D1       value adjusted for jumping
00001B78  4FF8 135E               1648              LEA     regNumTable ,A7 Load the table into A7
00001B7C  4EB7 1000               1649              JSR     (A7,D1)     Jump to subroutine of value at D1
00001B80                          1650              
00001B80                          1651              *-ERROR HERE NOT SURE WHY AFTER ADD.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001B80                          1652  
00001B80                          1653  
00001B80  6000 05BA               1654              BRA printcode  
00001B84                          1655  
00001B84                          1656  -------------------- end include --------------------
00001B84                          1657              INCLUDE 'op1001.x68'    SUB,SUBA
00001B84                          1658  
00001B84                          1659  
00001B84                          1660  op1001
00001B84                          1661  
00001B84                          1662      
00001B84                          1663          ; we need to determine what its size is (B,W,L) putting the data in D6
00001B84  4EB8 14BA               1664      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001B88                          1665      ; we use to decode and branch
00001B88                          1666      *-now D3 contains the OPMODE FIELD telling us wether this is
00001B88                          1667      *-a LONG or a WORD
00001B88                          1668      
00001B88                          1669      *-now we need to decipher if its any of the subs
00001B88  B63C 0000               1670      CMP.B   #hex_0,D3 is this SUB.B
00001B8C  6700 0002               1671      BEQ sub_B   ;<EA> -> Dn
00001B90                          1672  
00001B90                          1673  
00001B90                          1674  sub_B
00001B90                          1675      ;EA ->Dn
00001B90                          1676      
00001B90                          1677          *-store the size of the operation for immediate decoding use here/below
00001B90                          1678      *-D7 equals storage of size of operation
00001B90                          1679      *- #3 is byte , #2 is word #1 is long
00001B90                          1680      ;MOVE.B  #3,D7
00001B90                          1681      
00001B90                          1682  
00001B90  14FC 0020               1683      MOVE.B  #' ',(A2)+
00001B94  14FC 0020               1684      MOVE.B  #' ',(A2)+
00001B98  14FC 0020               1685      MOVE.B  #' ',(A2)+
00001B9C  14FC 0020               1686      MOVE.B  #' ',(A2)+
00001BA0  14FC 0053               1687      MOVE.B  #'S',(A2)+
00001BA4  14FC 0055               1688      MOVE.B  #'U',(A2)+
00001BA8  14FC 0042               1689      MOVE.B  #'B',(A2)+
00001BAC  14FC 002E               1690      MOVE.B  #'.',(A2)+
00001BB0  14FC 0042               1691      MOVE.B  #'B',(A2)+
00001BB4                          1692      *-always allow 4 spaces
00001BB4  14FC 0020               1693      MOVE.B  #' ',(A2)+
00001BB8  14FC 0020               1694      MOVE.B  #' ',(A2)+
00001BBC  14FC 0020               1695      MOVE.B  #' ',(A2)+
00001BC0  14FC 0020               1696      MOVE.B  #' ',(A2)+
00001BC4                          1697      
00001BC4                          1698          *-deCDOE EA (Dn,Dn
00001BC4                          1699          * MachineCode: 0001 **** **** **BI T***
00001BC4                          1700      *-insert immediate subressing here
00001BC4  4242                    1701              CLR     D2
00001BC6  4241                    1702              CLR     D1
00001BC8  1406                    1703              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001BCA  E50A                    1704              LSL.B   #2,D2       **** **** BIT* **00
00001BCC  EA0A                    1705              LSR.B   #5,D2       **** **** 0000 0BIT
00001BCE  C4FC 0008               1706              MULU    #8,D2       value adjusted for jumping
00001BD2  4DF8 12B0               1707              LEA     modeTable,A6 Load the table into A6
00001BD6  4EB6 2000               1708              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001BDA                          1709  
00001BDA                          1710  
00001BDA                          1711   * MachineCode: 0001 **** **** **** *BIT
00001BDA                          1712              
00001BDA  1206                    1713              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001BDC  EB09                    1714              LSL.B   #5,D1       **** **** BIT0 0000
00001BDE  EA09                    1715              LSR.B   #5,D1       **** **** 0000 0BIT      
00001BE0  C2FC 0008               1716              MULU    #8,D1       value adjusted for jumping
00001BE4  4FF8 135E               1717              LEA     regNumTable ,A7 Load the table into A7
00001BE8  4EB7 1000               1718              JSR     (A7,D1)     Jump to subroutine of value at D1
00001BEC  B23C 0020               1719              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001BF0  6700 F9D6               1720              BEQ.W   immediateData   ;branch to immediateData
00001BF4  14FC 002C               1721              MOVE.B  #',',(A2)+
00001BF8  14FC 0044               1722              MOVE.B  #'D',(A2)+
00001BFC                          1723              
00001BFC                          1724    *------------------------------------------------------------
00001BFC  4241                    1725              CLR     D1
00001BFE  3206                    1726              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001C00  E949                    1727              LSL.W   #4,D1       BIT* **** **** 0000
00001C02  E049                    1728              LSR.W   #8,D1       0000 0000 BIT* ****
00001C04  EA49                    1729              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001C06  C2FC 0008               1730              MULU    #8,D1       value adjusted for jumping
00001C0A  4FF8 13CE               1731              LEA     numTable ,A7 Load the table into A7
00001C0E  4EB7 1000               1732              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C12  6000 0528               1733              BRA printcode  
00001C16                          1734      
00001C16                          1735      
00001C16                          1736       
00001C16                          1737  sub_W   ;sub.B EA->Dn
00001C16                          1738      
00001C16                          1739      *-store the size of the operation for immediate decoding use here/below
00001C16                          1740      *-D7 equals storage of size of operation
00001C16                          1741      *- #3 is byte , #2 is word #1 is long
00001C16                          1742      ;MOVE.B  #3,D7
00001C16                          1743      
00001C16                          1744  
00001C16  14FC 0020               1745      MOVE.B  #' ',(A2)+
00001C1A  14FC 0020               1746      MOVE.B  #' ',(A2)+
00001C1E  14FC 0020               1747      MOVE.B  #' ',(A2)+
00001C22  14FC 0020               1748      MOVE.B  #' ',(A2)+
00001C26  14FC 0041               1749      MOVE.B  #'A',(A2)+
00001C2A  14FC 0044               1750      MOVE.B  #'D',(A2)+
00001C2E  14FC 0044               1751      MOVE.B  #'D',(A2)+
00001C32  14FC 002E               1752      MOVE.B  #'.',(A2)+
00001C36  14FC 0057               1753      MOVE.B  #'W',(A2)+
00001C3A                          1754      *-always allow 4 spaces
00001C3A  14FC 0020               1755      MOVE.B  #' ',(A2)+
00001C3E  14FC 0020               1756      MOVE.B  #' ',(A2)+
00001C42  14FC 0020               1757      MOVE.B  #' ',(A2)+
00001C46  14FC 0020               1758      MOVE.B  #' ',(A2)+
00001C4A                          1759      
00001C4A                          1760      *-deCDOE EA (Dn,Dn
00001C4A                          1761          * MachineCode: 0001 **** **** **BI T***
00001C4A                          1762      *-insert immediate subressing here
00001C4A  4242                    1763              CLR     D2
00001C4C  4241                    1764              CLR     D1
00001C4E  1406                    1765              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001C50  E50A                    1766              LSL.B   #2,D2       **** **** BIT* **00
00001C52  EA0A                    1767              LSR.B   #5,D2       **** **** 0000 0BIT
00001C54  C4FC 0008               1768              MULU    #8,D2       value adjusted for jumping
00001C58  4DF8 12B0               1769              LEA     modeTable,A6 Load the table into A6
00001C5C  4EB6 2000               1770              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001C60                          1771  
00001C60                          1772  
00001C60                          1773   * MachineCode: 0001 **** **** **** *BIT
00001C60                          1774              
00001C60  1206                    1775              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001C62  EB09                    1776              LSL.B   #5,D1       **** **** BIT0 0000
00001C64  EA09                    1777              LSR.B   #5,D1       **** **** 0000 0BIT      
00001C66  C2FC 0008               1778              MULU    #8,D1       value adjusted for jumping
00001C6A  4FF8 135E               1779              LEA     regNumTable ,A7 Load the table into A7
00001C6E  4EB7 1000               1780              JSR     (A7,D1)     Jump to subroutine of value at D1
00001C72  B23C 0020               1781              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001C76  6700 F950               1782              BEQ.W   immediateData   ;branch to immediateData
00001C7A  14FC 002C               1783              MOVE.B  #',',(A2)+
00001C7E  14FC 0044               1784              MOVE.B  #'D',(A2)+
00001C82                          1785              
00001C82                          1786                *------------------------------------------------------------
00001C82  4241                    1787              CLR     D1
00001C84  3206                    1788              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001C86  E949                    1789              LSL.W   #4,D1       BIT* **** **** 0000
00001C88  E049                    1790              LSR.W   #8,D1       0000 0000 BIT* ****
00001C8A  EA49                    1791              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001C8C  C2FC 0008               1792              MULU    #8,D1       value adjusted for jumping
00001C90  4FF8 13CE               1793              LEA     numTable ,A7 Load the table into A7
00001C94  4EB7 1000               1794              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001C98  6000 04A2               1795              BRA printcode  
00001C9C                          1796     
00001C9C                          1797  sub_L   ;sub.B EA->Dn
00001C9C                          1798      
00001C9C                          1799      *-store the size of the operation for immediate decoding use here/below
00001C9C                          1800      *-D7 equals storage of size of operation
00001C9C                          1801      *- #3 is byte , #2 is word #1 is long
00001C9C                          1802      ;MOVE.B  #3,D7
00001C9C                          1803      
00001C9C                          1804  
00001C9C  14FC 0020               1805      MOVE.B  #' ',(A2)+
00001CA0  14FC 0020               1806      MOVE.B  #' ',(A2)+
00001CA4  14FC 0020               1807      MOVE.B  #' ',(A2)+
00001CA8  14FC 0020               1808      MOVE.B  #' ',(A2)+
00001CAC  14FC 0041               1809      MOVE.B  #'A',(A2)+
00001CB0  14FC 0044               1810      MOVE.B  #'D',(A2)+
00001CB4  14FC 0044               1811      MOVE.B  #'D',(A2)+
00001CB8  14FC 002E               1812      MOVE.B  #'.',(A2)+
00001CBC  14FC 004C               1813      MOVE.B  #'L',(A2)+
00001CC0                          1814      *-always allow 4 spaces
00001CC0  14FC 0020               1815      MOVE.B  #' ',(A2)+
00001CC4  14FC 0020               1816      MOVE.B  #' ',(A2)+
00001CC8  14FC 0020               1817      MOVE.B  #' ',(A2)+
00001CCC  14FC 0020               1818      MOVE.B  #' ',(A2)+
00001CD0                          1819      
00001CD0                          1820      *-deCDOE EA (Dn,Dn
00001CD0                          1821          * MachineCode: 0001 **** **** **BI T***
00001CD0                          1822      *-insert immediate subressing here
00001CD0  4242                    1823              CLR     D2
00001CD2  4241                    1824              CLR     D1
00001CD4  1406                    1825              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001CD6  E50A                    1826              LSL.B   #2,D2       **** **** BIT* **00
00001CD8  EA0A                    1827              LSR.B   #5,D2       **** **** 0000 0BIT
00001CDA  C4FC 0008               1828              MULU    #8,D2       value adjusted for jumping
00001CDE  4DF8 12B0               1829              LEA     modeTable,A6 Load the table into A6
00001CE2  4EB6 2000               1830              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001CE6                          1831  
00001CE6                          1832  
00001CE6                          1833   * MachineCode: 0001 **** **** **** *BIT
00001CE6                          1834              
00001CE6  1206                    1835              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001CE8  EB09                    1836              LSL.B   #5,D1       **** **** BIT0 0000
00001CEA  EA09                    1837              LSR.B   #5,D1       **** **** 0000 0BIT      
00001CEC  C2FC 0008               1838              MULU    #8,D1       value adjusted for jumping
00001CF0  4FF8 135E               1839              LEA     regNumTable ,A7 Load the table into A7
00001CF4  4EB7 1000               1840              JSR     (A7,D1)     Jump to subroutine of value at D1
00001CF8  B23C 0020               1841              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001CFC  6700 F8CA               1842              BEQ.W   immediateData   ;branch to immediateData
00001D00  14FC 002C               1843              MOVE.B  #',',(A2)+
00001D04  14FC 0044               1844              MOVE.B  #'D',(A2)+
00001D08                          1845              
00001D08                          1846                *------------------------------------------------------------
00001D08  4241                    1847              CLR     D1
00001D0A  3206                    1848              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001D0C  E949                    1849              LSL.W   #4,D1       BIT* **** **** 0000
00001D0E  E049                    1850              LSR.W   #8,D1       0000 0000 BIT* ****
00001D10  EA49                    1851              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D12  C2FC 0008               1852              MULU    #8,D1       value adjusted for jumping
00001D16  4FF8 13CE               1853              LEA     numTable ,A7 Load the table into A7
00001D1A  4EB7 1000               1854              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001D1E  6000 041C               1855              BRA printcode  
00001D22                          1856      
00001D22                          1857  suba_W  ;subA.W
00001D22                          1858      *-maybe error checking
00001D22                          1859      *-we know its subA.W so print it to our buffer
00001D22                          1860      *-ex subA.W D2,D7
00001D22                          1861      
00001D22  14FC 0020               1862      MOVE.B  #' ',(A2)+
00001D26  14FC 0020               1863      MOVE.B  #' ',(A2)+
00001D2A  14FC 0020               1864      MOVE.B  #' ',(A2)+
00001D2E  14FC 0020               1865      MOVE.B  #' ',(A2)+
00001D32  14FC 0053               1866      MOVE.B  #'S',(A2)+
00001D36  14FC 0055               1867      MOVE.B  #'U',(A2)+
00001D3A  14FC 0042               1868      MOVE.B  #'B',(A2)+
00001D3E  14FC 0041               1869      MOVE.B  #'A',(A2)+
00001D42  14FC 002E               1870      MOVE.B  #'.',(A2)+
00001D46  14FC 0057               1871      MOVE.B  #'W',(A2)+
00001D4A                          1872      *-always allow 4 spaces
00001D4A  14FC 0020               1873      MOVE.B  #' ',(A2)+
00001D4E  14FC 0020               1874      MOVE.B  #' ',(A2)+
00001D52  14FC 0020               1875      MOVE.B  #' ',(A2)+
00001D56  14FC 0020               1876      MOVE.B  #' ',(A2)+
00001D5A                          1877      
00001D5A                          1878      * MachineCode: 0001 **** **** **BI T***
00001D5A                          1879      *-insert immediate subressing here
00001D5A  4242                    1880              CLR     D2
00001D5C  4241                    1881              CLR     D1
00001D5E  1406                    1882              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001D60  E50A                    1883              LSL.B   #2,D2       **** **** BIT* **00
00001D62  EA0A                    1884              LSR.B   #5,D2       **** **** 0000 0BIT
00001D64  C4FC 0008               1885              MULU    #8,D2       value adjusted for jumping
00001D68  4DF8 12B0               1886              LEA     modeTable,A6 Load the table into A6
00001D6C  4EB6 2000               1887              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001D70                          1888  
00001D70                          1889  
00001D70                          1890   * MachineCode: 0001 **** **** **** *BIT
00001D70                          1891              
00001D70  1206                    1892              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001D72  EB09                    1893              LSL.B   #5,D1       **** **** BIT0 0000
00001D74  EA09                    1894              LSR.B   #5,D1       **** **** 0000 0BIT      
00001D76  C2FC 0008               1895              MULU    #8,D1       value adjusted for jumping
00001D7A  4FF8 135E               1896              LEA     regNumTable ,A7 Load the table into A7
00001D7E  4EB7 1000               1897              JSR     (A7,D1)     Jump to subroutine of value at D1
00001D82  B23C 0020               1898              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001D86  6700 F840               1899              BEQ.W   immediateData   ;branch to immediateData
00001D8A                          1900      
00001D8A  14FC 002C               1901          MOVE.B  #',',(A2)+
00001D8E  14FC 0041               1902          MOVE.B  #'A',(A2)+
00001D92  4241                    1903              CLR     D1
00001D94  3206                    1904              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001D96  E949                    1905              LSL.W   #4,D1       BIT* **** **** 0000
00001D98  E049                    1906              LSR.W   #8,D1       0000 0000 BIT* ****
00001D9A  EA49                    1907              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001D9C  C2FC 0008               1908              MULU    #8,D1       value adjusted for jumping
00001DA0  4FF8 13CE               1909              LEA     numTable ,A7 Load the table into A7
00001DA4  4EB7 1000               1910              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001DA8                          1911          
00001DA8                          1912      
00001DA8  6000 0392               1913          BRA printCode
00001DAC                          1914          
00001DAC                          1915          
00001DAC                          1916          
00001DAC                          1917  
00001DAC                          1918  suba_L  ;subA.L
00001DAC                          1919      *-maybe error checking
00001DAC                          1920      *-we know its subA.L so print it to our buffer
00001DAC                          1921      *-ex subA.L D2,D7
00001DAC                          1922      
00001DAC  14FC 0020               1923      MOVE.B  #' ',(A2)+
00001DB0  14FC 0020               1924      MOVE.B  #' ',(A2)+
00001DB4  14FC 0020               1925      MOVE.B  #' ',(A2)+
00001DB8  14FC 0020               1926      MOVE.B  #' ',(A2)+
00001DBC  14FC 0053               1927          MOVE.B  #'S',(A2)+
00001DC0  14FC 0055               1928          MOVE.B  #'U',(A2)+
00001DC4  14FC 0042               1929          MOVE.B  #'B',(A2)+
00001DC8  14FC 0041               1930          MOVE.B  #'A',(A2)+
00001DCC  14FC 002E               1931          MOVE.B  #'.',(A2)+
00001DD0  14FC 004C               1932          MOVE.B  #'L',(A2)+
00001DD4                          1933      *-always allow 4 spaces
00001DD4  14FC 0020               1934          MOVE.B  #' ',(A2)+
00001DD8  14FC 0020               1935          MOVE.B  #' ',(A2)+
00001DDC  14FC 0020               1936          MOVE.B  #' ',(A2)+
00001DE0  14FC 0020               1937          MOVE.B  #' ',(A2)+      
00001DE4                          1938      
00001DE4                          1939      * MachineCode: 0001 **** **** **BI T***
00001DE4                          1940      *-insert immediate subressing here
00001DE4  4242                    1941              CLR     D2
00001DE6  4241                    1942              CLR     D1
00001DE8  1406                    1943              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001DEA  E50A                    1944              LSL.B   #2,D2       **** **** BIT* **00
00001DEC  EA0A                    1945              LSR.B   #5,D2       **** **** 0000 0BIT
00001DEE  C4FC 0008               1946              MULU    #8,D2       value adjusted for jumping
00001DF2  4DF8 12B0               1947              LEA     modeTable,A6 Load the table into A6
00001DF6  4EB6 2000               1948              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001DFA                          1949  
00001DFA                          1950  
00001DFA                          1951   * MachineCode: 0001 **** **** **** *BIT
00001DFA                          1952              
00001DFA  1206                    1953              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001DFC  EB09                    1954              LSL.B   #5,D1       **** **** BIT0 0000
00001DFE  EA09                    1955              LSR.B   #5,D1       **** **** 0000 0BIT      
00001E00  C2FC 0008               1956              MULU    #8,D1       value adjusted for jumping
00001E04  4FF8 135E               1957              LEA     regNumTable ,A7 Load the table into A7
00001E08  4EB7 1000               1958              JSR     (A7,D1)     Jump to subroutine of value at D1
00001E0C  B23C 0020               1959              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001E10  6700 F7B6               1960              BEQ.W   immediateData   ;branch to immediateData
00001E14                          1961      
00001E14  14FC 002C               1962              MOVE.B  #',',(A2)+
00001E18  14FC 0041               1963              MOVE.B  #'A',(A2)+
00001E1C  4241                    1964              CLR     D1
00001E1E  3206                    1965              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001E20  E949                    1966              LSL.W   #4,D1       BIT* **** **** 0000
00001E22  E049                    1967              LSR.W   #8,D1       0000 0000 BIT* ****
00001E24  EA49                    1968              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001E26  C2FC 0008               1969              MULU    #8,D1       value adjusted for jumping
00001E2A  4FF8 13CE               1970              LEA     numTable ,A7 Load the table into A7
00001E2E  4EB7 1000               1971              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001E32                          1972          
00001E32                          1973      
00001E32  6000 0308               1974          BRA printCode
00001E36                          1975  
00001E36                          1976  
00001E36                          1977      
00001E36                          1978  sub_B_EA   ;sub.B Dn -> EA
00001E36                          1979      
00001E36                          1980      *-store the size of the operation for immediate decoding use here/below
00001E36                          1981      *-D7 equals storage of size of operation
00001E36                          1982      *- #3 is byte , #2 is word #1 is long
00001E36                          1983      ;MOVE.B  #3,D7
00001E36                          1984      
00001E36                          1985  
00001E36  14FC 0020               1986      MOVE.B  #' ',(A2)+
00001E3A  14FC 0020               1987      MOVE.B  #' ',(A2)+
00001E3E  14FC 0020               1988      MOVE.B  #' ',(A2)+
00001E42  14FC 0020               1989      MOVE.B  #' ',(A2)+
00001E46  14FC 0053               1990      MOVE.B  #'S',(A2)+
00001E4A  14FC 0055               1991      MOVE.B  #'U',(A2)+
00001E4E  14FC 0042               1992      MOVE.B  #'B',(A2)+
00001E52  14FC 002E               1993      MOVE.B  #'.',(A2)+
00001E56  14FC 0042               1994      MOVE.B  #'B',(A2)+
00001E5A                          1995      *-always allow 4 spaces
00001E5A  14FC 0020               1996      MOVE.B  #' ',(A2)+
00001E5E  14FC 0020               1997      MOVE.B  #' ',(A2)+
00001E62  14FC 0020               1998      MOVE.B  #' ',(A2)+
00001E66  14FC 0020               1999      MOVE.B  #' ',(A2)+
00001E6A                          2000      
00001E6A                          2001      *-deCDOE EA (Dn,Dn
00001E6A                          2002          * MachineCode: 0001 **** **** **BI T***
00001E6A                          2003      *-insert immediate subressing here
00001E6A  4242                    2004              CLR     D2
00001E6C  4241                    2005              CLR     D1
00001E6E  1406                    2006              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001E70  E50A                    2007              LSL.B   #2,D2       **** **** BIT* **00
00001E72  EA0A                    2008              LSR.B   #5,D2       **** **** 0000 0BIT
00001E74  C4FC 0008               2009              MULU    #8,D2       value adjusted for jumping
00001E78  4DF8 12B0               2010              LEA     modeTable,A6 Load the table into A6
00001E7C  4EB6 2000               2011              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001E80                          2012  
00001E80                          2013  
00001E80                          2014   * MachineCode: 0001 **** **** **** *BIT
00001E80                          2015              
00001E80  1206                    2016              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001E82  EB09                    2017              LSL.B   #5,D1       **** **** BIT0 0000
00001E84  EA09                    2018              LSR.B   #5,D1       **** **** 0000 0BIT      
00001E86  C2FC 0008               2019              MULU    #8,D1       value adjusted for jumping
00001E8A  4FF8 135E               2020              LEA     regNumTable ,A7 Load the table into A7
00001E8E  4EB7 1000               2021              JSR     (A7,D1)     Jump to subroutine of value at D1
00001E92  B23C 0020               2022              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001E96  6700 F730               2023              BEQ.W   immediateData   ;branch to immediateData
00001E9A  14FC 002C               2024              MOVE.B  #',',(A2)+
00001E9E                          2025   ;           MOVE.B  #'D',(A2)+
00001E9E                          2026              
00001E9E  4242                    2027              CLR     D2
00001EA0  4241                    2028              CLR     D1
00001EA2  3406                    2029              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001EA4  EF4A                    2030              LSL.W   #7,D2       BIT* **** **** 0000
00001EA6  E04A                    2031              LSR.W   #8,D2       0000 0000 BIT* ****
00001EA8  EA4A                    2032              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001EAA  C4FC 0008               2033              MULU    #8,D2       value adjusted for jumping
00001EAE  4DF8 12B0               2034              LEA     modeTable,A6 Load the table into A6
00001EB2  4EB6 2000               2035              JSR     (A6,D2)     Jump to subroutine of value at D2
00001EB6                          2036             
00001EB6  3206                    2037              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001EB8  E949                    2038              LSL.W   #4,D1       BIT* **** **** 0000
00001EBA  E049                    2039              LSR.W   #8,D1       0000 0000 BIT* ****
00001EBC  EA49                    2040              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001EBE  C2FC 0008               2041              MULU    #8,D1       value adjusted for jumping
00001EC2  4FF8 135E               2042              LEA     regNumTable ,A7 Load the table into A7
00001EC6  4EB7 1000               2043              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001ECA  6000 0270               2044              BRA printcode  
00001ECE                          2045              
00001ECE                          2046              
00001ECE                          2047  
00001ECE                          2048     
00001ECE                          2049  sub_W_EA   ;sub.B Dn -> EA
00001ECE                          2050      
00001ECE                          2051      *-store the size of the operation for immediate decoding use here/below
00001ECE                          2052      *-D7 equals storage of size of operation
00001ECE                          2053      *- #3 is byte , #2 is word #1 is long
00001ECE                          2054      ;MOVE.B  #3,D7
00001ECE  1E3C 0001               2055      MOVE.B  #1,D7
00001ED2                          2056      
00001ED2                          2057  
00001ED2  14FC 0020               2058      MOVE.B  #' ',(A2)+
00001ED6  14FC 0020               2059      MOVE.B  #' ',(A2)+
00001EDA  14FC 0020               2060      MOVE.B  #' ',(A2)+
00001EDE  14FC 0020               2061      MOVE.B  #' ',(A2)+
00001EE2  14FC 0053               2062      MOVE.B  #'S',(A2)+
00001EE6  14FC 0055               2063      MOVE.B  #'U',(A2)+
00001EEA  14FC 0042               2064      MOVE.B  #'B',(A2)+
00001EEE  14FC 002E               2065      MOVE.B  #'.',(A2)+
00001EF2  14FC 0057               2066      MOVE.B  #'W',(A2)+
00001EF6                          2067      *-always allow 4 spaces
00001EF6  14FC 0020               2068      MOVE.B  #' ',(A2)+
00001EFA  14FC 0020               2069      MOVE.B  #' ',(A2)+
00001EFE  14FC 0020               2070      MOVE.B  #' ',(A2)+
00001F02  14FC 0020               2071      MOVE.B  #' ',(A2)+
00001F06                          2072      
00001F06                          2073      
00001F06                          2074      
00001F06  14FC 0044               2075          MOVE.B  #'D',(A2)+
00001F0A                          2076             
00001F0A  3206                    2077              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F0C  E949                    2078              LSL.W   #4,D1       BIT* **** **** 0000
00001F0E  E049                    2079              LSR.W   #8,D1       0000 0000 BIT* ****
00001F10  EA49                    2080              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F12  C2FC 0008               2081              MULU    #8,D1       value adjusted for jumping
00001F16  4FF8 13CE               2082              LEA     NumTable ,A7 Load the table into A7
00001F1A  4EB7 1000               2083              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F1E                          2084              
00001F1E                          2085              
00001F1E  14FC 002C               2086              MOVE.B  #',',(A2)+
00001F22                          2087              *-INSERT IMMEDIATE DATA HERE
00001F22                          2088      *-deCDOE EA (Dn,Dn
00001F22                          2089          * MachineCode: 0001 **** **** **BI T***
00001F22                          2090   *Only next last 3 bits which is stored at D0 => Source subress mode
00001F22                          2091      *-insert immediate subressing here
00001F22  4242                    2092              CLR     D2
00001F24  4241                    2093              CLR     D1
00001F26  1406                    2094              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001F28  E50A                    2095              LSL.B   #2,D2       **** **** BIT* **00
00001F2A  EA0A                    2096              LSR.B   #5,D2       **** **** 0000 0BIT
00001F2C  C4FC 0008               2097              MULU    #8,D2       value adjusted for jumping
00001F30  4DF8 12B0               2098              LEA     modeTable,A6 Load the table into A6
00001F34  4EB6 2000               2099              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001F38                          2100  
00001F38                          2101  
00001F38                          2102   * MachineCode: 0001 **** **** **** *BIT
00001F38                          2103              
00001F38  1206                    2104              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001F3A  EB09                    2105              LSL.B   #5,D1       **** **** BIT0 0000
00001F3C  EA09                    2106              LSR.B   #5,D1       **** **** 0000 0BIT      
00001F3E  C2FC 0008               2107              MULU    #8,D1       value adjusted for jumping
00001F42  4FF8 135E               2108              LEA     regNumTable ,A7 Load the table into A7
00001F46  4EB7 1000               2109              JSR     (A7,D1)     Jump to subroutine of value at D1
00001F4A  B23C 0020               2110              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001F4E  6700 F678               2111              BEQ.W   immediateData   ;branch to immediateData
00001F52                          2112  
00001F52                          2113  
00001F52  6000 01E8               2114              BRA printcode  
00001F56                          2115              
00001F56                          2116  sub_L_EA   ;sub.L Dn -> EA
00001F56  14FC 0020               2117      MOVE.B  #' ',(A2)+
00001F5A  14FC 0020               2118      MOVE.B  #' ',(A2)+
00001F5E  14FC 0020               2119      MOVE.B  #' ',(A2)+
00001F62  14FC 0020               2120      MOVE.B  #' ',(A2)+
00001F66  14FC 0053               2121      MOVE.B  #'S',(A2)+
00001F6A  14FC 0055               2122      MOVE.B  #'U',(A2)+
00001F6E  14FC 0042               2123      MOVE.B  #'B',(A2)+
00001F72  14FC 002E               2124      MOVE.B  #'.',(A2)+
00001F76  14FC 004C               2125      MOVE.B  #'L',(A2)+
00001F7A                          2126      *-always allow 4 spaces
00001F7A  14FC 0020               2127      MOVE.B  #' ',(A2)+
00001F7E  14FC 0020               2128      MOVE.B  #' ',(A2)+
00001F82  14FC 0020               2129      MOVE.B  #' ',(A2)+
00001F86  14FC 0020               2130      MOVE.B  #' ',(A2)+
00001F8A                          2131      
00001F8A                          2132      
00001F8A                          2133      
00001F8A  14FC 0044               2134          MOVE.B  #'D',(A2)+
00001F8E                          2135             
00001F8E  3206                    2136              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F90  E949                    2137              LSL.W   #4,D1       BIT* **** **** 0000
00001F92  E049                    2138              LSR.W   #8,D1       0000 0000 BIT* ****
00001F94  EA49                    2139              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F96  C2FC 0008               2140              MULU    #8,D1       value adjusted for jumping
00001F9A  4FF8 13CE               2141              LEA     NumTable ,A7 Load the table into A7
00001F9E  4EB7 1000               2142              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001FA2                          2143              
00001FA2                          2144              
00001FA2  14FC 002C               2145              MOVE.B  #',',(A2)+
00001FA6                          2146              *-INSERT IMMEDIATE DATA HERE
00001FA6                          2147      *-deCDOE EA (Dn,Dn
00001FA6                          2148          * MachineCode: 0001 **** **** **BI T***
00001FA6                          2149   *Only next last 3 bits which is stored at D0 => Source subress mode
00001FA6                          2150      *-insert immediate subressing here
00001FA6  4242                    2151              CLR     D2
00001FA8  4241                    2152              CLR     D1
00001FAA  1406                    2153              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001FAC  E50A                    2154              LSL.B   #2,D2       **** **** BIT* **00
00001FAE  EA0A                    2155              LSR.B   #5,D2       **** **** 0000 0BIT
00001FB0  C4FC 0008               2156              MULU    #8,D2       value adjusted for jumping
00001FB4  4DF8 12B0               2157              LEA     modeTable,A6 Load the table into A6
00001FB8  4EB6 2000               2158              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001FBC                          2159  
00001FBC                          2160  
00001FBC                          2161   * MachineCode: 0001 **** **** **** *BIT
00001FBC                          2162              
00001FBC  1206                    2163              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001FBE  EB09                    2164              LSL.B   #5,D1       **** **** BIT0 0000
00001FC0  EA09                    2165              LSR.B   #5,D1       **** **** 0000 0BIT      
00001FC2  C2FC 0008               2166              MULU    #8,D1       value adjusted for jumping
00001FC6  4FF8 135E               2167              LEA     regNumTable ,A7 Load the table into A7
00001FCA  4EB7 1000               2168              JSR     (A7,D1)     Jump to subroutine of value at D1
00001FCE                          2169              
00001FCE                          2170              *-ERROR HERE NOT SURE WHY AFTER sub.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
00001FCE                          2171  
00001FCE                          2172  
00001FCE  6000 016C               2173              BRA printcode  
00001FD2                          2174  
00001FD2                          2175  
00001FD2                          2176  -------------------- end include --------------------
00001FD2                          2177              INCLUDE 'op0111.x68'    MOVEQ
00001FD2                          2178  op0111
00001FD2                          2179      *- MOVE Q
00001FD2  4243                    2180              CLR     D3          ;clear D3
00001FD4  1606                    2181              MOVE.B  D6,D3       ;copy data to D3
00001FD6                          2182              ;MOVE.L  #2,D7       ;size of data is long
00001FD6                          2183        
00001FD6  14FC 0020               2184              MOVE.B  #' ',(A2)+  ;
00001FDA  14FC 0020               2185              MOVE.B  #' ',(A2)+  ;print some spaces
00001FDE  14FC 0020               2186              MOVE.B  #' ',(A2)+
00001FE2  14FC 0020               2187              MOVE.B  #' ',(A2)+
00001FE6  14FC 0020               2188              MOVE.B  #' ',(A2)+
00001FEA  14FC 004D               2189              MOVE.B  #'M',(A2)+  ;print M
00001FEE  14FC 004F               2190              MOVE.B  #'O',(A2)+  ;print O
00001FF2  14FC 0056               2191              MOVE.B  #'V',(A2)+  ;print V
00001FF6  14FC 0045               2192              MOVE.B  #'E',(A2)+  ;print E
00001FFA  14FC 0051               2193              MOVE.B  #'Q',(A2)+  ;ptint Q
00001FFE  14FC 0020               2194              MOVE.B  #' ',(A2)+  ;
00002002  14FC 0020               2195              MOVE.B  #' ',(A2)+  ;print some spaces
00002006  14FC 0020               2196              MOVE.B  #' ',(A2)+
0000200A  14FC 0020               2197              MOVE.B  #' ',(A2)+
0000200E  14FC 0020               2198              MOVE.B  #' ',(A2)+
00002012  14FC 0023               2199              MOVE.B  #'#',(A2)+  ;print #
00002016  14FC 0024               2200              MOVE.B  #'$',(A2)+  ;print 
0000201A                          2201              *-REMEMBER MOVEQ TAKES ONLY A BTYE OF DATA
0000201A                          2202              
0000201A                          2203              ;MOVE.B  #12,D5      ;counter for output
0000201A  E80B                    2204              LSR.B   #4,D3       *-get bit 4 to 7 and jump with it DATA
0000201C  C6FC 0008               2205              MULU.W  #8,D3       ;gotta get ready to jump
00002020  4DF8 13CE               2206              LEA     numTable,A6 ;load table
00002024  4EB6 3000               2207              JSR     (A6,D3)     ;branch to grab number
00002028                          2208  
00002028  4243                    2209              CLR     D3          ;clear D3
0000202A  1606                    2210              MOVE.B  D6,D3       ;copy data to D3
0000202C  E90B                    2211              LSL.B   #4,D3       ;get the biut 0 - 3 with it DATA to print BYTE SIZE
0000202E  E80B                    2212              LSR.B   #4,D3
00002030  C6FC 0008               2213              MULU.W  #8,D3       ;gotta get ready to jump
00002034  4DF8 13CE               2214              LEA     numTable,A6 ;load table
00002038  4EB6 3000               2215              JSR     (A6,D3)     ;branch to grab number
0000203C                          2216              
0000203C  14FC 002C               2217              MOVE.B  #',',(A2)+  ;print ,
00002040  14FC 0044               2218              MOVE.B  #'D',(A2)+  ;print D for data register and prepare to get Dn
00002044                          2219    *------------------------------------------------------------
00002044  4241                    2220              CLR     D1
00002046  3206                    2221              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00002048  E949                    2222              LSL.W   #4,D1       BIT* **** **** 0000
0000204A  E049                    2223              LSR.W   #8,D1       0000 0000 BIT* ****
0000204C  EA49                    2224              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000204E  C2FC 0008               2225              MULU    #8,D1       value adjusted for jumping
00002052  4FF8 13CE               2226              LEA     numTable ,A7 Load the table into A7
00002056  4EB7 1000               2227              JSR     (A7,D1)     Jump to subroutine of value at D1  
0000205A                          2228              
0000205A  6000 00E0               2229              BRA     printCode
0000205A  6000 00E0               2230  -------------------- end include --------------------
0000205E                          2231              INCLUDE 'op1000.x68'    DIVU
0000205E                          2232  op1000
0000205E                          2233              ;do something effective            
0000205E  4243                    2234              CLR     D3          ;clear D3
00002060  3606                    2235              MOVE.W  D6,D3       ;copy data to D3
00002062                          2236              ;MOVE.L  #1,D7       ;size of data is word
00002062                          2237              
00002062                          2238              ;Print/store DIVU.W here
00002062  14FC 0044               2239              MOVE.B  #'D',(A2)+  ;print D
00002066  14FC 0049               2240              MOVE.B  #'I',(A2)+  ;print I
0000206A  14FC 0056               2241              MOVE.B  #'V',(A2)+  ;print V
0000206E  14FC 0055               2242              MOVE.B  #'U',(A2)+  ;print U
00002072  14FC 002E               2243              MOVE.B  #'.',(A2)+  ;ptint .
00002076  14FC 0057               2244              MOVE.B  #'W',(A2)+  ;print W
0000207A  14FC 0020               2245              MOVE.B  #' ',(A2)+  ;print some spaces
0000207E  14FC 0020               2246              MOVE.B  #' ',(A2)+
00002082  14FC 0020               2247              MOVE.B  #' ',(A2)+
00002086  14FC 0020               2248              MOVE.B  #' ',(A2)+
0000208A  1A3C 000A               2249              MOVE.B  #10,D5      ;counter for output
0000208E                          2250                          *-INSERT IMMEDIATE DATA HERE
0000208E                          2251      *-deCDOE EA (Dn,Dn
0000208E                          2252          * MachineCode: 0001 **** **** **BI T***
0000208E                          2253   *Only next last 3 bits which is stored at D0 => Source Address mode
0000208E                          2254      *-insert immediate addressing here
0000208E  4242                    2255              CLR     D2
00002090  4241                    2256              CLR     D1
00002092  1406                    2257              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002094  E50A                    2258              LSL.B   #2,D2       **** **** BIT* **00
00002096  EA0A                    2259              LSR.B   #5,D2       **** **** 0000 0BIT
00002098  C4FC 0008               2260              MULU    #8,D2       value adjusted for jumping
0000209C  4DF8 12B0               2261              LEA     modeTable,A6 Load the table into A6
000020A0  4EB6 2000               2262              JSR     (A6,D2)     Jump to subroutine of value at D0   
000020A4                          2263  
000020A4                          2264  
000020A4                          2265   * MachineCode: 0001 **** **** **** *BIT
000020A4                          2266              
000020A4  1206                    2267              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000020A6  EB09                    2268              LSL.B   #5,D1       **** **** BIT0 0000
000020A8  EA09                    2269              LSR.B   #5,D1       **** **** 0000 0BIT      
000020AA  C2FC 0008               2270              MULU    #8,D1       value adjusted for jumping
000020AE  4FF8 135E               2271              LEA     regNumTable ,A7 Load the table into A7
000020B2  4EB7 1000               2272              JSR     (A7,D1)     Jump to subroutine of value at D1
000020B6                          2273              
000020B6                          2274              *-ERROR HERE NOT SURE WHY AFTER ADD.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
000020B6  14FC 002C               2275              MOVE.B  #',',(A2)+
000020BA  14FC 0044               2276              MOVE.B  #'D',(A2)+
000020BE                          2277                *------------------------------------------------------------
000020BE  4241                    2278              CLR     D1
000020C0  3206                    2279              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000020C2  E949                    2280              LSL.W   #4,D1       BIT* **** **** 0000
000020C4  E049                    2281              LSR.W   #8,D1       0000 0000 BIT* ****
000020C6  EA49                    2282              LSR.W   #5,D1       0000 0000 0000 0BIT     
000020C8  C2FC 0008               2283              MULU    #8,D1       value adjusted for jumping
000020CC  4FF8 13CE               2284              LEA     numTable ,A7 Load the table into A7
000020D0  4EB7 1000               2285              JSR     (A7,D1)     Jump to subroutine of value at D1  
000020D4                          2286              
000020D4                          2287              
000020D4  6000 0066               2288              BRA printCode
000020D8                          2289  
000020D8                          2290  -------------------- end include --------------------
000020D8                          2291              
000020D8                          2292             
000020D8                          2293  
000020D8                          2294              
000020D8                          2295  opError                             
000020D8  2608                    2296              MOVE.L  A0,D3
000020DA  2C03                    2297              MOVE.L  D3,D6
000020DC  45F9 0000067C           2298              LEA     bad_code_buffer,A2
000020E2  7E02                    2299              MOVE.L  #2,D7
000020E4  4EB8 10C0               2300              JSR     write_data_in_D3_to_buffer
000020E8                          2301              
000020E8  14FC 0020               2302              MOVE.B  #' ',(A2)+      ;print spaces
000020EC  14FC 0020               2303              MOVE.B  #' ',(A2)+      ;print spaces
000020F0  14FC 0020               2304              MOVE.B  #' ',(A2)+      ;print spaces
000020F4  14FC 0020               2305              MOVE.B  #' ',(A2)+      ;print spaces
000020F8  14FC 0044               2306              MOVE.B  #'D',(A2)+      ;print D
000020FC  14FC 0041               2307              MOVE.B  #'A',(A2)+      ;print A
00002100  14FC 0054               2308              MOVE.B  #'T',(A2)+      ;print T
00002104  14FC 0041               2309              MOVE.B  #'A',(A2)+      ;print A
00002108  14FC 0020               2310              MOVE.B  #' ',(A2)+      ;print spaces
0000210C  14FC 0020               2311              MOVE.B  #' ',(A2)+      ;print spaces
00002110  14FC 0020               2312              MOVE.B  #' ',(A2)+      ;print spaces
00002114  14FC 0020               2313              MOVE.B  #' ',(A2)+      ;print spaces
00002118                          2314              
00002118                          2315              
00002118  14FC 0046               2316              MOVE.B  #'F',(A2)+      ;print spaces
0000211C  14FC 0046               2317              MOVE.B  #'F',(A2)+      ;print spaces
00002120  14FC 0046               2318              MOVE.B  #'F',(A2)+      ;print spaces
00002124  14FC 0046               2319              MOVE.B  #'F',(A2)+      ;print spaces
00002128                          2320              
00002128                          2321              
00002128                          2322              ;MOVE.L  (A0),D3
00002128                          2323              ;MOVE.L  D3,D6
00002128                          2324              ;MOVE.L  #1,D7
00002128                          2325              ;JSR     write_data_in_D3_to_buffer
00002128                          2326              
00002128  14BC 0000               2327              MOVE.B  #$00,(A2) * add NULL value to print string
0000212C  43F9 0000067C           2328              LEA     bad_code_buffer,A1
00002132  103C 000D               2329              MOVE.B  #13,D0
00002136  4E4F                    2330              TRAP    #15   
00002138                          2331           
00002138  6000 EF44               2332              BRA     get_next_instruction           
0000213C                          2333  printCode   
0000213C  14BC 0000               2334              MOVE.B  #$00,(A2)   * add NULL value to print string
00002140  070A 0000               2335              MOVEP   (A2),D3
00002144  43F9 00000624           2336              LEA     good_code_buffer,A1 * load buffer for good code to print
0000214A  700D                    2337              MOVEQ   #13,D0
0000214C  4E4F                    2338              TRAP    #15         * display code
0000214E                          2339    
0000214E  6000 EF2E               2340              BRA     get_next_instruction                     
00002152                          2341  * OP Codes -------------------------------------------------
00002152  =00000000               2342  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00002152  =00000001               2343  bin0001     EQU     %0001   ;MOVE.B
00002152  =00000002               2344  bin0010     EQU     %0010   ;MOVE.L
00002152  =00000003               2345  bin0011     EQU     %0011   ;MOVE.W
00002152  =00000004               2346  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00002152  =00000005               2347  bin0101     EQU     %0101   ;SUBQ
00002152  =00000006               2348  bin0110     EQU     %0110   ;Bcc
00002152  =00000007               2349  bin0111     EQU     %0111   ;MOVEQ
00002152  =00000008               2350  bin1000     EQU     %1000   ;DIVU.W
00002152  =00000009               2351  bin1001     EQU     %1001   ;SUB, SUBA
00002152  =0000000B               2352  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00002152  =0000000C               2353  bin1100     EQU     %1100   ;AND, MULS.W
00002152  =0000000D               2354  bin1101     EQU     %1101   ;ADD, ADDA
00002152  =0000000E               2355  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00002152                          2356  
00002152                          2357  *Binary HEX values*---------------------------------------------------------------
00002152  =00000000               2358  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
00002152  =00000001               2359  hex_1   EQU     %0001 ;1
00002152  =00000002               2360  hex_2   EQU     %0010 ;2    
00002152  =00000003               2361  hex_3   EQU     %0011 ;3
00002152  =00000004               2362  hex_4   EQU     %0100 ;4
00002152  =00000005               2363  hex_5   EQU     %0101 ;5
00002152  =00000006               2364  hex_6   EQU     %0110 ;6
00002152  =00000007               2365  hex_7   EQU     %0111 ;7
00002152  =00000008               2366  hex_8   EQU     %1000 ;8
00002152  =00000009               2367  hex_9   EQU     %1001 ;9
00002152  =0000000A               2368  hex_A   EQU     %1010 ;A
00002152  =0000000B               2369  hex_B   EQU     %1011 ;B
00002152  =0000000C               2370  hex_C   EQU     %1100 ;C
00002152  =0000000D               2371  hex_D   EQU     %1101 ;D
00002152  =0000000E               2372  hex_E   EQU     %1110 ;E
00002152  =0000000F               2373  hex_F   EQU     %1111 ;F      
00002152                          2374              
00002152                          2375  ;LOOP:
00002152                          2376                  *-compare the adress pointers current address with ending address to see if we need to continue
00002152                          2377                  *- load the address registrer (pointer/ this helps us look at data)
00002152                          2378                  *-load address register number into data register
00002152                          2379                  
00002152                          2380                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
00002152                          2381                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
00002152                          2382                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
00002152                          2383                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
00002152                          2384                  ;BEQ     FINISH      ;finish they are equal
00002152                          2385                  ;RTS
00002152                          2386  
00002152                          2387          
00002152                          2388          *----------END OF I/O SECTION*---
00002152                          2389          *----------Start of OPCODE SUBROUTINE
00002152  =0000A000               2390  stack            EQU        $A000  
00002152  =0000000C               2391  shift            EQU        12                   * Shift 12 bits 
00000400                          2392                   ORG        $400
00000400                          2393           
00000400  4FF9 0000A000           2394  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           2395                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    2396                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           2397                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    2398                   MOVE.W     (A1),D0
00000416  123C 000C               2399                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    2400                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               2401                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               2402                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          2403                   
00000424  4EF9 00000484           2404  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           2405                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           2406                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           2407                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           2408                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           2409                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           2410                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           2411                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           2412                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           2413                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           2414                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           2415                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           2416                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           2417                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           2418                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           2419                   JMP        code1111        *Special/Reserved
00000484                          2420                   
00000484  4E72 2700               2421  code0000         STOP       #$2700
00000488  4E72 2700               2422  code0001         STOP       #$2700
0000048C  4E72 2700               2423  code0010         STOP       #$2700
00000490  4E72 2700               2424  code0011         STOP       #$2700
00000494  267C 00000000           2425  code0100         MOVE.L     #0,A3
0000049A  4241                    2426                   CLR        D1
0000049C  43F9 000006D5           2427                   LEA        enter_start_AD,A1
000004A2  700E                    2428                   MOVE.L     #14,D0
000004A4  4E4F                    2429                   TRAP       #15
000004A6  4E75                    2430                   RTS
000004A8  4E72 2700               2431  code0101         STOP       #$2700
000004AC  4E72 2700               2432  code0110         STOP       #$2700
000004B0  4E72 2700               2433  code0111         STOP       #$2700
000004B4  4E72 2700               2434  code1000         STOP       #$2700
000004B8  4E72 2700               2435  code1001         STOP       #$2700
000004BC  4E72 2700               2436  code1010         STOP       #$2700
000004C0  4E72 2700               2437  code1011         STOP       #$2700
000004C4  4E72 2700               2438  code1100         STOP       #$2700
000004C8  4E72 2700               2439  code1101         STOP       #$2700
000004CC  4E72 2700               2440  code1110         STOP       #$2700
000004D0  4E72 2700               2441  code1111         STOP       #$2700
000004D4                          2442  
000004D4                          2443  FINISH:
000004D4                          2444          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    2445              MOVE.L  A0,D3
000004D6  2C03                    2446              MOVE.L  D3,D6
000004D8  45F9 00000624           2447              LEA     good_code_buffer,A2
000004DE                          2448   
000004DE                          2449              
000004DE  14FC 0046               2450              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               2451              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               2452              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               2453              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               2454              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               2455              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               2456              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               2457              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               2458              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               2459              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               2460              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               2461              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               2462              MOVE.B  #'R',(A2)+
00000512  2610                    2463              MOVE.L  (A0),D3
00000514  2C03                    2464              MOVE.L  D3,D6
00000516  7E01                    2465              MOVE.L  #1,D7
00000518                          2466  
00000518                          2467              
00000518  14BC 0000               2468              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           2469              LEA     good_code_buffer,A1
00000522  103C 000D               2470              MOVE.B  #13,D0
00000526  4E4F                    2471              TRAP    #15   
00000528  FFFF FFFF               2472              SIMHALT
0000052C                          2473  
0000052C                          2474  *-390 -> 406 WITH NOP AT 400
0000052C                          2475  
0000052C                          2476  
0000052C                          2477  hexToAscii:
0000052C                          2478  ones:
0000052C  3A02                    2479      MOVE.W  D2,D5
0000052E  CAFC 0008               2480      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13CE               2481      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               2482      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          2483      *-adding res
0000053A                          2484      ;ADD     D2,D7
0000053A                          2485      
0000053A                          2486  
0000053A  4E75                    2487      RTS
0000053C                          2488  
0000053C                          2489  
0000053C                          2490  
0000053C                          2491  
0000053C                          2492  
0000053C                          2493  
0000053C                          2494  
0000053C                          2495  
0000053C                          2496  
0000053C                          2497  
0000053C                          2498  
0000053C                          2499  
0000053C                          2500  
0000053C                          2501  *-Parses input - take input from user to create a memory address
0000053C                          2502  *- entry is parsed to make sure it falls within a valid range
0000053C                          2503  *-good inputs are converteed to hex
0000053C                          2504  *-the entered addres get's stored in d3
0000053C                          2505  *-
0000053C                          2506  *-
0000053C                          2507  
0000053C                          2508  
0000053C                          2509  
0000053C  7C00                    2510  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    2511                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          2512                  
00000540                          2513                  *-CHECK TO SEE INPUT DATA
00000540  B205                    2514                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               2515                  BEQ     error_no_input no input was found
00000546  0C41 0008               2516                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               2517                  BGT     error_bad_entry
0000054E                          2518                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               2519                  BRA     parse_each
00000552                          2520  
00000552  7C00                    2521  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    2522                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    2523                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               2524                  BEQ     error_no_input
0000055C  0C41 0008               2525                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               2526                  BGT     error_bad_entry
00000564                          2527                  ;BGT     error_to_many_char
00000564  6000 0002               2528                  BRA     parse_each        
00000568                          2529  
00000568                          2530  *parse each analyzes each ind character entered
00000568                          2531  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          2532  
00000568  1419                    2533  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    2534                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               2535                  BEQ     parse_complete  end of user input
00000570  B43C 0066               2536                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               2537                  BGT     hex_compare
00000578                          2538                  
00000578                          2539                  *-
00000578                          2540                  *Comapare the decimal number values betyween 0 -9 first
00000578                          2541                  *
00000578                          2542                  *-
00000578  B43C 002F               2543  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          2544                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               2545                  BLE     error_char 
00000580  B43C 003A               2546                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               2547                  BLT     dec_convert
00000588                          2548                  *-
00000588                          2549                  *there are no number values, lets check alpha characters
00000588                          2550                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          2551                  *->71 'G' then we should go and convert to hex range A-F
00000588                          2552                  *-UPPER case
00000588                          2553                  *-      
00000588  B43C 0041               2554  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               2555                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               2556                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               2557                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               2558  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               2559                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               2560                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               2561                  BLT     lower_ascii
000005A8                          2562                  
000005A8                          2563           
000005A8  0402 0030               2564  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          2565                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    2566                  ASL.L   #4,D6
000005AE  DC02                    2567                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    2568                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          2569                                      *- 97 - 103
000005B2                          2570                  
000005B2                          2571                              
000005B2                          2572  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          2573  
000005B2  0402 0037               2574  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    2575                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    2576                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    2577                  BRA     parse_each  parse next item
000005BC                          2578  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               2579  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    2580                  ASL.L   #4,D6
000005C2  DC02                    2581                  ADD.B   D2,D6
000005C4  60A2                    2582                  BRA     parse_each
000005C6                          2583  
000005C6  7801                    2584  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    2585                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           2586  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    2587                  MOVE.L  #1,D0
000005D2  4E4F                    2588                  TRAP    #15
000005D4                          2589                  ;JMP     get_input
000005D4  43F9 000006C2           2590  error_char      LEA bad_char,A1
000005DA  4E4F                    2591                  trap #15
000005DC                          2592                  ;JMP get_input0
000005DC  43F9 000006AD           2593  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    2594                  TRAP #15
000005E4                          2595                  ;JMP  get_input
000005E4                          2596  
000005E4                          2597  
000005E4  FFFF FFFF               2598      SIMHALT             ; halt simulator
000005E8                          2599  
000005E8                          2600  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   2601  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          2602  
00000624                          2603  
00000624                          2604  good_code_buffer    DS.B    88
0000067C                          2605  
0000067C                          2606  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   2607  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   2608  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   2609  bad_char    DC.B    'Bad Char detected.',0
000006D5                          2610  *-errors
000006D5                          2611  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   2612  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          2613  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          2614  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          2615  
00000754= 45 6E 74 65 72 20 ...   2616  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          2617  
00000789                          2618  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               2619  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    2620                          MOVE.L  #1,D0
000007C2  4E4F                    2621                          TRAP    #15
000007C4                          2622                          ;JMP     get_input
000007C4                          2623  
000007C4                          2624  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          2625  
000007C4                          2626      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        164E
ABSOULTEWORD        15F4
ADDA_L              195E
ADDA_W              18D4
ADDRESSCOUNT        106C
ADD_B               1742
ADD_B_EA            19E8
ADD_L               184E
ADD_L_EA            1B08
ADD_W               17C8
ADD_W_EA            1A80
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_0_3_BIT         14AE
GET_3_5BIT          14AE
GET_NEXT_INSTRUCTION  107E
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         588
HEX_D               D
HEX_E               E
HEX_F               F
IA000               115C
IA001               11BE
IA010               1158
IA011               115A
IA100               127E
IMMABTABLE          1130
IMMEDIATEDATA       15C8
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12F0
M0001               12FC
M0010               1308
M0011               131C
M0100               1334
M0101               134C
M0110               134E
M0111               1350
MAINLOOP            1036
MODETABLE           12B0
N0000               144E
N0001               1454
N0010               145A
N0011               1460
N0100               1466
N0101               146C
N0110               1472
N0111               1478
N1000               147E
N1001               1484
N1010               148A
N1011               1490
N1100               1496
N1101               149C
N1110               14A2
N1111               14A8
NO_ENTRY            69A
NUMTABLE            13CE
ONES                52C
OP0001              152E
OP0100              14D2
OP0111              1FD2
OP1000              205E
OP1001              1B84
OP1101              16FE
OPERROR             20D8
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           213C
PRINT_WORD          10D6
REGISTERPRINT       1352
REGNUMTABLE         135E
RN0000              139E
RN0001              13A4
RN0010              13AA
RN0011              13B0
RN0100              13B6
RN0101              13BC
RN0110              13C2
RN0111              13C8
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
SUBA_L              1DAC
SUBA_W              1D22
SUB_B               1B90
SUB_B_EA            1E36
SUB_L               1C9C
SUB_L_EA            1F56
SUB_W               1C16
SUB_W_EA            1ECE
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WORDORLONG          14BA
WRITE_DATA_IN_D3_TO_BUFFER  10C0
_NOP                14E2
_RTS                1508
