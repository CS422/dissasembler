00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 3:23:46 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  
00001000                            15  *--- Notes
00001000                            16  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            17  * A4 will be our main pointer to current memory address and current data
00001000                            18  * D3 will be dedicated register to manipulate our data in
00001000                            19  *
00001000                            20  *
00001000                            21  *---------
00001000                            22  START:                  
00001000                            23              ; first instruction of program
00001000                            24              ;LEA     stack,SP
00001000                            25              *-present the hello message
00001000  43F9 000005E8             26              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 27              MOVE.B  #14,D0
0000100A  4E4F                      28              TRAP    #15
0000100C                            29              
0000100C                            30  *           
0000100C                            31  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            32  *
0000100C                            33  ** Put program code here
0000100C                            34  **-----
0000100C                            35  **This program starts by given a starting address and an ending address disassemble
0000100C                            36  **the binary code that is at that location.
0000100C                            37  **
0000100C                            38  **
0000100C                            39  **----
0000100C                            40  *
0000100C                            41  **-------
0000100C                            42  ** Needs to check for odd addressing**
0000100C                            43  **
0000100C                            44  **
0000100C                            45  **-----
0000100C                            46  *                *---------------------I/O SECTION
0000100C                            47  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            48  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            49  *                * statically in memory and retrieved when needed to compare
0000100C                            50  *                * this free's up a adress/data register to use
0000100C                            51  *                *-----------------------
0000100C                            52  *                
0000100C                            53  *                
0000100C                            54  *get_input_start_addr 
0000100C                            55  *                MOVE.L  #0,A3
0000100C                            56  *                CLR     D1
0000100C                            57  *                LEA     enter_start_AD,A1
0000100C                            58  *                MOVE.L  #14,D0
0000100C                            59  *                TRAP    #15
0000100C                            60  *                
0000100C                            61  *                
0000100C                            62  *
0000100C                            63  *      
0000100C                            64  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            65  *                MOVE.L  #2,D0
0000100C                            66  *                TRAP    #15
0000100C                            67  *                JSR     parse_input             parse the starting address
0000100C                            68  *                
0000100C                            69  *                
0000100C                            70  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            71  *                
0000100C                            72  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            73  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            74  *
0000100C                            75  *
0000100C                            76  *get_input_end_addr
0000100C                            77  *                MOVE.L  #0,A3
0000100C                            78  *                CLR     D1
0000100C                            79  *                LEA     userEnd,A1
0000100C                            80  *                MOVE.L  #14,D0
0000100C                            81  *                TRAP    #15
0000100C                            82  *                
0000100C                            83  *
0000100C                            84  *
0000100C                            85  *                LEA     userEndAddrInput,A1
0000100C                            86  *                MOVE.B  userEnd,D1
0000100C                            87  *                MOVE.L  #2,D0
0000100C                            88  *                TRAP    #15
0000100C                            89  *                JSR     parse_end
0000100C                            90  *
0000100C                            91  *                
0000100C                            92  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO A7
0000100C                            93  *  
0000100C                            94  *             
0000100C                            95  *STORE_SRT_END:
0000100C                            96  *               
0000100C                            97  *                      ;store the starting and ending address into memory out of range
0000100C                            98  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                            99  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           100  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           101  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           102  *            MOVE.L  A5,A4
0000100C                           103              
0000100C                           104              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           105              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           106              *
0000100C  2C3C 00000996            107              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     108              MOVE.L  D6,A5       Move D6 into a5
00001014                           109              
00001014  2C3C 000009CF            110              MOVE.L  #$9CF,D6
0000101A  2C46                     111              MOVE.L  D6,A6
0000101C                           112              
0000101C                           113              
0000101C  23CD 00FFFF00            114              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            115              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     116              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           117              *
0000102A                           118              *
0000102A                           119              *-------------END OF TESING CODE-----------
0000102A                           120          
0000102A  6000 003A                121              BRA get_next_instruction
0000102E                           122                           
0000102E                           123                           
0000102E                           124     
0000102E                           125  *---move_addresses:
0000102E                           126                                  
0000102E                           127                  *-MOVE 2 INTO DATA REG
0000102E                           128                  
0000102E                           129                  ;JSR     LOOP
0000102E                           130                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           131                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           132                  
0000102E                           133                  *----MOVE.W  A4,A0
0000102E                           134                  
0000102E                           135                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           136                  *----MOVE.B  #2,D4
0000102E                           137                  
0000102E                           138                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           139                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           140                  *------MOVE.L  D3,D7
0000102E                           141                  
0000102E                           142  
0000102E                           143  
0000102E                           144  
0000102E                           145                  *------LEA     good_code_buffer,A2 load again
0000102E                           146                  *------JSR     print_d3
0000102E                           147                  
0000102E                           148                  
0000102E                           149                  ;JSR     get_opcode 
0000102E                           150  
0000102E                           151                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           152                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           153                  ;SIMHALT
0000102E                           154  
0000102E                           155  
0000102E                           156  * ---------------------------------------------------------- 
0000102E                           157  * Decode ---------------------------------------------------
0000102E  49F8 7000                158              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 0032                159              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           160       
00001036                           161  mainLoop          
00001036                           162              *-----
00001036                           163              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           164              *- listing of finished and un finished work
00001036                           165              *-          ***Machine Code saved in D6*****
00001036                           166              *-----
00001036                           167  
00001036  E84B                     168              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           169              
00001038                           170              ;compare bits to instructions
00001038                           171              
00001038  B63C 0001                172              CMP.B   #bin0001,D3 ;MOVE.B
0000103C                           173              *- Machine code saved in D6
0000103C  6700 04D6                174              BEQ     op0001      ;branch to op0001
00001040                           175              ;CMP.B   #bin0011,D3 ;MOVE.W
00001040                           176              ;BEQ     op0011      ;branch to op0011
00001040                           177              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001040                           178              ;BEQ     op0010      ;branch to op0010           
00001040                           179              ;CMP.B   #bin0111,D3 ;MOVEQ
00001040                           180              ;BEQ     op0111      ;branch to op0111                        
00001040  B63C 0004                181              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
00001044  6700 0472                182              BEQ     op0100          branch to op0100                        
00001048  B63C 000D                183              CMP.B   #bin1101,D3 ;ADD, ADDA
0000104C  6700 0696                184              BEQ     op1101      ;branch to op1101            
00001050                           185              ;CMP.B   #bin1001,D3 ;SUB, SUBA
00001050                           186              ;BEQ     op1001      ;branch to op1001                        
00001050                           187              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001050                           188              ;BEQ     op0000      ;branch to op0000                       
00001050                           189              ;CMP.B   #bin0101,D3 ;SUBQ
00001050                           190              ;BEQ     op0101      ;branch to op0101                         
00001050                           191              ;CMP.B   #bin0110,D3 ;Bcc
00001050                           192              ;BEQ     op0110      ;branch to op0110            
00001050                           193              ;CMP.B   #bin1000,D3 ;DIVU.W
00001050                           194              ;BEQ     op1000      ;branch to op1000                                      
00001050                           195              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001050                           196              ;BEQ     op1011      ;branch to op1011 
00001050                           197              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001050                           198              ;BEQ     op1100      ;branch to op1100                                    
00001050                           199              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
00001050                           200              ;BEQ     op1110      ;branch to op1110            
00001050                           201              
00001050  6000 0AA4                202              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001054                           203              
00001054                           204              ;branch to display opError display
00001054                           205              
00001054                           206              ;print all the things...
00001054                           207   *******************************************************************************
00001054                           208  *
00001054                           209  *******************************************************************************
00001054                           210  addressCount 
00001054                           211              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001054                           212              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001054                           213              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001054                           214              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001054                           215              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001054                           216              
00001054  4BF9 00FFFF10            217              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
0000105A  2215                     218              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000105C  2A0C                     219              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000105E  B285                     220              CMP.L   D5,D1       * COMPARE THE ADDRESSES
00001060  6F00 F472                221              BLE     FINISH      * branch to end if ending address reached
00001064  4E75                     222              RTS                 * return IF WE HAVE NOT FINISHED
00001066                           223              
00001066                           224  get_next_instruction:
00001066  4EB8 1054                225                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
0000106A                           226                  *-line count
0000106A  4245                     227                  CLR D5             *-CLEAR THIS REGISTER/
0000106C                           228                  
0000106C  45F9 00000624            229                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
00001072  304C                     230                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
00001074  7E02                     231                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
00001076  2608                     232                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001078  2C03                     233                  MOVE.L  D3,D6   
0000107A  45F9 00000624            234                  LEA     good_code_buffer,A2
00001080                           235                                  *-write the current data moved to data register d3
00001080  4EB9 000010A6            236                  JSR     write_data_in_D3_to_buffer
00001086                           237                  
00001086  14BC 0020                238                  MOVE.B  #' ',(A2)
0000108A  14BC 0020                239                  MOVE.B  #' ',(A2)
0000108E  14BC 0020                240                  MOVE.B  #' ',(A2)
00001092  14BC 0020                241                  MOVE.B  #' ',(A2)
00001096                           242                  
00001096  4286                     243                  CLR.L   D6
00001098  4283                     244                  CLR.L   D3
0000109A                           245                  
0000109A  3A4C                     246                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
0000109C                           247                  
0000109C  3C1C                     248                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
0000109E                           249                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
0000109E                           250  
0000109E  2814                     251                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010A0  3606                     252                  MOVE.W  D6,D3
000010A2  E04B                     253                  LSR.W   #8,D3
000010A4                           254                  
000010A4  6090                     255                  BRA     mainLoop
000010A6                           256                  
000010A6                           257  write_data_in_D3_to_buffer:
000010A6                           258              *------
000010A6                           259              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010A6                           260              *
000010A6                           261              *
000010A6                           262              *---------
000010A6  BE7C 0002                263                  CMP.W   #2,D7 ERROR checking
000010AA  6600 0010                264                  BNE     print_word branch off to write the first word of the line
000010AE  4843                     265                  SWAP    D3
000010B0  4846                     266                  SWAP    D6
000010B2  4EB9 000010BC            267                  JSR     print_word
000010B8  4846                     268                  SWAP    D6
000010BA  2606                     269                  MOVE.L  D6,D3
000010BC                           270                  
000010BC                           271   print_word:
000010BC                           272                  *-****
000010BC                           273                  * called 4 times to decode from hex to ascii the first word 
000010BC                           274                  *   using the below jump table
000010BC                           275                  *
000010BC                           276                  *-------
000010BC  E04B                     277                  LSR.W   #8,D3
000010BE  E84B                     278                  LSR.W   #4,D3
000010C0  C6FC 0008                279                  MULU.W  #8,D3
000010C4  4DF9 000013B4            280                  LEA     numTable,A6
000010CA  4EB6 3000                281                  JSR     (A6,D3)
000010CE                           282                  
000010CE  3606                     283                  MOVE.W  D6,D3   COPY DATA
000010D0  E94B                     284                  LSL.W   #4,D3
000010D2  E04B                     285                  LSR.W   #8,D3
000010D4  E84B                     286                  LSR.W   #4,D3
000010D6  C6FC 0008                287                  MULU.W  #8,D3
000010DA  4DF9 000013B4            288                  LEA     numTable,A6
000010E0  4EB6 3000                289                  JSR     (A6,D3)
000010E4                           290                  
000010E4  3606                     291                  MOVE.W  D6,D3
000010E6                           292                  
000010E6  E14B                     293                  LSL.W   #8,D3
000010E8  E04B                     294                  LSR.W   #8,D3
000010EA  E84B                     295                  LSR.W   #4,D3
000010EC  C6FC 0008                296                  MULU.W  #8,D3
000010F0  4DF9 000013B4            297                  LEA numTable,A6
000010F6  4EB6 3000                298                  JSR     (A6,D3)
000010FA                           299                  
000010FA                           300                  
000010FA  3606                     301                  MOVE.W  D6,D3
000010FC  E94B                     302                  LSL.W   #4,D3
000010FE  E14B                     303                  LSL.W   #8,D3
00001100  E04B                     304                  LSR.W   #8,D3
00001102  E84B                     305                  LSR.W   #4,D3
00001104  C6FC 0008                306                  MULU.W  #8,D3
00001108  4DF9 000013B4            307                  LEA     numTable,A6
0000110E  4EB6 3000                308                  JSR     (A6,D3)
00001112  5805                     309                  ADDI.B  #4,D5
00001114  4E75                     310                  RTS
00001116                           311  * -----------------------------------------------------------            
00001116                           312  * Jump Table immAbTable *************************************
00001116                           313  *** matches the associated Addressing mode     
00001116                           314  *************************************************************
00001116  4EB9 00001142            315  immAbTable  JSR     IA000   ;Absoulute Word
0000111C  4E75                     316              RTS             ;return, done printing
0000111E  4EB9 000011A4            317              JSR     IA001   ;Aboulute Long
00001124  4E75                     318              RTS             ;return, done printing
00001126  4EB9 0000113E            319              JSR     IA010   ;blank
0000112C  4E75                     320              RTS             ;return, done printing
0000112E  4EB9 00001140            321              JSR     IA011   ;blank
00001134  4E75                     322              RTS             ;return, done printing  
00001136  4EB9 00001264            323              JSR     IA100   ;immediate Data
0000113C  4E75                     324              RTS             ;return, done printing
0000113E                           325  * -----------------------------------------------------------            
0000113E  4E75                     326  IA010       RTS
00001140  4E75                     327  IA011       RTS
00001142                           328  * -----------------------------------------------------------            
00001142                           329  * Subroutine IA000   ------------------------------------------
00001142                           330  IA000                               ;absoulteWord   
00001142  14FC 0024                331              MOVE.B  #'$',(A2)+ 
00001146  E08C                     332              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001148  E08C                     333              LSR.L   #8,D4       00XX XX** => 0000 XXXX
0000114A                           334              *4MSB   X***
0000114A  4241                     335              CLR     D1
0000114C  3204                     336              MOVE.W  D4,D1       X***
0000114E  E049                     337              LSR.W   #8,D1       00X*
00001150  E849                     338              LSR.W   #4,D1       000X
00001152  4FF9 000013B4            339              LEA     numTable ,A7 Load the table into A7
00001158  C2FC 0008                340              MULU    #8,D1
0000115C  4EB7 1000                341              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001160                           342              *next 4MSB  *X**
00001160  4241                     343              CLR     D1
00001162  3204                     344              MOVE.W  D4,D1       *X**
00001164  E949                     345              LSL.W   #4,D1       X**0        
00001166  E049                     346              LSR.W   #8,D1       00X*
00001168  E849                     347              LSR.W   #4,D1       000X
0000116A  4FF9 000013B4            348              LEA     numTable ,A7 Load the table into A7
00001170  C2FC 0008                349              MULU    #8,D1
00001174  4EB7 1000                350              JSR     (A7,D1)     Jump to subroutine of value at D1
00001178                           351              *next 4MSB  **X*
00001178  4241                     352              CLR     D1
0000117A  1204                     353              MOVE.B  D4,D1       00X*
0000117C  E809                     354              LSR.B   #4,D1       000X
0000117E  4FF9 000013B4            355              LEA     numTable ,A7 Load the table into A7
00001184  C2FC 0008                356                          MULU    #8,D1
00001188  4EB7 1000                357              JSR     (A7,D1)     Jump to subroutine of value at D1
0000118C                           358              *last 4  bits   ***X
0000118C  4241                     359              CLR     D1
0000118E  1204                     360              MOVE.B  D4,D1       00*X
00001190  E909                     361              LSL.B   #4,D1       00X0    
00001192  E809                     362              LSR.B   #4,D1       000X
00001194  4FF9 000013B4            363              LEA     numTable ,A7 Load the table into A7
0000119A  C2FC 0008                364                          MULU    #8,D1
0000119E  4EB7 1000                365              JSR     (A7,D1)     Jump to subroutine of value at D1
000011A2  4E75                     366              RTS           
000011A4                           367  * -----------------------------------------------------------            
000011A4                           368  * Subroutine IA001   ------------------------------------------
000011A4                           369  IA001                               ;absoulteLong
000011A4  4241                     370              CLR     D1
000011A6  4242                     371              CLR     D2 
000011A8  14FC 0024                372              MOVE.B  #'$',(A2)+ 
000011AC  2404                     373              MOVE.L  D4,D2       D2 will be used for later
000011AE                           374  *----------- first Word Value D4
000011AE  E08C                     375              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011B0  E08C                     376              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011B2                           377              *4MSB   X***
000011B2  4241                     378              CLR     D1
000011B4  3204                     379              MOVE.W  D4,D1       X***
000011B6  E049                     380              LSR.W   #8,D1       00X*
000011B8  E849                     381              LSR.W   #4,D1       000X
000011BA  4FF9 000013B4            382              LEA     numTable ,A7 Load the table into A7
000011C0  C2FC 0008                383              MULU    #8,D1
000011C4  4EB7 1000                384              JSR     (A7,D1)     Jump to subroutine of value at D1 
000011C8                           385              *next 4MSB  *X**
000011C8  4241                     386              CLR     D1
000011CA  3204                     387              MOVE.W  D4,D1       *X**
000011CC  E949                     388              LSL.W   #4,D1       X**0        
000011CE  E049                     389              LSR.W   #8,D1       00X*
000011D0  E849                     390              LSR.W   #4,D1       000X
000011D2  4FF9 000013B4            391              LEA     numTable ,A7 Load the table into A7
000011D8  C2FC 0008                392              MULU    #8,D1
000011DC  4EB7 1000                393              JSR     (A7,D1)     Jump to subroutine of value at D1
000011E0                           394              *next 4MSB  **X*
000011E0  4241                     395              CLR     D1
000011E2  1204                     396              MOVE.B  D4,D1       00X*
000011E4  E809                     397              LSR.B   #4,D1       000X
000011E6  4FF9 000013B4            398              LEA     numTable ,A7 Load the table into A7
000011EC  C2FC 0008                399              MULU    #8,D1
000011F0  4EB7 1000                400              JSR     (A7,D1)     Jump to subroutine of value at D1
000011F4                           401              *last 4  bits   ***X
000011F4  4241                     402              CLR     D1
000011F6  1204                     403              MOVE.B  D4,D1       00*X
000011F8  E909                     404              LSL.B   #4,D1       00X0    
000011FA  E809                     405              LSR.B   #4,D1       000X
000011FC  4FF9 000013B4            406              LEA     numTable ,A7 Load the table into A7
00001202  C2FC 0008                407              MULU    #8,D1
00001206  4EB7 1000                408              JSR     (A7,D1)     Jump to subroutine of value at D1
0000120A                           409  *---------  Second Word Value D2    **** XXXX
0000120A                           410              *4MSB   X***
0000120A  4241                     411              CLR     D1
0000120C  3202                     412              MOVE.W  D2,D1
0000120E  E049                     413              LSR.W   #8,D1            00X*
00001210  E849                     414              LSR.W   #4,D1            000X
00001212  C2FC 0008                415              MULU    #8,D1
00001216  4FF9 000013B4            416              LEA     numTable ,A7 Load the table into A7
0000121C  4EB7 1000                417              JSR     (A7,D1)     Jump to subroutine of value at D1
00001220                           418              *next 4MSB  *X**
00001220  4241                     419              CLR     D1
00001222  3202                     420              MOVE.W  D2,D1
00001224  E949                     421              LSL.W   #4,D1       X**0
00001226  E049                     422              LSR.W   #8,D1       00X*
00001228  E809                     423              LSR.B   #4,D1       000X
0000122A  C2FC 0008                424              MULU    #8,D1
0000122E  4FF9 000013B4            425              LEA     numTable ,A7 Load the table into A7
00001234  4EB7 1000                426              JSR     (A7,D1)     Jump to subroutine of value at D1
00001238                           427              *next 4MSB  **X*
00001238  4241                     428              CLR     D1
0000123A  1202                     429              MOVE.B  D2,D1       00X*
0000123C  E809                     430              LSR.B   #4,D1       000X
0000123E  C2FC 0008                431              MULU    #8,D1
00001242  4FF9 000013B4            432              LEA     numTable ,A7 Load the table into A7
00001248  4EB7 1000                433              JSR     (A7,D1)     Jump to subroutine of value at D1
0000124C                           434              *next 4MSB  ***X
0000124C  4241                     435              CLR     D1
0000124E  1202                     436              MOVE.B  D2,D1       00*X
00001250  E909                     437              LSL.B   #4,D1       00X0
00001252  E809                     438              LSR.B   #4,D1       000X
00001254  C2FC 0008                439              MULU    #8,D1
00001258  4FF9 000013B4            440              LEA     numTable ,A7 Load the table into A7
0000125E  4EB7 1000                441              JSR     (A7,D1)     Jump to subroutine of value at D1
00001262                           442             
00001262  4E75                     443              RTS
00001264                           444   
00001264                           445  * -----------------------------------------------------------            
00001264                           446  * Subroutine IA100   ------------------------------------------
00001264                           447  IA100                               ;immediateData
00001264                           448  
00001264  14FC 0023                449              MOVE.B  #'#',(A2)+ 
00001268  14FC 0024                450              MOVE.B  #'$',(A2)+
0000126C  381D                     451              MOVE.W  (A5)+,D4    WE got the address for the operand
0000126E  3815                     452              MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001270                           453              *4MSB   00X*
00001270  4242                     454              CLR     D2
00001272  1404                     455              MOVE.B  D4,D2       00X*
00001274  E80A                     456              LSR.B   #4,D2       000X
00001276  C4FC 0008                457              MULU    #8,D2   
0000127A  4FF9 000013B4            458              LEA     numTable ,A7 Load the table into A7
00001280  4EB7 2000                459              JSR     (A7,D2)     Jump to subroutine of value at D2
00001284                           460              *last 4bits 00*X
00001284  4242                     461              CLR     D2
00001286  1404                     462              MOVE.B  D4,D2       00*X
00001288  E90A                     463              LSL.B   #4,D2       00X*
0000128A  E80A                     464              LSR.B   #4,D2       000X
0000128C  C4FC 0008                465              MULU    #8,D2   
00001290                           466             
00001290  4EB7 2000                467              JSR     (A7,D2)     Jump to subroutine of value at D2
00001294                           468  
00001294  4E75                     469              RTS
00001296                           470  
00001296                           471                            
00001296                           472  * -----------------------------------------------------------            
00001296                           473  * Jump Table modeTable ***************************************
00001296                           474  *** matches the associated Addressing mode     
00001296                           475  *************************************************************
00001296  4EB9 000012D6            476  modeTable   JSR     M0000   ;Dn, Data Register 
0000129C  4E75                     477              RTS             ;return, done printing
0000129E  4EB9 000012E2            478              JSR     M0001   ;An, Address Register 
000012A4  4E75                     479              RTS             ;return, done printing
000012A6  4EB9 000012EE            480              JSR     M0010   ;(An), Address
000012AC  4E75                     481              RTS             ;return, done printing
000012AE  4EB9 00001302            482              JSR     M0011   ;(An)+, Address with Postincrement
000012B4  4E75                     483              RTS             ;return, done printing
000012B6                           484              
000012B6  4EB9 0000131A            485              JSR     M0100   ;-(An), Address with Predecrement
000012BC  4E75                     486              RTS             ;return, done printing
000012BE  4EB9 00001332            487              JSR     M0101   ; blank - not assigned for this project
000012C4  4E75                     488              RTS
000012C6  4EB9 00001334            489              JSR     M0110   ; blank - not assigned for this project
000012CC  4E75                     490              RTS
000012CE  4EB9 00001336            491              JSR     M0111   ;(xxx).W, (xxx).L, #imm
000012D4  4E75                     492              RTS             ;return, done printing           
000012D6                           493  * -----------------------------------------------------------            
000012D6                           494  * Subroutine M0000 ------------------------------------------
000012D6                           495  M0000                               ;Dn
000012D6  14FC 0044                496              MOVE.B  #'D',(A2)+      ;display D
000012DA  264A                     497              MOVEA.L A2,A3           ;get address for n
000012DC  14FC 0020                498              MOVE.B  #' ',(A2)+      ;blank
000012E0  4E75                     499              RTS
000012E2                           500  
000012E2                           501  * -----------------------------------------------------------            
000012E2                           502  * Subroutine M0001 ------------------------------------------
000012E2                           503  M0001                               ;An
000012E2  14FC 0041                504              MOVE.B  #'A',(A2)+      ;display A
000012E6  264A                     505              MOVEA.L A2,A3           ;get address for n
000012E8  14FC 0020                506              MOVE.B  #' ',(A2)+      ;blank
000012EC  4E75                     507              RTS
000012EE                           508  
000012EE                           509  * -----------------------------------------------------------            
000012EE                           510  * Subroutine M0010 ------------------------------------------
000012EE                           511  M0010                               ;(An) Address
000012EE  14FC 0028                512              MOVE.B  #'(',(A2)+      ;display (
000012F2  14FC 0041                513              MOVE.B  #'A',(A2)+      ;display A
000012F6  264A                     514              MOVEA.L A2,A3           ;get address for n
000012F8  14FC 0020                515              MOVE.B  #' ',(A2)+      ;blank      
000012FC  14FC 0029                516              MOVE.B  #')',(A2)+      ;display )
00001300  4E75                     517              RTS
00001302                           518   
00001302                           519  * -----------------------------------------------------------            
00001302                           520  * Subroutine M0011 ------------------------------------------
00001302                           521  M0011                               ;(An)+ 
00001302  14FC 0028                522              MOVE.B  #'(',(A2)+      ;display (
00001306  14FC 0041                523              MOVE.B  #'A',(A2)+      ;display A
0000130A  264A                     524              MOVEA.L A2,A3           ;get address for n 
0000130C  14FC 0020                525              MOVE.B  #' ',(A2)+      ;blank     
00001310  14FC 0029                526              MOVE.B  #')',(A2)+      ;display )
00001314  14FC 002B                527              MOVE.B  #'+',(A2)+      ;display +
00001318  4E75                     528              RTS
0000131A                           529  
0000131A                           530  * -----------------------------------------------------------            
0000131A                           531  * Subroutine M0100 ------------------------------------------
0000131A                           532  M0100                               ;-(An)
0000131A  14FC 002D                533              MOVE.B  #'-',(A2)+      ;display -
0000131E  14FC 0028                534              MOVE.B  #'(',(A2)+      ;display (
00001322  14FC 0041                535              MOVE.B  #'A',(A2)+      ;display A
00001326  264A                     536              MOVEA.L A2,A3           ;get address for n
00001328  14FC 0020                537              MOVE.B  #' ',(A2)+      ;blank      
0000132C  14FC 0029                538              MOVE.B  #')',(A2)+      ;display )
00001330  4E75                     539              RTS
00001332                           540  
00001332                           541  * -----------------------------------------------------------    
00001332                           542  * Subroutine M0101 ------------------------------------------
00001332                           543  M0101                               ;do nothing
00001332  4E75                     544              RTS
00001334                           545  * -----------------------------------------------------------   
00001334                           546  * Subroutine M0110 ------------------------------------------
00001334                           547  M0110                               ;do nothing
00001334  4E75                     548              RTS
00001336                           549  * -----------------------------------------------------------     
00001336                           550  * Subroutine M0111 -------------------------Not finished-----
00001336                           551  * Register is stored at D1
00001336                           552  * ----case 1 : Register 100 => #imm => #XX 3 spaces
00001336                           553  * ----case 2 : Register 000 => (XXX).W => 
00001336                           554  * ----case 3 : Register 001 => (XXX).L
00001336                           555  * 
00001336                           556  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001336                           557  
00001336                           558  M0111                               ;(xxx).W, (xxx).L, #imm
00001336                           559                                      ; This will be taken care under opcode subroutine
00001336  4E75                     560              RTS
00001338                           561  
00001338                           562  * -----------------------------------------------------------
00001338                           563  * Subroutine immediateData 
00001338                           564  ;immediateData     
00001338                           565  ;            RTS
00001338                           566  * -----------------------------------------------------------
00001338                           567  
00001338                           568  * Subroutine registerPrint----------------------------------- 
00001338                           569  registerPrint
00001338  4FF9 000013B4            570              LEA     numTable,A7 Load the table into A7
0000133E  4EB7 1000                571              JSR     (A7,D1)     Jump to numTable with value at D1
00001342  4E75                     572              RTS
00001344                           573  
00001344                           574  * -----------------------------------------------------------            
00001344                           575  * Jump Table regNumTable ***************************************
00001344                           576  *** prints the associated number of the register            *
00001344                           577  *** Also prints hex values for data and addresses           *
00001344                           578  *-----see below for decoding of what these sub-routines are
00001344                           579  *************************************************************
00001344  4EB9 00001384            580  regNumTable JSR     RN0000   ;register 0
0000134A  4E75                     581              RTS             ;return, done printing
0000134C  4EB9 0000138A            582              JSR     RN0001   ;register 1
00001352  4E75                     583              RTS             ;return, done printing
00001354  4EB9 00001390            584              JSR     RN0010   ;register 2
0000135A  4E75                     585              RTS             ;return, done printing
0000135C  4EB9 00001396            586              JSR     RN0011   ;register 3
00001362  4E75                     587              RTS             ;return, done printing
00001364  4EB9 0000139C            588              JSR     RN0100   ;register 4
0000136A  4E75                     589              RTS             ;return, done printing
0000136C  4EB9 000013A2            590              JSR     RN0101   ;register 5
00001372  4E75                     591              RTS             ;return, done printing
00001374  4EB9 000013A8            592              JSR     RN0110   ;register 6
0000137A  4E75                     593              RTS             ;return, done printing
0000137C  4EB9 000013AE            594              JSR     RN0111   ;register 7
00001382  4E75                     595              RTS             ;return, done printing
00001384                           596  * -----------------------------------------------------------            
00001384                           597  * Subroutine RN0000 ------------------------------------------
00001384                           598  RN0000
00001384  16BC 0030                599              MOVE.B  #'0',(A3)      ;display 0
00001388  4E75                     600              RTS
0000138A                           601  
0000138A                           602  * -----------------------------------------------------------            
0000138A                           603  * Subroutine RN0001 ------------------------------------------
0000138A                           604  RN0001
0000138A  16BC 0031                605              MOVE.B  #'1',(A3)      ;display 1
0000138E  4E75                     606              RTS
00001390                           607  
00001390                           608  * -----------------------------------------------------------            
00001390                           609  * Subroutine RN0010 ------------------------------------------
00001390                           610  RN0010
00001390  16BC 0032                611              MOVE.B  #'2',(A3)      ;display 2
00001394  4E75                     612              RTS
00001396                           613   
00001396                           614  * -----------------------------------------------------------            
00001396                           615  * Subroutine RN0011 ------------------------------------------
00001396                           616  RN0011
00001396  16BC 0033                617              MOVE.B  #'3',(A3)      ;display 3
0000139A  4E75                     618              RTS
0000139C                           619  
0000139C                           620  * -----------------------------------------------------------            
0000139C                           621  * Subroutine RN0100 ------------------------------------------
0000139C                           622  RN0100
0000139C  16BC 0034                623              MOVE.B  #'4',(A3)      ;display 4
000013A0  4E75                     624              RTS
000013A2                           625  
000013A2                           626  * -----------------------------------------------------------            
000013A2                           627  * Subroutine RN0101 ------------------------------------------
000013A2                           628  RN0101
000013A2  16BC 0035                629              MOVE.B  #'5',(A3)      ;display 5
000013A6  4E75                     630              RTS
000013A8                           631  
000013A8                           632  * -----------------------------------------------------------            
000013A8                           633  * Subroutine RN0110 ------------------------------------------
000013A8                           634  RN0110
000013A8  16BC 0036                635              MOVE.B  #'6',(A3)      ;display 6
000013AC  4E75                     636              RTS
000013AE                           637              
000013AE                           638  * -----------------------------------------------------------            
000013AE                           639  * Subroutine RN0111 ------------------------------------------
000013AE                           640  RN0111
000013AE  16BC 0037                641              MOVE.B  #'7',(A3)      ;display 7
000013B2  4E75                     642              RTS
000013B4                           643  
000013B4                           644  * -----------------------------------------------------------            
000013B4                           645  * Jump Table numTable ***************************************
000013B4                           646  *** prints the associated number of the register            *
000013B4                           647  *** Also prints hex values for data and addresses           *
000013B4                           648  *-----see below for decoding of what these sub-routines are
000013B4                           649  *************************************************************
000013B4  4EB9 00001434            650  numTable    JSR     N0000   ;register 0
000013BA  4E75                     651              RTS             ;return, done printing
000013BC  4EB9 0000143A            652              JSR     N0001   ;register 1
000013C2  4E75                     653              RTS             ;return, done printing
000013C4  4EB9 00001440            654              JSR     N0010   ;register 2
000013CA  4E75                     655              RTS             ;return, done printing
000013CC  4EB9 00001446            656              JSR     N0011   ;register 3
000013D2  4E75                     657              RTS             ;return, done printing
000013D4  4EB9 0000144C            658              JSR     N0100   ;register 4
000013DA  4E75                     659              RTS             ;return, done printing
000013DC  4EB9 00001452            660              JSR     N0101   ;register 5
000013E2  4E75                     661              RTS             ;return, done printing
000013E4  4EB9 00001458            662              JSR     N0110   ;register 6
000013EA  4E75                     663              RTS             ;return, done printing
000013EC  4EB9 0000145E            664              JSR     N0111   ;register 7
000013F2  4E75                     665              RTS             ;return, done printing
000013F4  4EB9 00001464            666              JSR     N1000   ;num 8
000013FA  4E75                     667              RTS             ;return, done printing
000013FC  4EB9 0000146A            668              JSR     N1001   ;num 9
00001402  4E75                     669              RTS             ;return, done printing
00001404  4EB9 00001470            670              JSR     N1010   ;num A
0000140A  4E75                     671              RTS             ;return, done printing
0000140C  4EB9 00001476            672              JSR     N1011   ;num B
00001412  4E75                     673              RTS             ;return, done printing
00001414  4EB9 0000147C            674              JSR     N1100   ;num C
0000141A  4E75                     675              RTS             ;return, done printing
0000141C  4EB9 00001482            676              JSR     N1101   ;num D
00001422  4E75                     677              RTS             ;return, done printing
00001424  4EB9 00001488            678              JSR     N1110   ;num E
0000142A  4E75                     679              RTS             ;return, done printing
0000142C  4EB9 0000148E            680              JSR     N1111   ;num F
00001432  4E75                     681              RTS             ;return, done printing
00001434                           682  * -----------------------------------------------------------            
00001434                           683  * Subroutine N0000 ------------------------------------------
00001434                           684  N0000
00001434  14FC 0030                685              MOVE.B  #'0',(A2)+      ;display 0
00001438  4E75                     686              RTS
0000143A                           687  
0000143A                           688  * -----------------------------------------------------------            
0000143A                           689  * Subroutine N0001 ------------------------------------------
0000143A                           690  N0001
0000143A  14FC 0031                691              MOVE.B  #'1',(A2)+      ;display 1
0000143E  4E75                     692              RTS
00001440                           693  
00001440                           694  * -----------------------------------------------------------            
00001440                           695  * Subroutine N0010 ------------------------------------------
00001440                           696  N0010
00001440  14FC 0032                697              MOVE.B  #'2',(A2)+      ;display 2
00001444  4E75                     698              RTS
00001446                           699   
00001446                           700  * -----------------------------------------------------------            
00001446                           701  * Subroutine N0011 ------------------------------------------
00001446                           702  N0011
00001446  14FC 0033                703              MOVE.B  #'3',(A2)+      ;display 3
0000144A  4E75                     704              RTS
0000144C                           705  
0000144C                           706  * -----------------------------------------------------------            
0000144C                           707  * Subroutine N0100 ------------------------------------------
0000144C                           708  N0100
0000144C  14FC 0034                709              MOVE.B  #'4',(A2)+      ;display 4
00001450  4E75                     710              RTS
00001452                           711  
00001452                           712  * -----------------------------------------------------------            
00001452                           713  * Subroutine N0101 ------------------------------------------
00001452                           714  N0101
00001452  14FC 0035                715              MOVE.B  #'5',(A2)+      ;display 5
00001456  4E75                     716              RTS
00001458                           717  
00001458                           718  * -----------------------------------------------------------            
00001458                           719  * Subroutine N0110 ------------------------------------------
00001458                           720  N0110
00001458  14FC 0036                721              MOVE.B  #'6',(A2)+      ;display 6
0000145C  4E75                     722              RTS
0000145E                           723              
0000145E                           724  * -----------------------------------------------------------            
0000145E                           725  * Subroutine N0111 ------------------------------------------
0000145E                           726  N0111
0000145E  14FC 0037                727              MOVE.B  #'7',(A2)+      ;display 7
00001462  4E75                     728              RTS
00001464                           729  
00001464                           730  * ----------------------------------------------------------- 
00001464                           731  * Subroutine N1000 ------------------------------------------
00001464                           732  N1000       
00001464  14FC 0038                733              MOVE.B  #'8',(A2)+      ;display 8
00001468  4E75                     734              RTS
0000146A                           735  
0000146A                           736  * -----------------------------------------------------------            
0000146A                           737  * Subroutine N1001 ------------------------------------------
0000146A                           738  N1001   
0000146A  14FC 0039                739              MOVE.B  #'9',(A2)+      ;display 9
0000146E  4E75                     740              RTS
00001470                           741  
00001470                           742  * -----------------------------------------------------------            
00001470                           743  * Subroutine N1010 ------------------------------------------
00001470                           744  N1010   
00001470  14FC 0041                745              MOVE.B  #'A',(A2)+      ;display A
00001474  4E75                     746              RTS
00001476                           747  
00001476                           748  * -----------------------------------------------------------            
00001476                           749  * Subroutine N1011 ------------------------------------------
00001476                           750  N1011   
00001476  14FC 0042                751              MOVE.B  #'B',(A2)+      ;display B
0000147A  4E75                     752              RTS
0000147C                           753  
0000147C                           754  * -----------------------------------------------------------            
0000147C                           755  * Subroutine N1100 ------------------------------------------
0000147C                           756  N1100   
0000147C  14FC 0043                757              MOVE.B  #'C',(A2)+      ;display C
00001480  4E75                     758              RTS
00001482                           759  
00001482                           760  * -----------------------------------------------------------            
00001482                           761  * Subroutine N1101 ------------------------------------------
00001482                           762  N1101   
00001482  14FC 0044                763              MOVE.B  #'D',(A2)+      ;display D
00001486  4E75                     764              RTS
00001488                           765  
00001488                           766  * -----------------------------------------------------------            
00001488                           767  * Subroutine N1110 ------------------------------------------
00001488                           768  N1110   
00001488  14FC 0045                769              MOVE.B  #'E',(A2)+      ;display E
0000148C  4E75                     770              RTS
0000148E                           771  
0000148E                           772  * -----------------------------------------------------------            
0000148E                           773  * Subroutine N1111 ------------------------------------------
0000148E                           774  N1111   
0000148E  14FC 0046                775              MOVE.B  #'F',(A2)+      ;display F
00001492  4E75                     776              RTS   
00001494                           777  *-------------------- HELPER FUCNTION LOCATION -----------
00001494                           778  *- For Mode always D2
00001494                           779  *-- For Register always D1
00001494                           780  *-  Original Machine code In D6
00001494                           781  
00001494                           782  
00001494                           783  *            HELPER LOCATION
00001494                           784  *            HELPER LOCATION
00001494                           785  *            HELPER LOCATION
00001494                           786  *            HELPER LOCATION
00001494                           787  *            HELPER LOCATION
00001494                           788  
00001494                           789  get_0_3_bit
00001494                           790      
00001494                           791  
00001494                           792  get_3_5bit
00001494                           793  *------------------------------------------------------------
00001494                           794  * MachineCode: 0001 **** **** **BI T***
00001494                           795  * Only next last 3 bits which is stored at D0 => Source Address mode
00001494  4242                     796              CLR     D2
00001496  4241                     797              CLR     D1
00001498  1406                     798              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000149A  E50A                     799              LSL.B   #2,D2       **** **** BIT* **00
0000149C  EA0A                     800              LSR.B   #5,D2       **** **** 0000 0BIT
0000149E  4E75                     801              RTS
000014A0                           802              *------------------------------------------------------------
000014A0                           803  
000014A0                           804  
000014A0                           805  *-----------------------FUNCTION word or Long --------------
000014A0                           806  *----------Used to decipher if we are decoding a word or long
000014A0                           807  *-  This subroutine determines f the operations is a word or a long, 
000014A0                           808  *- we use the AND operator to clear out everything except for the 
000014A0                           809  *-3 bit which will be found in D3, we play with our data in D3
000014A0                           810  *-the word or LONG can be found in the OPCODE FIELD which is 
000014A0                           811  *-bits 8 _6
000014A0                           812  
000014A0                           813  WordOrLong  
000014A0                           814          *-find this OPMODE          
000014A0  4283                     815          CLR.L   D3
000014A2  3606                     816          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
000014A4                           817          *-we will store this in D3
000014A4                           818          *-using a shortcut the AND operator
000014A4                           819          *-we need these bits
000014A4                           820          *-[**** XXXX X[XXX] ****]
000014A4                           821              *- starts repersenting bits we do not need
000014A4                           822              *-shortcut we do not need to shift as much
000014A4                           823              *-minor optimization
000014A4                           824              *-AND F to keep 0 to throw away
000014A4  C67C 0FF0                825          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
000014A8  EC4B                     826          LSR.W   #6,D3
000014AA                           827          *- now weneed to get the last 3 bits
000014AA                           828          *-shift to the right by 6 makes the last 3 bits in the 
000014AA                           829          *-byte postion
000014AA                           830          *-[**** **** XXXX X[XXX]]m we need to clear everything else
000014AA  C67C 000F                831          AND.W   #$000F,D3 clear everything except the last byte we need
000014AE  E34B                     832          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
000014B0                           833          *-make sure everyhting is clearn except the last byte
000014B0  C67C 000F                834          AND.W   #$000F,D3
000014B4                           835          *-Shift back by 1 bit to the right
000014B4  E24B                     836          LSR.W   #1,D3
000014B6  4E75                     837          RTS 
000014B8                           838          
000014B8                           839              
000014B8                           840              
000014B8                           841              
000014B8                           842              
000014B8                           843              *---------------------------------------------------------------
000014B8                           844              *--------------------------------------------------------
000014B8                           845              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
000014B8                           846              *-------------------------------------
000014B8                           847              INCLUDE 'op0100.x68'    IN a different file, modulated design        
000014B8                           848  op0100      
000014B8                           849  
000014B8                           850  
000014B8                           851   
000014B8                           852              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
000014B8                           853              ;BEQ     jumpToRt            
000014B8                           854              ;CMP.W   #$4E75,D6   ;see if it's a RTS
000014B8                           855              ;BEQ     returnRt 
000014B8                           856             
000014B8                           857              ;JSR     WorL        
000014B8                           858              ;CMP.B   #hex7,D3    ;see if it's a LEA
000014B8                           859              ;BEQ     _lea        ;branch 
000014B8                           860              
000014B8                           861              ;JSR     clrORmm       
000014B8                           862              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
000014B8                           863              ;BEQ     _clrB       ;branch             
000014B8                           864              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
000014B8                           865              ;BEQ     _clrW       ;branch   
000014B8                           866              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
000014B8                           867              ;BEQ     _clrL       ;branch
000014B8                           868    
000014B8                           869              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000014B8                           870              ;BEQ     _movemW     ;branch   
000014B8                           871              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000014B8                           872              ;BEQ     _movemL     ;branch              
000014B8                           873                          
000014B8                           874              ;BRA     opError     ;bad opcode branch to error
000014B8                           875              
000014B8                           876              
000014B8  BC7C 4E71                877              CMP.W   #$4E71,D6
000014BC  6700 000A                878              BEQ     _NOP
000014C0                           879              
000014C0  BC7C 4E75                880              CMP.W   #$4E75,D6   ;see if it's a RTS
000014C4  6700 0028                881              BEQ     _RTS        branch to RTS
000014C8                           882             
000014C8                           883  
000014C8                           884              
000014C8                           885  _NOP
000014C8  7E02                     886              MOVE.L  #2,D7       ;data is not error
000014CA  14FC 0020                887              MOVE.B  #' ',(A2)+      ;print spaces
000014CE  14FC 0020                888              MOVE.B  #' ',(A2)+      ;print spaces
000014D2  14FC 0020                889              MOVE.B  #' ',(A2)+      ;print spaces
000014D6  14FC 0020                890              MOVE.B  #' ',(A2)+      ;print spaces
000014DA  14FC 004E                891              MOVE.B  #'N',(A2)+      ;print N
000014DE  14FC 004F                892              MOVE.B  #'O',(A2)+      ;print O
000014E2  14FC 0050                893              MOVE.B  #'P',(A2)+      ;print P
000014E6  1A3C 0003                894              MOVE.B  #3,D5           ;counter for output
000014EA  6000 066E                895              BRA     printCode
000014EE                           896  
000014EE                           897  _RTS    
000014EE  7E02                     898              MOVE.L  #2,D7       ;data is not error
000014F0  14FC 0020                899              MOVE.B  #' ',(A2)+      ;print spaces
000014F4  14FC 0020                900              MOVE.B  #' ',(A2)+      ;print spaces
000014F8  14FC 0020                901              MOVE.B  #' ',(A2)+      ;print spaces
000014FC  14FC 0020                902              MOVE.B  #' ',(A2)+      ;print spaces
00001500  14FC 0052                903              MOVE.B  #'R',(A2)+      ;print R
00001504  14FC 0054                904              MOVE.B  #'T',(A2)+      ;print T
00001508  14FC 0053                905              MOVE.B  #'S',(A2)+      ;print S
0000150C  1A3C 0003                906              MOVE.B  #3,D5           ;counter for output
00001510  6000 0648                907              BRA     printCode
00001510  6000 0648                908  -------------------- end include --------------------
00001514                           909              INCLUDE 'op0001.x68'    MOVE.b Differetn file
00001514                           910  
00001514                           911  
00001514                           912  
00001514                           913  
00001514                           914  op0001
00001514  7E02                     915              MOVE.L  #2,D7       ;data is not error
00001516  14FC 0020                916              MOVE.B  #' ',(A2)+      ;print spaces
0000151A  14FC 0020                917              MOVE.B  #' ',(A2)+      ;print spaces
0000151E  14FC 0020                918              MOVE.B  #' ',(A2)+      ;print spaces
00001522  14FC 0020                919              MOVE.B  #' ',(A2)+      ;print spaces
00001526  14FC 004D                920              MOVE.B  #'M',(A2)+      ;print M
0000152A  14FC 004F                921              MOVE.B  #'O',(A2)+      ;print O
0000152E  14FC 0056                922              MOVE.B  #'V',(A2)+      ;print V
00001532  14FC 0045                923              MOVE.B  #'E',(A2)+      PRINT  E
00001536  14FC 002E                924              MOVE.B  #'.',(A2)+
0000153A  14FC 0042                925              MOVE.B  #'B',(A2)+
0000153E  14FC 0020                926              MOVE.B  #' ',(A2)+   
00001542  4242                     927              CLR     D2
00001544  4241                     928              CLR     D1
00001546  1406                     929              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001548  E50A                     930              LSL.B   #2,D2       **** **** BIT* **00
0000154A  EA0A                     931              LSR.B   #5,D2       **** **** 0000 0BIT
0000154C  1002                     932              MOVE.B  D2,D0
0000154E  C0FC 0008                933              MULU    #8,D0       value adjusted for jumping
00001552  4DF8 1296                934              LEA     modeTable,A6 Load the table into A6
00001556  4EB6 0000                935              JSR     (A6,D0)     Jump to subroutine of value at D0
0000155A                           936              
0000155A  1206                     937              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000155C  EB09                     938              LSL.B   #5,D1       **** **** BIT0 0000
0000155E  EA09                     939              LSR.B   #5,D1       **** **** 0000 0BIT
00001560  1001                     940              MOVE.B  D1,D0      
00001562  C0FC 0008                941              MULU    #8,D0       value adjusted for jumping
00001566  4FF8 1344                942              LEA     regNumTable ,A7 Load the table into A7
0000156A  4EB7 0000                943              JSR     (A7,D0)     Jump to subroutine of value at D1
0000156E  4FF8 1116                944              LEA     immAbTable, A7
00001572  C2FC 0008                945              MULU    #8,D1
00001576  4EB7 1000                946              JSR     (A7,D1)    
0000157A                           947  
0000157A                           948  
0000157A  14FC 002C                949              MOVE.B  #',',(A2)+  comma between operands
0000157E  4242                     950              CLR     D2
00001580  4241                     951              CLR     D1
00001582  3406                     952              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001584  EF4A                     953              LSL.W   #7,D2       BIT* **** **** 0000
00001586  E04A                     954              LSR.W   #8,D2       0000 0000 BIT* ****
00001588  EA4A                     955              LSR.W   #5,D2       0000 0000 0000 0BIT 
0000158A  C4FC 0008                956              MULU    #8,D2       value adjusted for jumping
0000158E  4DF8 1296                957              LEA     modeTable,A6 Load the table into A6
00001592  4EB6 2000                958              JSR     (A6,D2)     Jump to subroutine of value at D2
00001596                           959             
00001596  3206                     960              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001598  E949                     961              LSL.W   #4,D1       BIT* **** **** 0000
0000159A  E049                     962              LSR.W   #8,D1       0000 0000 BIT* ****
0000159C  EA49                     963              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000159E  C2FC 0008                964              MULU    #8,D1       value adjusted for jumping
000015A2  4FF8 1344                965              LEA     regNumTable ,A7 Load the table into A7
000015A6  4EB7 1000                966              JSR     (A7,D1)     Jump to subroutine of value at D1    
000015AA  6000 05AE                967              BRA     printCode
000015AE                           968  immediateData
000015AE  14FC 0023                969              MOVE.B  #'#',(A2)+ 
000015B2  381D                     970              MOVE.W  (A5)+,D4    WE got the address for the operand
000015B4  3815                     971              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000015B6                           972              *4MSB   00X*
000015B6  4242                     973              CLR     D2
000015B8  1404                     974              MOVE.B  D4,D2       00X*
000015BA  E80A                     975              LSR.B   #4,D2       000X
000015BC  C4FC 0008                976              MULU    #8,D2   
000015C0  4FF8 13B4                977              LEA     numTable ,A7 Load the table into A7
000015C4  4EB7 2000                978              JSR     (A7,D2)     Jump to subroutine of value at D2
000015C8                           979              *last 4bits 00*X
000015C8  4242                     980              CLR     D2
000015CA  1404                     981              MOVE.B  D4,D2       00*X
000015CC  E90A                     982              LSL.B   #4,D2       00X*
000015CE  E80A                     983              LSR.B   #4,D2       000X
000015D0  C4FC 0008                984              MULU    #8,D2   
000015D4                           985             
000015D4  4EB7 2000                986              JSR     (A7,D2)     Jump to subroutine of value at D2
000015D8                           987  
000015D8  4E75                     988              RTS
000015DA                           989              
000015DA                           990  absoulteWord   
000015DA  14FC 0024                991              MOVE.B  #'$',(A2)+ 
000015DE  E08C                     992              LSR.L   #8,D4       XXXX **** => 00XX XX**
000015E0  E08C                     993              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000015E2                           994              *4MSB   X***
000015E2  4241                     995              CLR     D1
000015E4  3204                     996              MOVE.W  D4,D1       X***
000015E6  E049                     997              LSR.W   #8,D1       00X*
000015E8  E849                     998              LSR.W   #4,D1       000X
000015EA  4FF8 13B4                999              LEA     numTable ,A7 Load the table into A7
000015EE  C2FC 0008               1000              MULU    #8,D1
000015F2  4EB7 1000               1001              JSR     (A7,D1)     Jump to subroutine of value at D1 
000015F6                          1002              *next 4MSB  *X**
000015F6  4241                    1003              CLR     D1
000015F8  3204                    1004              MOVE.W  D4,D1       *X**
000015FA  E949                    1005              LSL.W   #4,D1       X**0        
000015FC  E049                    1006              LSR.W   #8,D1       00X*
000015FE  E849                    1007              LSR.W   #4,D1       000X
00001600  4FF8 13B4               1008              LEA     numTable ,A7 Load the table into A7
00001604  C2FC 0008               1009              MULU    #8,D1
00001608  4EB7 1000               1010              JSR     (A7,D1)     Jump to subroutine of value at D1
0000160C                          1011              *next 4MSB  **X*
0000160C  4241                    1012              CLR     D1
0000160E  1204                    1013              MOVE.B  D4,D1       00X*
00001610  E809                    1014              LSR.B   #4,D1       000X
00001612  4FF8 13B4               1015              LEA     numTable ,A7 Load the table into A7
00001616  C2FC 0008               1016                          MULU    #8,D1
0000161A  4EB7 1000               1017              JSR     (A7,D1)     Jump to subroutine of value at D1
0000161E                          1018              *last 4  bits   ***X
0000161E  4241                    1019              CLR     D1
00001620  1204                    1020              MOVE.B  D4,D1       00*X
00001622  E909                    1021              LSL.B   #4,D1       00X0    
00001624  E809                    1022              LSR.B   #4,D1       000X
00001626  4FF8 13B4               1023              LEA     numTable ,A7 Load the table into A7
0000162A  C2FC 0008               1024                          MULU    #8,D1
0000162E  4EB7 1000               1025              JSR     (A7,D1)     Jump to subroutine of value at D1
00001632  4E75                    1026              RTS            
00001634                          1027  absoulteLong   
00001634  4241                    1028              CLR     D1
00001636  4242                    1029              CLR     D2 
00001638  14FC 0024               1030              MOVE.B  #'$',(A2)+ 
0000163C  2404                    1031              MOVE.L  D4,D2       D2 will be used for later
0000163E  E08C                    1032              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001640  E08C                    1033              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001642                          1034              *4MSB   X***
00001642  4241                    1035              CLR     D1
00001644  3204                    1036              MOVE.W  D4,D1       X***
00001646  E049                    1037              LSR.W   #8,D1       00X*
00001648  E849                    1038              LSR.W   #4,D1       000X
0000164A  4FF8 13B4               1039              LEA     numTable ,A7 Load the table into A7
0000164E  C2FC 0008               1040              MULU    #8,D1
00001652  4EB7 1000               1041              JSR     (A7,D1)     Jump to subroutine of value at D1 
00001656                          1042              *next 4MSB  *X**
00001656  4241                    1043              CLR     D1
00001658  3204                    1044              MOVE.W  D4,D1       *X**
0000165A  E949                    1045              LSL.W   #4,D1       X**0        
0000165C  E049                    1046              LSR.W   #8,D1       00X*
0000165E  E849                    1047              LSR.W   #4,D1       000X
00001660  4FF8 13B4               1048              LEA     numTable ,A7 Load the table into A7
00001664  C2FC 0008               1049              MULU    #8,D1
00001668  4EB7 1000               1050              JSR     (A7,D1)     Jump to subroutine of value at D1
0000166C                          1051              *next 4MSB  **X*
0000166C  4241                    1052              CLR     D1
0000166E  1204                    1053              MOVE.B  D4,D1       00X*
00001670  E809                    1054              LSR.B   #4,D1       000X
00001672  4FF8 13B4               1055              LEA     numTable ,A7 Load the table into A7
00001676  C2FC 0008               1056                          MULU    #8,D1
0000167A  4EB7 1000               1057              JSR     (A7,D1)     Jump to subroutine of value at D1
0000167E                          1058              *last 4  bits   ***X
0000167E  4241                    1059              CLR     D1
00001680  1204                    1060              MOVE.B  D4,D1       00*X
00001682  E909                    1061              LSL.B   #4,D1       00X0    
00001684  E809                    1062              LSR.B   #4,D1       000X
00001686  4FF8 13B4               1063              LEA     numTable ,A7 Load the table into A7
0000168A  C2FC 0008               1064                          MULU    #8,D1
0000168E  4EB7 1000               1065              JSR     (A7,D1)     Jump to subroutine of value at D1
00001692                          1066              *4MSB   X***
00001692  4241                    1067              CLR     D1
00001694  3202                    1068              MOVE.W  D2,D1
00001696  E049                    1069              LSR.W   #8,D1            00X*
00001698  E849                    1070              LSR.W   #4,D1            000X
0000169A  C2FC 0008               1071              MULU    #8,D1
0000169E  4FF8 13B4               1072              LEA     numTable ,A7 Load the table into A7
000016A2  4EB7 1000               1073              JSR     (A7,D1)     Jump to subroutine of value at D1
000016A6                          1074              *next 4MSB  *X**
000016A6  4241                    1075              CLR     D1
000016A8  3202                    1076              MOVE.W  D2,D1
000016AA  E949                    1077              LSL.W   #4,D1       X**0
000016AC  E049                    1078              LSR.W   #8,D1       00X*
000016AE  E809                    1079              LSR.B   #4,D1       000X
000016B0  C2FC 0008               1080              MULU    #8,D1
000016B4  4FF8 13B4               1081              LEA     numTable ,A7 Load the table into A7
000016B8  4EB7 1000               1082              JSR     (A7,D1)     Jump to subroutine of value at D1
000016BC                          1083              *next 4MSB  **X*
000016BC  4241                    1084              CLR     D1
000016BE  1202                    1085              MOVE.B  D2,D1       00X*
000016C0  E809                    1086              LSR.B   #4,D1       000X
000016C2  C2FC 0008               1087              MULU    #8,D1
000016C6  4FF8 13B4               1088              LEA     numTable ,A7 Load the table into A7
000016CA  4EB7 1000               1089              JSR     (A7,D1)     Jump to subroutine of value at D1
000016CE                          1090              *next 4MSB  ***X
000016CE  4241                    1091              CLR     D1
000016D0  1202                    1092              MOVE.B  D2,D1       00*X
000016D2  E909                    1093              LSL.B   #4,D1       00X0
000016D4  E809                    1094              LSR.B   #4,D1       000X
000016D6  C2FC 0008               1095              MULU    #8,D1
000016DA  4FF8 13B4               1096              LEA     numTable ,A7 Load the table into A7
000016DE  4EB7 1000               1097              JSR     (A7,D1)     Jump to subroutine of value at D1
000016E2                          1098             
000016E2                          1099  
000016E2  4E75                    1100              RTS
000016E4                          1101  
000016E4                          1102  
000016E4                          1103  
000016E4                          1104  
000016E4                          1105  
000016E4                          1106  
000016E4                          1107  
000016E4                          1108  
000016E4                          1109  
000016E4                          1110  
000016E4                          1111  
000016E4                          1112  
000016E4                          1113  
000016E4                          1114  
000016E4                          1115  
000016E4                          1116  
000016E4                          1117  
000016E4                          1118  
000016E4                          1119  
000016E4                          1120  
000016E4                          1121  
000016E4                          1122  
000016E4                          1123  
000016E4                          1124  -------------------- end include --------------------
000016E4                          1125              INCLUDE 'op1101.x68'    ADD,ADDA
000016E4                          1126  op1101 
000016E4                          1127      ;ADD, ADDA
000016E4                          1128      
000016E4                          1129      ; we need to determine what its size is (B,W,L) putting the data in D6
000016E4  4EB8 14A0               1130      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
000016E8                          1131      ; we use to decode and branch
000016E8                          1132      *-now D3 contains the OPMODE FIELD telling us wether this is
000016E8                          1133      *-a LONG or a WORD
000016E8                          1134      
000016E8                          1135      *-now we need to decipher if its any of the adds
000016E8  B63C 0000               1136      CMP.B   #hex_0,D3 is this ADD.B
000016EC  6700 0032               1137      BEQ add_B   ;<EA> -> Dn
000016F0  B63C 0001               1138      CMP.B   #hex_1,D3   is it ADD.W
000016F4  6700 00B0               1139      BEQ add_W ;<EA> ->Dn
000016F8  B63C 0002               1140      CMP.B   #hex_2,D3   is it ADD.L
000016FC  6700 012E               1141      BEQ add_L ;<EA> ->Dn
00001700                          1142      
00001700  B63C 0003               1143      CMP.B   #hex_3,D3
00001704  6700 01AC               1144      BEQ adda_W
00001708                          1145      
00001708  B63C 0004               1146      CMP.B   #hex_4,D3
0000170C  6700 02B8               1147      BEQ add_B_EA Dn -> EA
00001710  B63C 0005               1148      CMP.B   #hex_5,D3
00001714  6700 0348               1149      BEQ add_W_EA Dn ->EA
00001718  B63C 0007               1150      CMP.B   #hex_7,D3
0000171C  6700 021E               1151      BEQ adda_L
00001720                          1152  
00001720                          1153  add_B   ;add.B EA->Dn
00001720                          1154      
00001720                          1155      *-store the size of the operation for immediate decoding use here/below
00001720                          1156      *-D7 equals storage of size of operation
00001720                          1157      *- #3 is byte , #2 is word #1 is long
00001720                          1158      ;MOVE.B  #3,D7
00001720                          1159      
00001720                          1160  
00001720  14FC 0020               1161      MOVE.B  #' ',(A2)+
00001724  14FC 0020               1162      MOVE.B  #' ',(A2)+
00001728  14FC 0020               1163      MOVE.B  #' ',(A2)+
0000172C  14FC 0020               1164      MOVE.B  #' ',(A2)+
00001730  14FC 0041               1165      MOVE.B  #'A',(A2)+
00001734  14FC 0044               1166      MOVE.B  #'D',(A2)+
00001738  14FC 0044               1167      MOVE.B  #'D',(A2)+
0000173C  14FC 002E               1168      MOVE.B  #'.',(A2)+
00001740  14FC 0042               1169      MOVE.B  #'B',(A2)+
00001744                          1170      *-always allow 4 spaces
00001744  14FC 0020               1171      MOVE.B  #' ',(A2)+
00001748  14FC 0020               1172      MOVE.B  #' ',(A2)+
0000174C  14FC 0020               1173      MOVE.B  #' ',(A2)+
00001750  14FC 0020               1174      MOVE.B  #' ',(A2)+
00001754                          1175      
00001754                          1176      *-deCDOE EA (Dn,Dn
00001754                          1177          * MachineCode: 0001 **** **** **BI T***
00001754                          1178      *-insert immediate addressing here
00001754  4242                    1179              CLR     D2
00001756  4241                    1180              CLR     D1
00001758  1406                    1181              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000175A  E50A                    1182              LSL.B   #2,D2       **** **** BIT* **00
0000175C  EA0A                    1183              LSR.B   #5,D2       **** **** 0000 0BIT
0000175E  C4FC 0008               1184              MULU    #8,D2       value adjusted for jumping
00001762  4DF8 1296               1185              LEA     modeTable,A6 Load the table into A6
00001766  4EB6 2000               1186              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000176A                          1187  
0000176A                          1188  
0000176A                          1189   * MachineCode: 0001 **** **** **** *BIT
0000176A                          1190              
0000176A  1206                    1191              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000176C  EB09                    1192              LSL.B   #5,D1       **** **** BIT0 0000
0000176E  EA09                    1193              LSR.B   #5,D1       **** **** 0000 0BIT      
00001770  C2FC 0008               1194              MULU    #8,D1       value adjusted for jumping
00001774  4FF8 1344               1195              LEA     regNumTable ,A7 Load the table into A7
00001778  4EB7 1000               1196              JSR     (A7,D1)     Jump to subroutine of value at D1
0000177C  B23C 0020               1197              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001780  6700 FE2C               1198              BEQ.W   immediateData   ;branch to immediateData
00001784  14FC 002C               1199              MOVE.B  #',',(A2)+
00001788  14FC 0044               1200              MOVE.B  #'D',(A2)+
0000178C                          1201              
0000178C                          1202    *------------------------------------------------------------
0000178C  4241                    1203              CLR     D1
0000178E  3206                    1204              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001790  E949                    1205              LSL.W   #4,D1       BIT* **** **** 0000
00001792  E049                    1206              LSR.W   #8,D1       0000 0000 BIT* ****
00001794  EA49                    1207              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001796  C2FC 0008               1208              MULU    #8,D1       value adjusted for jumping
0000179A  4FF8 13B4               1209              LEA     numTable ,A7 Load the table into A7
0000179E  4EB7 1000               1210              JSR     (A7,D1)     Jump to subroutine of value at D1   
000017A2  6000 03B6               1211              BRA printcode  
000017A6                          1212      
000017A6                          1213       
000017A6                          1214  add_W   ;add.B EA->Dn
000017A6                          1215      
000017A6                          1216      *-store the size of the operation for immediate decoding use here/below
000017A6                          1217      *-D7 equals storage of size of operation
000017A6                          1218      *- #3 is byte , #2 is word #1 is long
000017A6                          1219      ;MOVE.B  #3,D7
000017A6                          1220      
000017A6                          1221  
000017A6  14FC 0020               1222      MOVE.B  #' ',(A2)+
000017AA  14FC 0020               1223      MOVE.B  #' ',(A2)+
000017AE  14FC 0020               1224      MOVE.B  #' ',(A2)+
000017B2  14FC 0020               1225      MOVE.B  #' ',(A2)+
000017B6  14FC 0041               1226      MOVE.B  #'A',(A2)+
000017BA  14FC 0044               1227      MOVE.B  #'D',(A2)+
000017BE  14FC 0044               1228      MOVE.B  #'D',(A2)+
000017C2  14FC 002E               1229      MOVE.B  #'.',(A2)+
000017C6  14FC 0057               1230      MOVE.B  #'W',(A2)+
000017CA                          1231      *-always allow 4 spaces
000017CA  14FC 0020               1232      MOVE.B  #' ',(A2)+
000017CE  14FC 0020               1233      MOVE.B  #' ',(A2)+
000017D2  14FC 0020               1234      MOVE.B  #' ',(A2)+
000017D6  14FC 0020               1235      MOVE.B  #' ',(A2)+
000017DA                          1236      
000017DA                          1237      *-deCDOE EA (Dn,Dn
000017DA                          1238          * MachineCode: 0001 **** **** **BI T***
000017DA                          1239      *-insert immediate addressing here
000017DA  4242                    1240              CLR     D2
000017DC  4241                    1241              CLR     D1
000017DE  1406                    1242              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000017E0  E50A                    1243              LSL.B   #2,D2       **** **** BIT* **00
000017E2  EA0A                    1244              LSR.B   #5,D2       **** **** 0000 0BIT
000017E4  C4FC 0008               1245              MULU    #8,D2       value adjusted for jumping
000017E8  4DF8 1296               1246              LEA     modeTable,A6 Load the table into A6
000017EC  4EB6 2000               1247              JSR     (A6,D2)     Jump to subroutine of value at D0   
000017F0                          1248  
000017F0                          1249  
000017F0                          1250   * MachineCode: 0001 **** **** **** *BIT
000017F0                          1251              
000017F0  1206                    1252              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000017F2  EB09                    1253              LSL.B   #5,D1       **** **** BIT0 0000
000017F4  EA09                    1254              LSR.B   #5,D1       **** **** 0000 0BIT      
000017F6  C2FC 0008               1255              MULU    #8,D1       value adjusted for jumping
000017FA  4FF8 1344               1256              LEA     regNumTable ,A7 Load the table into A7
000017FE  4EB7 1000               1257              JSR     (A7,D1)     Jump to subroutine of value at D1
00001802  B23C 0020               1258              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001806  6700 FDA6               1259              BEQ.W   immediateData   ;branch to immediateData
0000180A  14FC 002C               1260              MOVE.B  #',',(A2)+
0000180E  14FC 0044               1261              MOVE.B  #'D',(A2)+
00001812                          1262              
00001812                          1263                *------------------------------------------------------------
00001812  4241                    1264              CLR     D1
00001814  3206                    1265              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001816  E949                    1266              LSL.W   #4,D1       BIT* **** **** 0000
00001818  E049                    1267              LSR.W   #8,D1       0000 0000 BIT* ****
0000181A  EA49                    1268              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000181C  C2FC 0008               1269              MULU    #8,D1       value adjusted for jumping
00001820  4FF8 13B4               1270              LEA     numTable ,A7 Load the table into A7
00001824  4EB7 1000               1271              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001828  6000 0330               1272              BRA printcode  
0000182C                          1273     
0000182C                          1274  add_L   ;add.B EA->Dn
0000182C                          1275      
0000182C                          1276      *-store the size of the operation for immediate decoding use here/below
0000182C                          1277      *-D7 equals storage of size of operation
0000182C                          1278      *- #3 is byte , #2 is word #1 is long
0000182C                          1279      ;MOVE.B  #3,D7
0000182C                          1280      
0000182C                          1281  
0000182C  14FC 0020               1282      MOVE.B  #' ',(A2)+
00001830  14FC 0020               1283      MOVE.B  #' ',(A2)+
00001834  14FC 0020               1284      MOVE.B  #' ',(A2)+
00001838  14FC 0020               1285      MOVE.B  #' ',(A2)+
0000183C  14FC 0041               1286      MOVE.B  #'A',(A2)+
00001840  14FC 0044               1287      MOVE.B  #'D',(A2)+
00001844  14FC 0044               1288      MOVE.B  #'D',(A2)+
00001848  14FC 002E               1289      MOVE.B  #'.',(A2)+
0000184C  14FC 004C               1290      MOVE.B  #'L',(A2)+
00001850                          1291      *-always allow 4 spaces
00001850  14FC 0020               1292      MOVE.B  #' ',(A2)+
00001854  14FC 0020               1293      MOVE.B  #' ',(A2)+
00001858  14FC 0020               1294      MOVE.B  #' ',(A2)+
0000185C  14FC 0020               1295      MOVE.B  #' ',(A2)+
00001860                          1296      
00001860                          1297      *-deCDOE EA (Dn,Dn
00001860                          1298          * MachineCode: 0001 **** **** **BI T***
00001860                          1299      *-insert immediate addressing here
00001860  4242                    1300              CLR     D2
00001862  4241                    1301              CLR     D1
00001864  1406                    1302              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001866  E50A                    1303              LSL.B   #2,D2       **** **** BIT* **00
00001868  EA0A                    1304              LSR.B   #5,D2       **** **** 0000 0BIT
0000186A  C4FC 0008               1305              MULU    #8,D2       value adjusted for jumping
0000186E  4DF8 1296               1306              LEA     modeTable,A6 Load the table into A6
00001872  4EB6 2000               1307              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001876                          1308  
00001876                          1309  
00001876                          1310   * MachineCode: 0001 **** **** **** *BIT
00001876                          1311              
00001876  1206                    1312              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001878  EB09                    1313              LSL.B   #5,D1       **** **** BIT0 0000
0000187A  EA09                    1314              LSR.B   #5,D1       **** **** 0000 0BIT      
0000187C  C2FC 0008               1315              MULU    #8,D1       value adjusted for jumping
00001880  4FF8 1344               1316              LEA     regNumTable ,A7 Load the table into A7
00001884  4EB7 1000               1317              JSR     (A7,D1)     Jump to subroutine of value at D1
00001888  B23C 0020               1318              CMP.B   #32,D1         ; #imm => #XX 3 spaces
0000188C  6700 FD20               1319              BEQ.W   immediateData   ;branch to immediateData
00001890  14FC 002C               1320              MOVE.B  #',',(A2)+
00001894  14FC 0044               1321              MOVE.B  #'D',(A2)+
00001898                          1322              
00001898                          1323                *------------------------------------------------------------
00001898  4241                    1324              CLR     D1
0000189A  3206                    1325              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000189C  E949                    1326              LSL.W   #4,D1       BIT* **** **** 0000
0000189E  E049                    1327              LSR.W   #8,D1       0000 0000 BIT* ****
000018A0  EA49                    1328              LSR.W   #5,D1       0000 0000 0000 0BIT     
000018A2  C2FC 0008               1329              MULU    #8,D1       value adjusted for jumping
000018A6  4FF8 13B4               1330              LEA     numTable ,A7 Load the table into A7
000018AA  4EB7 1000               1331              JSR     (A7,D1)     Jump to subroutine of value at D1   
000018AE  6000 02AA               1332              BRA printcode  
000018B2                          1333      
000018B2                          1334  adda_W  ;ADDA.W
000018B2                          1335      *-maybe error checking
000018B2                          1336      *-we know its ADDA.W so print it to our buffer
000018B2                          1337      *-ex ADDA.W D2,D7
000018B2                          1338      
000018B2  14FC 0020               1339      MOVE.B  #' ',(A2)+
000018B6  14FC 0020               1340      MOVE.B  #' ',(A2)+
000018BA  14FC 0020               1341      MOVE.B  #' ',(A2)+
000018BE  14FC 0020               1342      MOVE.B  #' ',(A2)+
000018C2  14FC 0041               1343      MOVE.B  #'A',(A2)+
000018C6  14FC 0044               1344      MOVE.B  #'D',(A2)+
000018CA  14FC 0044               1345      MOVE.B  #'D',(A2)+
000018CE  14FC 0041               1346      MOVE.B  #'A',(A2)+
000018D2  14FC 002E               1347      MOVE.B  #'.',(A2)+
000018D6  14FC 0057               1348      MOVE.B  #'W',(A2)+
000018DA                          1349      *-always allow 4 spaces
000018DA  14FC 0020               1350      MOVE.B  #' ',(A2)+
000018DE  14FC 0020               1351      MOVE.B  #' ',(A2)+
000018E2  14FC 0020               1352      MOVE.B  #' ',(A2)+
000018E6  14FC 0020               1353      MOVE.B  #' ',(A2)+
000018EA                          1354      
000018EA                          1355      * MachineCode: 0001 **** **** **BI T***
000018EA                          1356      *-insert immediate addressing here
000018EA  4242                    1357              CLR     D2
000018EC  4241                    1358              CLR     D1
000018EE  1406                    1359              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000018F0  E50A                    1360              LSL.B   #2,D2       **** **** BIT* **00
000018F2  EA0A                    1361              LSR.B   #5,D2       **** **** 0000 0BIT
000018F4  C4FC 0008               1362              MULU    #8,D2       value adjusted for jumping
000018F8  4DF8 1296               1363              LEA     modeTable,A6 Load the table into A6
000018FC  4EB6 2000               1364              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001900                          1365  
00001900                          1366  
00001900                          1367   * MachineCode: 0001 **** **** **** *BIT
00001900                          1368              
00001900  1206                    1369              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001902  EB09                    1370              LSL.B   #5,D1       **** **** BIT0 0000
00001904  EA09                    1371              LSR.B   #5,D1       **** **** 0000 0BIT      
00001906  C2FC 0008               1372              MULU    #8,D1       value adjusted for jumping
0000190A  4FF8 1344               1373              LEA     regNumTable ,A7 Load the table into A7
0000190E  4EB7 1000               1374              JSR     (A7,D1)     Jump to subroutine of value at D1
00001912  B23C 0020               1375              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001916  6700 FC96               1376              BEQ.W   immediateData   ;branch to immediateData
0000191A                          1377      
0000191A  14FC 002C               1378          MOVE.B  #',',(A2)+
0000191E  14FC 0041               1379          MOVE.B  #'A',(A2)+
00001922  4241                    1380              CLR     D1
00001924  3206                    1381              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001926  E949                    1382              LSL.W   #4,D1       BIT* **** **** 0000
00001928  E049                    1383              LSR.W   #8,D1       0000 0000 BIT* ****
0000192A  EA49                    1384              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000192C  C2FC 0008               1385              MULU    #8,D1       value adjusted for jumping
00001930  4FF8 13B4               1386              LEA     numTable ,A7 Load the table into A7
00001934  4EB7 1000               1387              JSR     (A7,D1)     Jump to subroutine of value at D1    
00001938                          1388          
00001938                          1389      
00001938  6000 0220               1390          BRA printCode
0000193C                          1391          
0000193C                          1392          
0000193C                          1393          
0000193C                          1394  
0000193C                          1395  adda_L  ;ADDA.L
0000193C                          1396      *-maybe error checking
0000193C                          1397      *-we know its ADDA.L so print it to our buffer
0000193C                          1398      *-ex ADDA.L D2,D7
0000193C                          1399      
0000193C  14FC 0020               1400      MOVE.B  #' ',(A2)+
00001940  14FC 0020               1401      MOVE.B  #' ',(A2)+
00001944  14FC 0020               1402      MOVE.B  #' ',(A2)+
00001948  14FC 0020               1403      MOVE.B  #' ',(A2)+
0000194C  14FC 0041               1404          MOVE.B  #'A',(A2)+
00001950  14FC 0044               1405          MOVE.B  #'D',(A2)+
00001954  14FC 0044               1406          MOVE.B  #'D',(A2)+
00001958  14FC 0041               1407          MOVE.B  #'A',(A2)+
0000195C  14FC 002E               1408          MOVE.B  #'.',(A2)+
00001960  14FC 004C               1409          MOVE.B  #'L',(A2)+
00001964                          1410      *-always allow 4 spaces
00001964  14FC 0020               1411          MOVE.B  #' ',(A2)+
00001968  14FC 0020               1412          MOVE.B  #' ',(A2)+
0000196C  14FC 0020               1413          MOVE.B  #' ',(A2)+
00001970  14FC 0020               1414          MOVE.B  #' ',(A2)+      
00001974                          1415      
00001974                          1416      * MachineCode: 0001 **** **** **BI T***
00001974                          1417      *-insert immediate addressing here
00001974  4242                    1418              CLR     D2
00001976  4241                    1419              CLR     D1
00001978  1406                    1420              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000197A  E50A                    1421              LSL.B   #2,D2       **** **** BIT* **00
0000197C  EA0A                    1422              LSR.B   #5,D2       **** **** 0000 0BIT
0000197E  C4FC 0008               1423              MULU    #8,D2       value adjusted for jumping
00001982  4DF8 1296               1424              LEA     modeTable,A6 Load the table into A6
00001986  4EB6 2000               1425              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000198A                          1426  
0000198A                          1427  
0000198A                          1428   * MachineCode: 0001 **** **** **** *BIT
0000198A                          1429              
0000198A  1206                    1430              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000198C  EB09                    1431              LSL.B   #5,D1       **** **** BIT0 0000
0000198E  EA09                    1432              LSR.B   #5,D1       **** **** 0000 0BIT      
00001990  C2FC 0008               1433              MULU    #8,D1       value adjusted for jumping
00001994  4FF8 1344               1434              LEA     regNumTable ,A7 Load the table into A7
00001998  4EB7 1000               1435              JSR     (A7,D1)     Jump to subroutine of value at D1
0000199C  B23C 0020               1436              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000019A0  6700 FC0C               1437              BEQ.W   immediateData   ;branch to immediateData
000019A4                          1438      
000019A4  14FC 002C               1439              MOVE.B  #',',(A2)+
000019A8  14FC 0041               1440              MOVE.B  #'A',(A2)+
000019AC  4241                    1441              CLR     D1
000019AE  3206                    1442              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000019B0  E949                    1443              LSL.W   #4,D1       BIT* **** **** 0000
000019B2  E049                    1444              LSR.W   #8,D1       0000 0000 BIT* ****
000019B4  EA49                    1445              LSR.W   #5,D1       0000 0000 0000 0BIT     
000019B6  C2FC 0008               1446              MULU    #8,D1       value adjusted for jumping
000019BA  4FF8 13B4               1447              LEA     numTable ,A7 Load the table into A7
000019BE  4EB7 1000               1448              JSR     (A7,D1)     Jump to subroutine of value at D1    
000019C2                          1449          
000019C2                          1450      
000019C2  6000 0196               1451          BRA printCode
000019C6                          1452  
000019C6                          1453  
000019C6                          1454      
000019C6                          1455  add_B_EA   ;add.B Dn -> EA
000019C6                          1456      
000019C6                          1457      *-store the size of the operation for immediate decoding use here/below
000019C6                          1458      *-D7 equals storage of size of operation
000019C6                          1459      *- #3 is byte , #2 is word #1 is long
000019C6                          1460      ;MOVE.B  #3,D7
000019C6                          1461      
000019C6                          1462  
000019C6  14FC 0020               1463      MOVE.B  #' ',(A2)+
000019CA  14FC 0020               1464      MOVE.B  #' ',(A2)+
000019CE  14FC 0020               1465      MOVE.B  #' ',(A2)+
000019D2  14FC 0020               1466      MOVE.B  #' ',(A2)+
000019D6  14FC 0041               1467      MOVE.B  #'A',(A2)+
000019DA  14FC 0044               1468      MOVE.B  #'D',(A2)+
000019DE  14FC 0044               1469      MOVE.B  #'D',(A2)+
000019E2  14FC 002E               1470      MOVE.B  #'.',(A2)+
000019E6  14FC 0042               1471      MOVE.B  #'B',(A2)+
000019EA                          1472      *-always allow 4 spaces
000019EA  14FC 0020               1473      MOVE.B  #' ',(A2)+
000019EE  14FC 0020               1474      MOVE.B  #' ',(A2)+
000019F2  14FC 0020               1475      MOVE.B  #' ',(A2)+
000019F6  14FC 0020               1476      MOVE.B  #' ',(A2)+
000019FA                          1477      
000019FA                          1478      *-deCDOE EA (Dn,Dn
000019FA                          1479          * MachineCode: 0001 **** **** **BI T***
000019FA                          1480      *-insert immediate addressing here
000019FA  4242                    1481              CLR     D2
000019FC  4241                    1482              CLR     D1
000019FE  1406                    1483              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001A00  E50A                    1484              LSL.B   #2,D2       **** **** BIT* **00
00001A02  EA0A                    1485              LSR.B   #5,D2       **** **** 0000 0BIT
00001A04  C4FC 0008               1486              MULU    #8,D2       value adjusted for jumping
00001A08  4DF8 1296               1487              LEA     modeTable,A6 Load the table into A6
00001A0C  4EB6 2000               1488              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001A10                          1489  
00001A10                          1490  
00001A10                          1491   * MachineCode: 0001 **** **** **** *BIT
00001A10                          1492              
00001A10  1206                    1493              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001A12  EB09                    1494              LSL.B   #5,D1       **** **** BIT0 0000
00001A14  EA09                    1495              LSR.B   #5,D1       **** **** 0000 0BIT      
00001A16  C2FC 0008               1496              MULU    #8,D1       value adjusted for jumping
00001A1A  4FF8 1344               1497              LEA     regNumTable ,A7 Load the table into A7
00001A1E  4EB7 1000               1498              JSR     (A7,D1)     Jump to subroutine of value at D1
00001A22  B23C 0020               1499              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001A26  6700 FB86               1500              BEQ.W   immediateData   ;branch to immediateData
00001A2A  14FC 002C               1501              MOVE.B  #',',(A2)+
00001A2E                          1502   ;           MOVE.B  #'D',(A2)+
00001A2E                          1503              
00001A2E  4242                    1504              CLR     D2
00001A30  4241                    1505              CLR     D1
00001A32  3406                    1506              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001A34  EF4A                    1507              LSL.W   #7,D2       BIT* **** **** 0000
00001A36  E04A                    1508              LSR.W   #8,D2       0000 0000 BIT* ****
00001A38  EA4A                    1509              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001A3A  C4FC 0008               1510              MULU    #8,D2       value adjusted for jumping
00001A3E  4DF8 1296               1511              LEA     modeTable,A6 Load the table into A6
00001A42  4EB6 2000               1512              JSR     (A6,D2)     Jump to subroutine of value at D2
00001A46                          1513             
00001A46  3206                    1514              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001A48  E949                    1515              LSL.W   #4,D1       BIT* **** **** 0000
00001A4A  E049                    1516              LSR.W   #8,D1       0000 0000 BIT* ****
00001A4C  EA49                    1517              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001A4E  C2FC 0008               1518              MULU    #8,D1       value adjusted for jumping
00001A52  4FF8 1344               1519              LEA     regNumTable ,A7 Load the table into A7
00001A56  4EB7 1000               1520              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001A5A  6000 00FE               1521              BRA printcode  
00001A5E                          1522              
00001A5E                          1523              
00001A5E                          1524  
00001A5E                          1525     
00001A5E                          1526  add_W_EA   ;add.B Dn -> EA
00001A5E                          1527      
00001A5E                          1528      *-store the size of the operation for immediate decoding use here/below
00001A5E                          1529      *-D7 equals storage of size of operation
00001A5E                          1530      *- #3 is byte , #2 is word #1 is long
00001A5E                          1531      ;MOVE.B  #3,D7
00001A5E                          1532      
00001A5E                          1533  
00001A5E  14FC 0020               1534      MOVE.B  #' ',(A2)+
00001A62  14FC 0020               1535      MOVE.B  #' ',(A2)+
00001A66  14FC 0020               1536      MOVE.B  #' ',(A2)+
00001A6A  14FC 0020               1537      MOVE.B  #' ',(A2)+
00001A6E  14FC 0041               1538      MOVE.B  #'A',(A2)+
00001A72  14FC 0044               1539      MOVE.B  #'D',(A2)+
00001A76  14FC 0044               1540      MOVE.B  #'D',(A2)+
00001A7A  14FC 002E               1541      MOVE.B  #'.',(A2)+
00001A7E  14FC 0057               1542      MOVE.B  #'W',(A2)+
00001A82                          1543      *-always allow 4 spaces
00001A82  14FC 0020               1544      MOVE.B  #' ',(A2)+
00001A86  14FC 0020               1545      MOVE.B  #' ',(A2)+
00001A8A  14FC 0020               1546      MOVE.B  #' ',(A2)+
00001A8E  14FC 0020               1547      MOVE.B  #' ',(A2)+
00001A92                          1548      
00001A92                          1549      *-deCDOE EA (Dn,Dn
00001A92                          1550          * MachineCode: 0001 **** **** **BI T***
00001A92                          1551      *-insert immediate addressing here
00001A92  4242                    1552              CLR     D2
00001A94  4241                    1553              CLR     D1
00001A96  1406                    1554              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001A98  E50A                    1555              LSL.B   #2,D2       **** **** BIT* **00
00001A9A  EA0A                    1556              LSR.B   #5,D2       **** **** 0000 0BIT
00001A9C  C4FC 0008               1557              MULU    #8,D2       value adjusted for jumping
00001AA0  4DF8 1296               1558              LEA     modeTable,A6 Load the table into A6
00001AA4  4EB6 2000               1559              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001AA8                          1560  
00001AA8                          1561  
00001AA8                          1562   * MachineCode: 0001 **** **** **** *BIT
00001AA8                          1563              
00001AA8  1206                    1564              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001AAA  EB09                    1565              LSL.B   #5,D1       **** **** BIT0 0000
00001AAC  EA09                    1566              LSR.B   #5,D1       **** **** 0000 0BIT      
00001AAE  C2FC 0008               1567              MULU    #8,D1       value adjusted for jumping
00001AB2  4FF8 1344               1568              LEA     regNumTable ,A7 Load the table into A7
00001AB6  4EB7 1000               1569              JSR     (A7,D1)     Jump to subroutine of value at D1
00001ABA  B23C 0020               1570              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001ABE  6700 FAEE               1571              BEQ.W   immediateData   ;branch to immediateData
00001AC2  14FC 002C               1572              MOVE.B  #',',(A2)+
00001AC6                          1573   ;           MOVE.B  #'D',(A2)+
00001AC6                          1574              
00001AC6  4242                    1575              CLR     D2
00001AC8  4241                    1576              CLR     D1
00001ACA  3406                    1577              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001ACC  EF4A                    1578              LSL.W   #7,D2       BIT* **** **** 0000
00001ACE  E04A                    1579              LSR.W   #8,D2       0000 0000 BIT* ****
00001AD0  EA4A                    1580              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001AD2  C4FC 0008               1581              MULU    #8,D2       value adjusted for jumping
00001AD6  4DF8 1296               1582              LEA     modeTable,A6 Load the table into A6
00001ADA  4EB6 2000               1583              JSR     (A6,D2)     Jump to subroutine of value at D2
00001ADE                          1584             
00001ADE  3206                    1585              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001AE0  E949                    1586              LSL.W   #4,D1       BIT* **** **** 0000
00001AE2  E049                    1587              LSR.W   #8,D1       0000 0000 BIT* ****
00001AE4  EA49                    1588              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001AE6  C2FC 0008               1589              MULU    #8,D1       value adjusted for jumping
00001AEA  4FF8 1344               1590              LEA     regNumTable ,A7 Load the table into A7
00001AEE  4EB7 1000               1591              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001AF2  6000 0066               1592              BRA printcode  
00001AF6                          1593              
00001AF6                          1594              
00001AF6                          1595  
00001AF6                          1596  
00001AF6                          1597  -------------------- end include --------------------
00001AF6                          1598  
00001AF6                          1599  
00001AF6                          1600              
00001AF6                          1601             
00001AF6                          1602  
00001AF6                          1603              
00001AF6                          1604  opError                             
00001AF6  2608                    1605              MOVE.L  A0,D3
00001AF8  2C03                    1606              MOVE.L  D3,D6
00001AFA  45F9 0000067C           1607              LEA     bad_code_buffer,A2
00001B00  7E02                    1608              MOVE.L  #2,D7
00001B02  4EB8 10A6               1609              JSR     write_data_in_D3_to_buffer
00001B06                          1610              
00001B06  14FC 0020               1611              MOVE.B  #' ',(A2)+      ;print spaces
00001B0A  14FC 0020               1612              MOVE.B  #' ',(A2)+      ;print spaces
00001B0E  14FC 0020               1613              MOVE.B  #' ',(A2)+      ;print spaces
00001B12  14FC 0020               1614              MOVE.B  #' ',(A2)+      ;print spaces
00001B16  14FC 0044               1615              MOVE.B  #'D',(A2)+      ;print D
00001B1A  14FC 0041               1616              MOVE.B  #'A',(A2)+      ;print A
00001B1E  14FC 0054               1617              MOVE.B  #'T',(A2)+      ;print T
00001B22  14FC 0041               1618              MOVE.B  #'A',(A2)+      ;print A
00001B26  14FC 0020               1619              MOVE.B  #' ',(A2)+      ;print spaces
00001B2A  14FC 0020               1620              MOVE.B  #' ',(A2)+      ;print spaces
00001B2E  14FC 0020               1621              MOVE.B  #' ',(A2)+      ;print spaces
00001B32  14FC 0020               1622              MOVE.B  #' ',(A2)+      ;print spaces
00001B36                          1623              
00001B36                          1624              
00001B36  14FC 0046               1625              MOVE.B  #'F',(A2)+      ;print spaces
00001B3A  14FC 0046               1626              MOVE.B  #'F',(A2)+      ;print spaces
00001B3E  14FC 0046               1627              MOVE.B  #'F',(A2)+      ;print spaces
00001B42  14FC 0046               1628              MOVE.B  #'F',(A2)+      ;print spaces
00001B46                          1629              
00001B46                          1630              
00001B46                          1631              ;MOVE.L  (A0),D3
00001B46                          1632              ;MOVE.L  D3,D6
00001B46                          1633              ;MOVE.L  #1,D7
00001B46                          1634              ;JSR     write_data_in_D3_to_buffer
00001B46                          1635              
00001B46  14BC 0000               1636              MOVE.B  #$00,(A2) * add NULL value to print string
00001B4A  43F9 0000067C           1637              LEA     bad_code_buffer,A1
00001B50  103C 000D               1638              MOVE.B  #13,D0
00001B54  4E4F                    1639              TRAP    #15   
00001B56                          1640           
00001B56  6000 F50E               1641              BRA     get_next_instruction           
00001B5A                          1642  printCode   
00001B5A  14BC 0000               1643              MOVE.B  #$00,(A2)   * add NULL value to print string
00001B5E  070A 0000               1644              MOVEP   (A2),D3
00001B62  43F9 00000624           1645              LEA     good_code_buffer,A1 * load buffer for good code to print
00001B68  700D                    1646              MOVEQ   #13,D0
00001B6A  4E4F                    1647              TRAP    #15         * display code
00001B6C                          1648    
00001B6C  6000 F4F8               1649              BRA     get_next_instruction                     
00001B70                          1650  * OP Codes -------------------------------------------------
00001B70  =00000000               1651  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00001B70  =00000001               1652  bin0001     EQU     %0001   ;MOVE.B
00001B70  =00000002               1653  bin0010     EQU     %0010   ;MOVE.L
00001B70  =00000003               1654  bin0011     EQU     %0011   ;MOVE.W
00001B70  =00000004               1655  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00001B70  =00000005               1656  bin0101     EQU     %0101   ;SUBQ
00001B70  =00000006               1657  bin0110     EQU     %0110   ;Bcc
00001B70  =00000007               1658  bin0111     EQU     %0111   ;MOVEQ
00001B70  =00000008               1659  bin1000     EQU     %1000   ;DIVU.W
00001B70  =00000009               1660  bin1001     EQU     %1001   ;SUB, SUBA
00001B70  =0000000B               1661  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00001B70  =0000000C               1662  bin1100     EQU     %1100   ;AND, MULS.W
00001B70  =0000000D               1663  bin1101     EQU     %1101   ;ADD, ADDA
00001B70  =0000000E               1664  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00001B70                          1665  
00001B70                          1666  *Binary HEX values*---------------------------------------------------------------
00001B70  =00000000               1667  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
00001B70  =00000001               1668  hex_1   EQU     %0001 ;1
00001B70  =00000002               1669  hex_2   EQU     %0010 ;2    
00001B70  =00000003               1670  hex_3   EQU     %0011 ;3
00001B70  =00000004               1671  hex_4   EQU     %0100 ;4
00001B70  =00000005               1672  hex_5   EQU     %0101 ;5
00001B70  =00000006               1673  hex_6   EQU     %0110 ;6
00001B70  =00000007               1674  hex_7   EQU     %0111 ;7
00001B70  =00000008               1675  hex_8   EQU     %1000 ;8
00001B70  =00000009               1676  hex_9   EQU     %1001 ;9
00001B70  =0000000A               1677  hex_A   EQU     %1010 ;A
00001B70  =0000000B               1678  hex_B   EQU     %1011 ;B
00001B70  =0000000C               1679  hex_C   EQU     %1100 ;C
00001B70  =0000000D               1680  hex_D   EQU     %1101 ;D
00001B70  =0000000E               1681  hex_E   EQU     %1110 ;E
00001B70  =0000000F               1682  hex_F   EQU     %1111 ;F      
00001B70                          1683              
00001B70                          1684  ;LOOP:
00001B70                          1685                  *-compare the adress pointers current address with ending address to see if we need to continue
00001B70                          1686                  *- load the address registrer (pointer/ this helps us look at data)
00001B70                          1687                  *-load address register number into data register
00001B70                          1688                  
00001B70                          1689                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
00001B70                          1690                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
00001B70                          1691                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
00001B70                          1692                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
00001B70                          1693                  ;BEQ     FINISH      ;finish they are equal
00001B70                          1694                  ;RTS
00001B70                          1695  
00001B70                          1696          
00001B70                          1697          *----------END OF I/O SECTION*---
00001B70                          1698          *----------Start of OPCODE SUBROUTINE
00001B70  =0000A000               1699  stack            EQU        $A000  
00001B70  =0000000C               1700  shift            EQU        12                   * Shift 12 bits 
00000400                          1701                   ORG        $400
00000400                          1702           
00000400  4FF9 0000A000           1703  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424           1704                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                    1705                   CLR.L      D0              *Zero it       
0000040E  227C 00009000           1706                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                    1707                   MOVE.W     (A1),D0
00000416  123C 000C               1708                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                    1709                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006               1710                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000               1711                   JSR        0(A0,D0)        *Jump indirect with index
00000424                          1712                   
00000424  4EF9 00000484           1713  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488           1714                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C           1715                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490           1716                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494           1717                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8           1718                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC           1719                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0           1720                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4           1721                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8           1722                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC           1723                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0           1724                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4           1725                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8           1726                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC           1727                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0           1728                   JMP        code1111        *Special/Reserved
00000484                          1729                   
00000484  4E72 2700               1730  code0000         STOP       #$2700
00000488  4E72 2700               1731  code0001         STOP       #$2700
0000048C  4E72 2700               1732  code0010         STOP       #$2700
00000490  4E72 2700               1733  code0011         STOP       #$2700
00000494  267C 00000000           1734  code0100         MOVE.L     #0,A3
0000049A  4241                    1735                   CLR        D1
0000049C  43F9 000006D5           1736                   LEA        enter_start_AD,A1
000004A2  700E                    1737                   MOVE.L     #14,D0
000004A4  4E4F                    1738                   TRAP       #15
000004A6  4E75                    1739                   RTS
000004A8  4E72 2700               1740  code0101         STOP       #$2700
000004AC  4E72 2700               1741  code0110         STOP       #$2700
000004B0  4E72 2700               1742  code0111         STOP       #$2700
000004B4  4E72 2700               1743  code1000         STOP       #$2700
000004B8  4E72 2700               1744  code1001         STOP       #$2700
000004BC  4E72 2700               1745  code1010         STOP       #$2700
000004C0  4E72 2700               1746  code1011         STOP       #$2700
000004C4  4E72 2700               1747  code1100         STOP       #$2700
000004C8  4E72 2700               1748  code1101         STOP       #$2700
000004CC  4E72 2700               1749  code1110         STOP       #$2700
000004D0  4E72 2700               1750  code1111         STOP       #$2700
000004D4                          1751  
000004D4                          1752  FINISH:
000004D4                          1753          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                    1754              MOVE.L  A0,D3
000004D6  2C03                    1755              MOVE.L  D3,D6
000004D8  45F9 00000624           1756              LEA     good_code_buffer,A2
000004DE                          1757   
000004DE                          1758              
000004DE  14FC 0046               1759              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049               1760              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049               1761              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E               1762              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049               1763              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053               1764              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048               1765              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041               1766              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041               1767              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041               1768              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048               1769              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041               1770              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052               1771              MOVE.B  #'R',(A2)+
00000512  2610                    1772              MOVE.L  (A0),D3
00000514  2C03                    1773              MOVE.L  D3,D6
00000516  7E01                    1774              MOVE.L  #1,D7
00000518                          1775  
00000518                          1776              
00000518  14BC 0000               1777              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000624           1778              LEA     good_code_buffer,A1
00000522  103C 000D               1779              MOVE.B  #13,D0
00000526  4E4F                    1780              TRAP    #15   
00000528  FFFF FFFF               1781              SIMHALT
0000052C                          1782  
0000052C                          1783  *-390 -> 406 WITH NOP AT 400
0000052C                          1784  
0000052C                          1785  
0000052C                          1786  hexToAscii:
0000052C                          1787  ones:
0000052C  3A02                    1788      MOVE.W  D2,D5
0000052E  CAFC 0008               1789      MULU    #8,D5       value adjusted for jumping
00000532  4FF8 13B4               1790      LEA     numTable ,A7 Load the table into A7
00000536  4EB7 5000               1791      JSR     (A7,D5)     Jump to subroutine of value at D1 
0000053A                          1792      *-adding res
0000053A                          1793      ;ADD     D2,D7
0000053A                          1794      
0000053A                          1795  
0000053A  4E75                    1796      RTS
0000053C                          1797  
0000053C                          1798  
0000053C                          1799  
0000053C                          1800  
0000053C                          1801  
0000053C                          1802  
0000053C                          1803  
0000053C                          1804  
0000053C                          1805  
0000053C                          1806  
0000053C                          1807  
0000053C                          1808  
0000053C                          1809  
0000053C                          1810  *-Parses input - take input from user to create a memory address
0000053C                          1811  *- entry is parsed to make sure it falls within a valid range
0000053C                          1812  *-good inputs are converteed to hex
0000053C                          1813  *-the entered addres get's stored in d3
0000053C                          1814  *-
0000053C                          1815  *-
0000053C                          1816  
0000053C                          1817  
0000053C                          1818  
0000053C  7C00                    1819  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000053E  7A00                    1820                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000540                          1821                  
00000540                          1822                  *-CHECK TO SEE INPUT DATA
00000540  B205                    1823                  CMP.B   D5,D1   D5 IS 0
00000542  6700 0086               1824                  BEQ     error_no_input no input was found
00000546  0C41 0008               1825                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000054A  6E00 0090               1826                  BGT     error_bad_entry
0000054E                          1827                  ;BGT     error_inv_to_many_char
0000054E  6000 0018               1828                  BRA     parse_each
00000552                          1829  
00000552  7C00                    1830  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000554  7A00                    1831                  MOVEQ   #$0,D5  CLEARS D5
00000556  B205                    1832                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000558  6700 0070               1833                  BEQ     error_no_input
0000055C  0C41 0008               1834                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000560  6E00 007A               1835                  BGT     error_bad_entry
00000564                          1836                  ;BGT     error_to_many_char
00000564  6000 0002               1837                  BRA     parse_each        
00000568                          1838  
00000568                          1839  *parse each analyzes each ind character entered
00000568                          1840  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000568                          1841  
00000568  1419                    1842  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000056A  B405                    1843                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000056C  6700 0058               1844                  BEQ     parse_complete  end of user input
00000570  B43C 0066               1845                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000574  6E00 0012               1846                  BGT     hex_compare
00000578                          1847                  
00000578                          1848                  *-
00000578                          1849                  *Comapare the decimal number values betyween 0 -9 first
00000578                          1850                  *
00000578                          1851                  *-
00000578  B43C 002F               1852  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000057C                          1853                                      *-for decimal values between [47, 57] are valid
0000057C  6F00 0056               1854                  BLE     error_char 
00000580  B43C 003A               1855                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000584  6D00 0022               1856                  BLT     dec_convert
00000588                          1857                  *-
00000588                          1858                  *there are no number values, lets check alpha characters
00000588                          1859                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000588                          1860                  *->71 'G' then we should go and convert to hex range A-F
00000588                          1861                  *-UPPER case
00000588                          1862                  *-      
00000588  B43C 0041               1863  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000058C  6D00 0046               1864                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000590  B43C 0047               1865                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000594  6D00 001C               1866                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000598  B43C 0061               1867  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000059C  6D00 0036               1868                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000005A0  B43C 0067               1869                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000005A4  6D00 0016               1870                  BLT     lower_ascii
000005A8                          1871                  
000005A8                          1872           
000005A8  0402 0030               1873  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000005AC                          1874                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000005AC  E986                    1875                  ASL.L   #4,D6
000005AE  DC02                    1876                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005B0  60B6                    1877                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005B2                          1878                                      *- 97 - 103
000005B2                          1879                  
000005B2                          1880                              
000005B2                          1881  *- ASCII conversions UPPER case to hex value by substracting 55
000005B2                          1882  
000005B2  0402 0037               1883  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005B6  E986                    1884                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005B8  DC02                    1885                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005BA  60AC                    1886                  BRA     parse_each  parse next item
000005BC                          1887  *-ASCI lower case to hex value by subtracting 87
000005BC  0402 0057               1888  lower_ascii     SUBI.B  #87,D2
000005C0  E986                    1889                  ASL.L   #4,D6
000005C2  DC02                    1890                  ADD.B   D2,D6
000005C4  60A2                    1891                  BRA     parse_each
000005C6                          1892  
000005C6  7801                    1893  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005C8  4E75                    1894                  RTS             JUMP FROM SUBROUTINE                
000005CA  43F9 0000069A           1895  error_no_input  LEA no_entry,A1 load bad entry statment
000005D0  7001                    1896                  MOVE.L  #1,D0
000005D2  4E4F                    1897                  TRAP    #15
000005D4                          1898                  ;JMP     get_input
000005D4  43F9 000006C2           1899  error_char      LEA bad_char,A1
000005DA  4E4F                    1900                  trap #15
000005DC                          1901                  ;JMP get_input0
000005DC  43F9 000006AD           1902  error_bad_entry LEA bad_entry,A1
000005E2  4E4F                    1903                  TRAP #15
000005E4                          1904                  ;JMP  get_input
000005E4                          1905  
000005E4                          1906  
000005E4  FFFF FFFF               1907      SIMHALT             ; halt simulator
000005E8                          1908  
000005E8                          1909  * Put variables and constants here
000005E8= 48 65 6C 6C 6F 20 ...   1910  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000624                          1911  
00000624                          1912  
00000624                          1913  good_code_buffer    DS.B    88
0000067C                          1914  
0000067C                          1915  bad_code_buffer     DS.B    30
0000069A= 4E 6F 20 45 6E 74 ...   1916  no_entry    DC.B    'No Entry detected.',0
000006AD= 42 61 64 20 45 6E ...   1917  bad_entry   DC.B    'Bad Entry Dectected.',0
000006C2= 42 61 64 20 43 68 ...   1918  bad_char    DC.B    'Bad Char detected.',0
000006D5                          1919  *-errors
000006D5                          1920  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006D5= 45 6E 74 65 72 20 ...   1921  enter_start_AD  DC.B    'Enter a starting address: ',0
000006F0                          1922  userStartAddrInput  DS.B    50  address used to store the data input from user
00000722                          1923  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000754                          1924  
00000754= 45 6E 74 65 72 20 ...   1925  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000789                          1926  
00000789                          1927  userEndInput    DS.B    50  addresse used to store the data input from user
000007BC  43F8 069A               1928  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007C0  7001                    1929                          MOVE.L  #1,D0
000007C2  4E4F                    1930                          TRAP    #15
000007C4                          1931                          ;JMP     get_input
000007C4                          1932  
000007C4                          1933  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007C4                          1934  
000007C4                          1935      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOULTELONG        1634
ABSOULTEWORD        15DA
ADDA_L              193C
ADDA_W              18B2
ADDRESSCOUNT        1054
ADD_B               1720
ADD_B_EA            19C6
ADD_L               182C
ADD_W               17A6
ADD_W_EA            1A5E
BAD_CHAR            6C2
BAD_CODE_BUFFER     67C
BAD_ENTRY           6AD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         578
DEC_CONVERT         5A8
ENTER_START_AD      6D5
ERROR_BAD_ENTRY     5DC
ERROR_CHAR          5D4
ERROR_INV_TO_MANY_CHAR  7BC
ERROR_NO_INPUT      5CA
FINISH              4D4
GET_0_3_BIT         1494
GET_3_5BIT          1494
GET_NEXT_INSTRUCTION  1066
GET_OPCODE          400
GOOD_CODE_BUFFER    624
HEXTOASCII          52C
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         588
HEX_D               D
HEX_E               E
HEX_F               F
IA000               1142
IA001               11A4
IA010               113E
IA011               1140
IA100               1264
IMMABTABLE          1116
IMMEDIATEDATA       15AE
JMP_TABLE           424
LF                  A
LOWER_ASCII         5BC
LOW_HEX_COMPARE     598
M0000               12D6
M0001               12E2
M0010               12EE
M0011               1302
M0100               131A
M0101               1332
M0110               1334
M0111               1336
MAINLOOP            1036
MODETABLE           1296
N0000               1434
N0001               143A
N0010               1440
N0011               1446
N0100               144C
N0101               1452
N0110               1458
N0111               145E
N1000               1464
N1001               146A
N1010               1470
N1011               1476
N1100               147C
N1101               1482
N1110               1488
N1111               148E
NO_ENTRY            69A
NUMTABLE            13B4
ONES                52C
OP0001              1514
OP0100              14B8
OP1101              16E4
OPERROR             1AF6
PARSE_COMPLETE      5C6
PARSE_EACH          568
PARSE_END           552
PARSE_INPUT         53C
PRINTCODE           1B5A
PRINT_WORD          10BC
REGISTERPRINT       1338
REGNUMTABLE         1344
RN0000              1384
RN0001              138A
RN0010              1390
RN0011              1396
RN0100              139C
RN0101              13A2
RN0110              13A8
RN0111              13AE
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
UPPER_ASCII         5B2
USEREND             754
USERENDADDRINPUT    722
USERENDINPUT        789
USERSTARTADDRINPUT  6F0
WELCOME_MESSAGE     5E8
WORDORLONG          14A0
WRITE_DATA_IN_D3_TO_BUFFER  10A6
_NOP                14C8
_RTS                14EE
