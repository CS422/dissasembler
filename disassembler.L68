00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2017-05-10 ¿ÀÀü 11:37:19

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  *--- Notes
00001000                            15  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            16  * A4 will be our main pointer to current memory address and current data
00001000                            17  * D3 will be dedicated register to manipulate our data in
00001000                            18  *
00001000                            19  *
00001000                            20  *---------
00001000                            21  START:                  
00001000                            22              ; first instruction of program
00001000                            23              ;LEA     stack,SP
00001000                            24              *-present the hello message
00001000  43F9 000005D8             25              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 26              MOVE.B  #14,D0
0000100A  4E4F                      27              TRAP    #15
0000100C                            28              
0000100C                            29             
0000100C                            30  *- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            31  
0000100C                            32  * Put program code here
0000100C                            33  *-----
0000100C                            34  *This program starts by given a starting address and an ending address disassemble
0000100C                            35  *the binary code that is at that location.
0000100C                            36  *
0000100C                            37  *
0000100C                            38  *----
0000100C                            39  
0000100C                            40  *-------
0000100C                            41  * Needs to check for odd addressing**
0000100C                            42  *
0000100C                            43  *
0000100C                            44  *-----
0000100C                            45                  *---------------------I/O SECTION
0000100C                            46                  * Grabs ascii from user and converts to hex stored into memory
0000100C                            47                  * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            48                  * statically in memory and retrieved when needed to compare
0000100C                            49                  * this free's up a adress/data register to use
0000100C                            50                  *-----------------------
0000100C                            51  get_input_start_addr 
0000100C  267C 00000000             52                  MOVE.L  #0,A3
00001012  4241                      53                  CLR     D1
00001014  43F9 000006C5             54                  LEA     enter_start_AD,A1
0000101A  700E                      55                  MOVE.L  #14,D0
0000101C  4E4F                      56                  TRAP    #15
0000101E                            57                  
0000101E                            58                  
0000101E                            59  
0000101E                            60        
0000101E  43F9 000006E0             61                  LEA     userStartAddrInput,A1   load address to store the input from user
00001024  7002                      62                  MOVE.L  #2,D0
00001026  4E4F                      63                  TRAP    #15
00001028  4EB9 0000052C             64                  JSR     parse_input         parse the starting address
0000102E                            65                  
0000102E                            66                  
0000102E  2A46                      67                  MOVE.L  D6,A5   MOVE OUR STARTING ADDRESS TO A6
00001030                            68                  
00001030                            69                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
00001030                            70                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
00001030                            71  
00001030                            72  
00001030                            73  get_input_end_addr
00001030  267C 00000000             74                  MOVE.L  #0,A3
00001036  4241                      75                  CLR     D1
00001038  43F9 00000744             76                  LEA     userEnd,A1
0000103E  700E                      77                  MOVE.L  #14,D0
00001040  4E4F                      78                  TRAP    #15
00001042                            79                  
00001042                            80  
00001042                            81  
00001042  43F9 00000712             82                  LEA     userEndAddrInput,A1
00001048  1239 00000744             83                  MOVE.B  userEnd,D1
0000104E  7002                      84                  MOVE.L  #2,D0
00001050  4E4F                      85                  TRAP    #15
00001052  4EB9 00000542             86                  JSR     parse_end
00001058                            87  
00001058                            88                  
00001058  2C46                      89                  MOVE.L  D6,A6   MOVE OUT ENDING ADDRESS TO A7
0000105A                            90    
0000105A                            91               
0000105A                            92  STORE_SRT_END:
0000105A                            93                 
0000105A                            94                        ;store the starting and ending address into memory out of range
0000105A  9C4D                      95              SUB.W   A5,D6   SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000105C  23CD 00FFFF00             96              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001062  23CE 00FFFF10             97              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001068  23C6 00FFFF20             98              MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000106E  284D                      99              MOVE.L  A5,A4
00001070  6000 0032                100              BRA get_next_instruction
00001074                           101                           
00001074                           102     
00001074                           103  *---move_addresses:
00001074                           104                                  
00001074                           105                  *-MOVE 2 INTO DATA REG
00001074                           106                  
00001074                           107                  ;JSR     LOOP
00001074                           108                  *----LEA     good_code_buffer,a2 ;load the code buffer
00001074                           109                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO A0
00001074                           110                  *----MOVE.W  A4,A0
00001074                           111                  
00001074                           112                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
00001074                           113                  *----MOVE.B  #2,D4
00001074                           114                  
00001074                           115                  *-MOVE OLD ADDRESS TO DATA REGISTER
00001074                           116                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
00001074                           117                  *------MOVE.L  D3,D7
00001074                           118                  
00001074                           119  
00001074                           120  
00001074                           121  
00001074                           122                  *------LEA     good_code_buffer,A2 load again
00001074                           123                  *------JSR     print_d3
00001074                           124                  
00001074                           125                  
00001074                           126                  ;JSR     get_opcode 
00001074                           127  
00001074                           128                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
00001074                           129                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
00001074                           130                  ;SIMHALT
00001074                           131  
00001074                           132  
00001074                           133  * ---------------------------------------------------------- 
00001074                           134  * Decode ---------------------------------------------------
00001074  49F8 7000                135              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001078  6000 002A                136              BRA     get_next_instruction    ;put data in D3, incre. A4
0000107C                           137       
0000107C                           138  mainLoop          
0000107C                           139              *-----
0000107C                           140              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
0000107C                           141              *- listing of finished and un finished work
0000107C                           142              *-          ***Machine Code saved in D6*****
0000107C                           143              *-----
0000107C                           144  
0000107C  E84B                     145              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
0000107E                           146              
0000107E                           147              ;compare bits to instructions
0000107E                           148              
0000107E  B63C 0001                149              CMP.B   #bin0001,D3 ;MOVE.B
00001082                           150              *- Machine code saved in D6
00001082  6700 0316                151              BEQ     op0001      ;branch to op0001
00001086                           152              ;CMP.B   #bin0011,D3 ;MOVE.W
00001086                           153              ;BEQ     op0011      ;branch to op0011
00001086                           154              ;CMP.B   #bin0010,D3 ;MOVE.L 
00001086                           155              ;BEQ     op0010      ;branch to op0010           
00001086                           156              ;CMP.B   #bin0111,D3 ;MOVEQ
00001086                           157              ;BEQ     op0111      ;branch to op0111                        
00001086  B63C 0004                158              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
0000108A  6700 02B2                159              BEQ     op0100          branch to op0100                        
0000108E                           160              ;CMP.B   #bin1101,D3 ;ADD, ADDA
0000108E                           161              ;BEQ     op1101      ;branch to op1101            
0000108E                           162              ;CMP.B   #bin1001,D3 ;SUB, SUBA
0000108E                           163              ;BEQ     op1001      ;branch to op1001                        
0000108E                           164              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
0000108E                           165              ;BEQ     op0000      ;branch to op0000                       
0000108E                           166              ;CMP.B   #bin0101,D3 ;SUBQ
0000108E                           167              ;BEQ     op0101      ;branch to op0101                         
0000108E                           168              ;CMP.B   #bin0110,D3 ;Bcc
0000108E                           169              ;BEQ     op0110      ;branch to op0110            
0000108E                           170              ;CMP.B   #bin1000,D3 ;DIVU.W
0000108E                           171              ;BEQ     op1000      ;branch to op1000                                      
0000108E                           172              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
0000108E                           173              ;BEQ     op1011      ;branch to op1011 
0000108E                           174              ;CMP.B   #bin1100,D3 ;AND, MULS.W
0000108E                           175              ;BEQ     op1100      ;branch to op1100                                    
0000108E                           176              ;CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
0000108E                           177              ;BEQ     op1110      ;branch to op1110            
0000108E                           178              
0000108E  6000 0390                179              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001092                           180              
00001092                           181              ;branch to display opError display
00001092                           182              
00001092                           183              ;print all the things...
00001092                           184   *******************************************************************************
00001092                           185  *
00001092                           186  *******************************************************************************
00001092                           187  addressCount 
00001092                           188              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001092                           189              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001092                           190              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001092                           191              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001092                           192              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001092                           193              
00001092  4BF9 00FFFF10            194              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
00001098  2215                     195              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000109A  2A0C                     196              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000109C  B285                     197              CMP.L   D5,D1       * COMPARE THE ADDRESSES
0000109E  6F00 F434                198              BLE     FINISH      * branch to end if ending address reached
000010A2  4E75                     199              RTS                 * return IF WE HAVE NOT FINISHED
000010A4                           200              
000010A4                           201  get_next_instruction:
000010A4  4EB8 1092                202                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
000010A8                           203                  *-line count
000010A8  4245                     204                  CLR D5             *-CLEAR THIS REGISTER/
000010AA  45F9 00000614            205                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
000010B0  304C                     206                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
000010B2  7E02                     207                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
000010B4  2608                     208                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
000010B6  2C03                     209                  MOVE.L  D3,D6   
000010B8  45F9 00000614            210                  LEA     good_code_buffer,A2
000010BE                           211                                  *-write the current data moved to data register d3
000010BE  4EB9 000010E0            212                  JSR     write_data_in_D3_to_buffer
000010C4                           213                  
000010C4  14BC 0020                214                  MOVE.B  #' ',(A2)
000010C8  14BC 0020                215                  MOVE.B  #' ',(A2)
000010CC  14BC 0020                216                  MOVE.B  #' ',(A2)
000010D0  14BC 0020                217                  MOVE.B  #' ',(A2)
000010D4                           218                  
000010D4  4286                     219                  CLR.L   D6
000010D6  4283                     220                  CLR.L   D3
000010D8                           221                  
000010D8  3C1C                     222                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010DA                           223                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010DA  3606                     224                  MOVE.W  D6,D3
000010DC  E04B                     225                  LSR.W   #8,D3
000010DE                           226                  
000010DE  609C                     227                  BRA     mainLoop
000010E0                           228                  
000010E0                           229  write_data_in_D3_to_buffer:
000010E0                           230              *------
000010E0                           231              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010E0                           232              *
000010E0                           233              *
000010E0                           234              *---------
000010E0  BE7C 0002                235                  CMP.W   #2,D7 ERROR checking
000010E4  6600 0010                236                  BNE     print_word branch off to write the first word of the line
000010E8  4843                     237                  SWAP    D3
000010EA  4846                     238                  SWAP    D6
000010EC  4EB9 000010F6            239                  JSR     print_word
000010F2  4846                     240                  SWAP    D6
000010F4  2606                     241                  MOVE.L  D6,D3
000010F6                           242                  
000010F6                           243   print_word:
000010F6                           244                  *-****
000010F6                           245                  * called 4 times to decode from hex to ascii the first word 
000010F6                           246                  *   using the below jump table
000010F6                           247                  *
000010F6                           248                  *-------
000010F6  E04B                     249                  LSR.W   #8,D3
000010F8  E84B                     250                  LSR.W   #4,D3
000010FA  C6FC 0008                251                  MULU.W  #8,D3
000010FE  4DF9 0000125E            252                  LEA     numTable,A6
00001104  4EB6 3000                253                  JSR     (A6,D3)
00001108                           254                  
00001108  3606                     255                  MOVE.W  D6,D3   COPY DATA
0000110A  E94B                     256                  LSL.W   #4,D3
0000110C  E04B                     257                  LSR.W   #8,D3
0000110E  E84B                     258                  LSR.W   #4,D3
00001110  C6FC 0008                259                  MULU.W  #8,D3
00001114  4DF9 0000125E            260                  LEA     numTable,A6
0000111A  4EB6 3000                261                  JSR     (A6,D3)
0000111E                           262                  
0000111E  3606                     263                  MOVE.W  D6,D3
00001120                           264                  
00001120  E14B                     265                  LSL.W   #8,D3
00001122  E04B                     266                  LSR.W   #8,D3
00001124  E84B                     267                  LSR.W   #4,D3
00001126  C6FC 0008                268                  MULU.W  #8,D3
0000112A  4DF9 0000125E            269                  LEA numTable,A6
00001130  4EB6 3000                270                  JSR     (A6,D3)
00001134                           271                  
00001134                           272                  
00001134  3606                     273                  MOVE.W  D6,D3
00001136  E94B                     274                  LSL.W   #4,D3
00001138  E14B                     275                  LSL.W   #8,D3
0000113A  E04B                     276                  LSR.W   #8,D3
0000113C  E84B                     277                  LSR.W   #4,D3
0000113E  C6FC 0008                278                  MULU.W  #8,D3
00001142  4DF9 0000125E            279                  LEA     numTable,A6
00001148  4EB6 3000                280                  JSR     (A6,D3)
0000114C  5805                     281                  ADDI.B  #4,D5
0000114E  4E75                     282                  RTS
00001150                           283                  
00001150                           284  * -----------------------------------------------------------            
00001150                           285  * Jump Table modeTable ***************************************
00001150                           286  *** matches the associated Addressing mode     
00001150                           287  *************************************************************
00001150  4EB9 00001180            288  modeTable   JSR     M0000   ;Dn, Data Register 
00001156  4E75                     289              RTS             ;return, done printing
00001158  4EB9 0000118C            290              JSR     M0001   ;An, Address Register 
0000115E  4E75                     291              RTS             ;return, done printing
00001160  4EB9 00001198            292              JSR     M0010   ;(An), Address
00001166  4E75                     293              RTS             ;return, done printing
00001168  4EB9 000011AC            294              JSR     M0011   ;(An)+, Address with Postincrement
0000116E  4E75                     295              RTS             ;return, done printing
00001170  4EB9 000011C4            296              JSR     M0100   ;-(An), Address with Predecrement
00001176  4E75                     297              RTS             ;return, done printing
00001178  4EB9 000011DC            298              JSR     M0111   ;(xxx).W, (xxx).L, #imm
0000117E  4E75                     299              RTS             ;return, done printing           
00001180                           300  * -----------------------------------------------------------            
00001180                           301  * Subroutine M0000 ------------------------------------------
00001180                           302  M0000                               ;Dn
00001180  14FC 0044                303              MOVE.B  #'D',(A2)+      ;display D
00001184  264A                     304              MOVEA.L A2,A3           ;get address for n
00001186  14FC 0020                305              MOVE.B  #' ',(A2)+      ;blank
0000118A  4E75                     306              RTS
0000118C                           307  
0000118C                           308  * -----------------------------------------------------------            
0000118C                           309  * Subroutine M0001 ------------------------------------------
0000118C                           310  M0001                               ;An
0000118C  14FC 0041                311              MOVE.B  #'A',(A2)+      ;display A
00001190  264A                     312              MOVEA.L A2,A3           ;get address for n
00001192  14FC 0020                313              MOVE.B  #' ',(A2)+      ;blank
00001196  4E75                     314              RTS
00001198                           315  
00001198                           316  * -----------------------------------------------------------            
00001198                           317  * Subroutine M0010 ------------------------------------------
00001198                           318  M0010                               ;(An) Address
00001198  14FC 0028                319              MOVE.B  #'(',(A2)+      ;display (
0000119C  14FC 0041                320              MOVE.B  #'A',(A2)+      ;display A
000011A0  264A                     321              MOVEA.L A2,A3           ;get address for n
000011A2  14FC 0020                322              MOVE.B  #' ',(A2)+      ;blank      
000011A6  14FC 0029                323              MOVE.B  #')',(A2)+      ;display )
000011AA  4E75                     324              RTS
000011AC                           325   
000011AC                           326  * -----------------------------------------------------------            
000011AC                           327  * Subroutine M0011 ------------------------------------------
000011AC                           328  M0011                               ;(An)+ 
000011AC  14FC 0028                329              MOVE.B  #'(',(A2)+      ;display (
000011B0  14FC 0041                330              MOVE.B  #'A',(A2)+      ;display A
000011B4  264A                     331              MOVEA.L A2,A3           ;get address for n 
000011B6  14FC 0020                332              MOVE.B  #' ',(A2)+      ;blank     
000011BA  14FC 0029                333              MOVE.B  #')',(A2)+      ;display )
000011BE  14FC 002B                334              MOVE.B  #'+',(A2)+      ;display +
000011C2  4E75                     335              RTS
000011C4                           336  
000011C4                           337  
000011C4                           338  * -----------------------------------------------------------            
000011C4                           339  * Subroutine M0100 ------------------------------------------
000011C4                           340  M0100                               ;-(An)
000011C4  14FC 002D                341              MOVE.B  #'-',(A2)+      ;display -
000011C8  14FC 0028                342              MOVE.B  #'(',(A2)+      ;display (
000011CC  14FC 0041                343              MOVE.B  #'A',(A2)+      ;display A
000011D0  264A                     344              MOVEA.L A2,A3           ;get address for n
000011D2  14FC 0020                345              MOVE.B  #' ',(A2)+      ;blank      
000011D6  14FC 0029                346              MOVE.B  #')',(A2)+      ;display )
000011DA  4E75                     347              RTS
000011DC                           348  
000011DC                           349  
000011DC                           350  * -----------------------------------------------------------            
000011DC                           351  * Subroutine M0111 -------------------------Not finished-----
000011DC                           352  M0111                               ;(xxx).W, (xxx).L, #imm
000011DC  14FC 0037                353              MOVE.B  #'7',(A2)+      ;display 7
000011E0  4E75                     354              RTS
000011E2                           355  
000011E2                           356  * -----------------------------------------------------------
000011E2                           357  * Subroutine registerPrint----------------------------------- 
000011E2                           358  registerPrint
000011E2  4FF9 0000125E            359              LEA     numTable,A7 Load the table into A7
000011E8  4EB7 1000                360              JSR     (A7,D1)     Jump to numTable with value at D1
000011EC  4E75                     361              RTS
000011EE                           362  
000011EE                           363  * -----------------------------------------------------------            
000011EE                           364  * Jump Table regNumTable ***************************************
000011EE                           365  *** prints the associated number of the register            *
000011EE                           366  *** Also prints hex values for data and addresses           *
000011EE                           367  *-----see below for decoding of what these sub-routines are
000011EE                           368  *************************************************************
000011EE  4EB9 0000122E            369  regNumTable JSR     RN0000   ;register 0
000011F4  4E75                     370              RTS             ;return, done printing
000011F6  4EB9 00001234            371              JSR     RN0001   ;register 1
000011FC  4E75                     372              RTS             ;return, done printing
000011FE  4EB9 0000123A            373              JSR     RN0010   ;register 2
00001204  4E75                     374              RTS             ;return, done printing
00001206  4EB9 00001240            375              JSR     RN0011   ;register 3
0000120C  4E75                     376              RTS             ;return, done printing
0000120E  4EB9 00001246            377              JSR     RN0100   ;register 4
00001214  4E75                     378              RTS             ;return, done printing
00001216  4EB9 0000124C            379              JSR     RN0101   ;register 5
0000121C  4E75                     380              RTS             ;return, done printing
0000121E  4EB9 00001252            381              JSR     RN0110   ;register 6
00001224  4E75                     382              RTS             ;return, done printing
00001226  4EB9 00001258            383              JSR     RN0111   ;register 7
0000122C  4E75                     384              RTS             ;return, done printing
0000122E                           385  * -----------------------------------------------------------            
0000122E                           386  * Subroutine RN0000 ------------------------------------------
0000122E                           387  RN0000
0000122E  16BC 0030                388              MOVE.B  #'0',(A3)      ;display 0
00001232  4E75                     389              RTS
00001234                           390  
00001234                           391  * -----------------------------------------------------------            
00001234                           392  * Subroutine RN0001 ------------------------------------------
00001234                           393  RN0001
00001234  16BC 0031                394              MOVE.B  #'1',(A3)      ;display 1
00001238  4E75                     395              RTS
0000123A                           396  
0000123A                           397  * -----------------------------------------------------------            
0000123A                           398  * Subroutine RN0010 ------------------------------------------
0000123A                           399  RN0010
0000123A  16BC 0032                400              MOVE.B  #'2',(A3)      ;display 2
0000123E  4E75                     401              RTS
00001240                           402   
00001240                           403  * -----------------------------------------------------------            
00001240                           404  * Subroutine RN0011 ------------------------------------------
00001240                           405  RN0011
00001240  16BC 0033                406              MOVE.B  #'3',(A3)      ;display 3
00001244  4E75                     407              RTS
00001246                           408  
00001246                           409  * -----------------------------------------------------------            
00001246                           410  * Subroutine RN0100 ------------------------------------------
00001246                           411  RN0100
00001246  16BC 0034                412              MOVE.B  #'4',(A3)      ;display 4
0000124A  4E75                     413              RTS
0000124C                           414  
0000124C                           415  * -----------------------------------------------------------            
0000124C                           416  * Subroutine RN0101 ------------------------------------------
0000124C                           417  RN0101
0000124C  16BC 0035                418              MOVE.B  #'5',(A3)      ;display 5
00001250  4E75                     419              RTS
00001252                           420  
00001252                           421  * -----------------------------------------------------------            
00001252                           422  * Subroutine RN0110 ------------------------------------------
00001252                           423  RN0110
00001252  16BC 0036                424              MOVE.B  #'6',(A3)      ;display 6
00001256  4E75                     425              RTS
00001258                           426              
00001258                           427  * -----------------------------------------------------------            
00001258                           428  * Subroutine RN0111 ------------------------------------------
00001258                           429  RN0111
00001258  16BC 0037                430              MOVE.B  #'7',(A3)      ;display 7
0000125C  4E75                     431              RTS
0000125E                           432  
0000125E                           433  * -----------------------------------------------------------            
0000125E                           434  * Jump Table numTable ***************************************
0000125E                           435  *** prints the associated number of the register            *
0000125E                           436  *** Also prints hex values for data and addresses           *
0000125E                           437  *-----see below for decoding of what these sub-routines are
0000125E                           438  *************************************************************
0000125E  4EB9 000012DE            439  numTable    JSR     N0000   ;register 0
00001264  4E75                     440              RTS             ;return, done printing
00001266  4EB9 000012E4            441              JSR     N0001   ;register 1
0000126C  4E75                     442              RTS             ;return, done printing
0000126E  4EB9 000012EA            443              JSR     N0010   ;register 2
00001274  4E75                     444              RTS             ;return, done printing
00001276  4EB9 000012F0            445              JSR     N0011   ;register 3
0000127C  4E75                     446              RTS             ;return, done printing
0000127E  4EB9 000012F6            447              JSR     N0100   ;register 4
00001284  4E75                     448              RTS             ;return, done printing
00001286  4EB9 000012FC            449              JSR     N0101   ;register 5
0000128C  4E75                     450              RTS             ;return, done printing
0000128E  4EB9 00001302            451              JSR     N0110   ;register 6
00001294  4E75                     452              RTS             ;return, done printing
00001296  4EB9 00001308            453              JSR     N0111   ;register 7
0000129C  4E75                     454              RTS             ;return, done printing
0000129E  4EB9 0000130E            455              JSR     N1000   ;num 8
000012A4  4E75                     456              RTS             ;return, done printing
000012A6  4EB9 00001314            457              JSR     N1001   ;num 9
000012AC  4E75                     458              RTS             ;return, done printing
000012AE  4EB9 0000131A            459              JSR     N1010   ;num A
000012B4  4E75                     460              RTS             ;return, done printing
000012B6  4EB9 00001320            461              JSR     N1011   ;num B
000012BC  4E75                     462              RTS             ;return, done printing
000012BE  4EB9 00001326            463              JSR     N1100   ;num C
000012C4  4E75                     464              RTS             ;return, done printing
000012C6  4EB9 0000132C            465              JSR     N1101   ;num D
000012CC  4E75                     466              RTS             ;return, done printing
000012CE  4EB9 00001332            467              JSR     N1110   ;num E
000012D4  4E75                     468              RTS             ;return, done printing
000012D6  4EB9 00001338            469              JSR     N1111   ;num F
000012DC  4E75                     470              RTS             ;return, done printing
000012DE                           471  * -----------------------------------------------------------            
000012DE                           472  * Subroutine N0000 ------------------------------------------
000012DE                           473  N0000
000012DE  14FC 0030                474              MOVE.B  #'0',(A2)+      ;display 0
000012E2  4E75                     475              RTS
000012E4                           476  
000012E4                           477  * -----------------------------------------------------------            
000012E4                           478  * Subroutine N0001 ------------------------------------------
000012E4                           479  N0001
000012E4  14FC 0031                480              MOVE.B  #'1',(A2)+      ;display 1
000012E8  4E75                     481              RTS
000012EA                           482  
000012EA                           483  * -----------------------------------------------------------            
000012EA                           484  * Subroutine N0010 ------------------------------------------
000012EA                           485  N0010
000012EA  14FC 0032                486              MOVE.B  #'2',(A2)+      ;display 2
000012EE  4E75                     487              RTS
000012F0                           488   
000012F0                           489  * -----------------------------------------------------------            
000012F0                           490  * Subroutine N0011 ------------------------------------------
000012F0                           491  N0011
000012F0  14FC 0033                492              MOVE.B  #'3',(A2)+      ;display 3
000012F4  4E75                     493              RTS
000012F6                           494  
000012F6                           495  * -----------------------------------------------------------            
000012F6                           496  * Subroutine N0100 ------------------------------------------
000012F6                           497  N0100
000012F6  14FC 0034                498              MOVE.B  #'4',(A2)+      ;display 4
000012FA  4E75                     499              RTS
000012FC                           500  
000012FC                           501  * -----------------------------------------------------------            
000012FC                           502  * Subroutine N0101 ------------------------------------------
000012FC                           503  N0101
000012FC  14FC 0035                504              MOVE.B  #'5',(A2)+      ;display 5
00001300  4E75                     505              RTS
00001302                           506  
00001302                           507  * -----------------------------------------------------------            
00001302                           508  * Subroutine N0110 ------------------------------------------
00001302                           509  N0110
00001302  14FC 0036                510              MOVE.B  #'6',(A2)+      ;display 6
00001306  4E75                     511              RTS
00001308                           512              
00001308                           513  * -----------------------------------------------------------            
00001308                           514  * Subroutine N0111 ------------------------------------------
00001308                           515  N0111
00001308  14FC 0037                516              MOVE.B  #'7',(A2)+      ;display 7
0000130C  4E75                     517              RTS
0000130E                           518  
0000130E                           519  * ----------------------------------------------------------- 
0000130E                           520  * Subroutine N1000 ------------------------------------------
0000130E                           521  N1000       
0000130E  14FC 0038                522              MOVE.B  #'8',(A2)+      ;display 8
00001312  4E75                     523              RTS
00001314                           524  
00001314                           525  * -----------------------------------------------------------            
00001314                           526  * Subroutine N1001 ------------------------------------------
00001314                           527  N1001   
00001314  14FC 0039                528              MOVE.B  #'9',(A2)+      ;display 9
00001318  4E75                     529              RTS
0000131A                           530  
0000131A                           531  * -----------------------------------------------------------            
0000131A                           532  * Subroutine N1010 ------------------------------------------
0000131A                           533  N1010   
0000131A  14FC 0041                534              MOVE.B  #'A',(A2)+      ;display A
0000131E  4E75                     535              RTS
00001320                           536  
00001320                           537  * -----------------------------------------------------------            
00001320                           538  * Subroutine N1011 ------------------------------------------
00001320                           539  N1011   
00001320  14FC 0042                540              MOVE.B  #'B',(A2)+      ;display B
00001324  4E75                     541              RTS
00001326                           542  
00001326                           543  * -----------------------------------------------------------            
00001326                           544  * Subroutine N1100 ------------------------------------------
00001326                           545  N1100   
00001326  14FC 0043                546              MOVE.B  #'C',(A2)+      ;display C
0000132A  4E75                     547              RTS
0000132C                           548  
0000132C                           549  * -----------------------------------------------------------            
0000132C                           550  * Subroutine N1101 ------------------------------------------
0000132C                           551  N1101   
0000132C  14FC 0044                552              MOVE.B  #'D',(A2)+      ;display D
00001330  4E75                     553              RTS
00001332                           554  
00001332                           555  * -----------------------------------------------------------            
00001332                           556  * Subroutine N1110 ------------------------------------------
00001332                           557  N1110   
00001332  14FC 0045                558              MOVE.B  #'E',(A2)+      ;display E
00001336  4E75                     559              RTS
00001338                           560  
00001338                           561  * -----------------------------------------------------------            
00001338                           562  * Subroutine N1111 ------------------------------------------
00001338                           563  N1111   
00001338  14FC 0046                564              MOVE.B  #'F',(A2)+      ;display F
0000133C  4E75                     565              RTS   
0000133E                           566              
0000133E                           567              
0000133E                           568              
0000133E                           569              *---------------------------------------------------------------
0000133E                           570              *--------------------------------------------------------
0000133E                           571              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
0000133E                           572              *-------------------------------------
0000133E                           573              INCLUDE 'op0100.x68'    IN a different file, modulated design        
0000133E                           574  op0100      
0000133E                           575  
0000133E                           576  
0000133E                           577   
0000133E                           578              ;CMP.W   #$4EB9,D6   ;see if it's a JSR
0000133E                           579              ;BEQ     jumpToRt            
0000133E                           580              ;CMP.W   #$4E75,D6   ;see if it's a RTS
0000133E                           581              ;BEQ     returnRt 
0000133E                           582             
0000133E                           583              ;JSR     WorL        
0000133E                           584              ;CMP.B   #hex7,D3    ;see if it's a LEA
0000133E                           585              ;BEQ     _lea        ;branch 
0000133E                           586              
0000133E                           587              ;JSR     clrORmm       
0000133E                           588              ;CMP.B   #hex8,D3    ;see if it's a CLR.B
0000133E                           589              ;BEQ     _clrB       ;branch             
0000133E                           590              ;CMP.B   #hex9,D3    ;see if it's a CLR.W
0000133E                           591              ;BEQ     _clrW       ;branch   
0000133E                           592              ;CMP.B   #hexA,D3    ;see if it's a CLR.L
0000133E                           593              ;BEQ     _clrL       ;branch
0000133E                           594    
0000133E                           595              ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
0000133E                           596              ;BEQ     _movemW     ;branch   
0000133E                           597              ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
0000133E                           598              ;BEQ     _movemL     ;branch              
0000133E                           599                          
0000133E                           600              ;BRA     opError     ;bad opcode branch to error
0000133E                           601              
0000133E                           602              
0000133E  BC7C 4E71                603              CMP.W   #$4E71,D6
00001342  6700 000A                604              BEQ     _NOP
00001346                           605              
00001346  BC7C 4E75                606              CMP.W   #$4E75,D6   ;see if it's a RTS
0000134A  6700 0028                607              BEQ     _RTS        branch to RTS
0000134E                           608             
0000134E                           609  
0000134E                           610              
0000134E                           611  _NOP
0000134E  7E02                     612              MOVE.L  #2,D7       ;data is not error
00001350  14FC 0020                613              MOVE.B  #' ',(A2)+      ;print spaces
00001354  14FC 0020                614              MOVE.B  #' ',(A2)+      ;print spaces
00001358  14FC 0020                615              MOVE.B  #' ',(A2)+      ;print spaces
0000135C  14FC 0020                616              MOVE.B  #' ',(A2)+      ;print spaces
00001360  14FC 004E                617              MOVE.B  #'N',(A2)+      ;print N
00001364  14FC 004F                618              MOVE.B  #'O',(A2)+      ;print O
00001368  14FC 0050                619              MOVE.B  #'P',(A2)+      ;print P
0000136C  1A3C 0003                620              MOVE.B  #3,D5           ;counter for output
00001370  6000 0112                621              BRA     printCode
00001374                           622  
00001374                           623  _RTS    
00001374  7E02                     624              MOVE.L  #2,D7       ;data is not error
00001376  14FC 0020                625              MOVE.B  #' ',(A2)+      ;print spaces
0000137A  14FC 0020                626              MOVE.B  #' ',(A2)+      ;print spaces
0000137E  14FC 0020                627              MOVE.B  #' ',(A2)+      ;print spaces
00001382  14FC 0020                628              MOVE.B  #' ',(A2)+      ;print spaces
00001386  14FC 0052                629              MOVE.B  #'R',(A2)+      ;print R
0000138A  14FC 0054                630              MOVE.B  #'T',(A2)+      ;print T
0000138E  14FC 0053                631              MOVE.B  #'S',(A2)+      ;print S
00001392  1A3C 0003                632              MOVE.B  #3,D5           ;counter for output
00001396  6000 00EC                633              BRA     printCode
00001396  6000 00EC                634  -------------------- end include --------------------
0000139A                           635              INCLUDE 'op0001.x68'    MOVE.b Differetn file
0000139A                           636  
0000139A                           637  
0000139A                           638  
0000139A                           639  
0000139A                           640  op0001
0000139A  7E02                     641              MOVE.L  #2,D7       ;data is not error
0000139C  14FC 0020                642              MOVE.B  #' ',(A2)+      ;print spaces
000013A0  14FC 0020                643              MOVE.B  #' ',(A2)+      ;print spaces
000013A4  14FC 0020                644              MOVE.B  #' ',(A2)+      ;print spaces
000013A8  14FC 0020                645              MOVE.B  #' ',(A2)+      ;print spaces
000013AC  14FC 004D                646              MOVE.B  #'M',(A2)+      ;print M
000013B0  14FC 004F                647              MOVE.B  #'O',(A2)+      ;print O
000013B4  14FC 0056                648              MOVE.B  #'V',(A2)+      ;print V
000013B8  14FC 0045                649              MOVE.B  #'E',(A2)+      PRINT  E
000013BC  14FC 002E                650              MOVE.B  #'.',(A2)+
000013C0  14FC 0042                651              MOVE.B  #'B',(A2)+
000013C4                           652  
000013C4  4242                     653              CLR     D2
000013C6  4241                     654              CLR     D1
000013C8  3406                     655              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
000013CA  EF4A                     656              LSL.W   #7,D2       BIT* **** **** 0000
000013CC  E04A                     657              LSR.W   #8,D2       0000 0000 BIT* ****
000013CE  EA4A                     658              LSR.W   #5,D2       0000 0000 0000 0BIT 
000013D0  C4FC 0008                659              MULU    #8,D2       value adjusted for jumping
000013D4  4DF8 1150                660              LEA     modeTable,A6 Load the table into A6
000013D8  4EB6 2000                661              JSR     (A6,D2)     Jump to subroutine of value at D2
000013DC                           662             
000013DC  2206                     663              MOVE.L  D6,D1       MOVE the original machine code to D1 to play with
000013DE  E949                     664              LSL.W   #4,D1       BIT* **** **** 0000
000013E0  E049                     665              LSR.W   #8,D1       0000 0000 BIT* ****
000013E2  EA49                     666              LSR.W   #5,D1       0000 0000 0000 0BIT     
000013E4  C2FC 0008                667              MULU    #8,D1       value adjusted for jumping
000013E8  4FF8 11EE                668              LEA     regNumTable ,A7 Load the table into A7
000013EC  4EB7 1000                669              JSR     (A7,D1)     Jump to subroutine of value at D1    
000013F0  14FC 002C                670              MOVE.B  #',',(A2)+  comma between operands
000013F4  4242                     671              CLR     D2
000013F6  4241                     672              CLR     D1
000013F8  3406                     673              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
000013FA  E54A                     674              LSL.W   #2,D2       **** **** BIT* ***0
000013FC  EA4A                     675              LSR.W   #5,D2       **** **** 0000 0BIT
000013FE  C4FC 0008                676              MULU    #8,D2       value adjusted for jumping
00001402  4DF8 1150                677              LEA     modeTable,A6 Load the table into A6
00001406  4EB6 2000                678              JSR     (A6,D2)     Jump to subroutine of value at D0
0000140A                           679              
0000140A  3206                     680              MOVE.W  D6, D1      MOVE the original machine code to D1 to play with
0000140C  E309                     681              LSL.B   #1,D1       **** **** **** BIT0
0000140E  E209                     682              LSR.B   #1,D1       **** **** **** 0BIT      
00001410  C2FC 0008                683              MULU    #8,D1       value adjusted for jumping
00001414  4FF8 11EE                684              LEA     regNumTable ,A7 Load the table into A7
00001418  4EB7 1000                685              JSR     (A7,D1)     Jump to subroutine of value at D1
0000141C                           686  
0000141C                           687  
0000141C  6000 0066                688              BRA     printCode
00001420                           689  
00001420                           690  
00001420                           691  
00001420                           692  
00001420                           693  
00001420                           694  
00001420                           695  
00001420                           696  
00001420                           697  
00001420                           698  
00001420                           699  
00001420                           700  
00001420                           701  
00001420                           702  
00001420                           703  -------------------- end include --------------------
00001420                           704  
00001420                           705  
00001420                           706              
00001420                           707  opError                             
00001420  2608                     708              MOVE.L  A0,D3
00001422  2C03                     709              MOVE.L  D3,D6
00001424  45F9 0000066C            710              LEA     bad_code_buffer,A2
0000142A  7E02                     711              MOVE.L  #2,D7
0000142C  4EB8 10E0                712              JSR     write_data_in_D3_to_buffer
00001430                           713              
00001430  14FC 0020                714              MOVE.B  #' ',(A2)+      ;print spaces
00001434  14FC 0020                715              MOVE.B  #' ',(A2)+      ;print spaces
00001438  14FC 0020                716              MOVE.B  #' ',(A2)+      ;print spaces
0000143C  14FC 0020                717              MOVE.B  #' ',(A2)+      ;print spaces
00001440  14FC 0044                718              MOVE.B  #'D',(A2)+      ;print D
00001444  14FC 0041                719              MOVE.B  #'A',(A2)+      ;print A
00001448  14FC 0054                720              MOVE.B  #'T',(A2)+      ;print T
0000144C  14FC 0041                721              MOVE.B  #'A',(A2)+      ;print A
00001450  14FC 0020                722              MOVE.B  #' ',(A2)+      ;print spaces
00001454  14FC 0020                723              MOVE.B  #' ',(A2)+      ;print spaces
00001458  14FC 0020                724              MOVE.B  #' ',(A2)+      ;print spaces
0000145C  14FC 0020                725              MOVE.B  #' ',(A2)+      ;print spaces
00001460                           726              
00001460                           727              
00001460  14FC 0046                728              MOVE.B  #'F',(A2)+      ;print spaces
00001464  14FC 0046                729              MOVE.B  #'F',(A2)+      ;print spaces
00001468  14FC 0046                730              MOVE.B  #'F',(A2)+      ;print spaces
0000146C  14FC 0046                731              MOVE.B  #'F',(A2)+      ;print spaces
00001470                           732              
00001470                           733              
00001470                           734              ;MOVE.L  (A0),D3
00001470                           735              ;MOVE.L  D3,D6
00001470                           736              ;MOVE.L  #1,D7
00001470                           737              ;JSR     write_data_in_D3_to_buffer
00001470                           738              
00001470  14BC 0000                739              MOVE.B  #$00,(A2) * add NULL value to print string
00001474  43F9 0000066C            740              LEA     bad_code_buffer,A1
0000147A  103C 000D                741              MOVE.B  #13,D0
0000147E  4E4F                     742              TRAP    #15   
00001480                           743           
00001480  6000 FC22                744              BRA     get_next_instruction           
00001484                           745  printCode   
00001484  14BC 0000                746              MOVE.B  #$00,(A2)   * add NULL value to print string
00001488  070A 0000                747              MOVEP   (A2),D3
0000148C  43F9 00000614            748              LEA     good_code_buffer,A1 * load buffer for good code to print
00001492  700D                     749              MOVEQ   #13,D0
00001494  4E4F                     750              TRAP    #15         * display code
00001496                           751    
00001496  6000 FC0C                752              BRA     get_next_instruction                     
0000149A                           753  * OP Codes -------------------------------------------------
0000149A  =00000000                754  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
0000149A  =00000001                755  bin0001     EQU     %0001   ;MOVE.B
0000149A  =00000002                756  bin0010     EQU     %0010   ;MOVE.L
0000149A  =00000003                757  bin0011     EQU     %0011   ;MOVE.W
0000149A  =00000004                758  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
0000149A  =00000005                759  bin0101     EQU     %0101   ;SUBQ
0000149A  =00000006                760  bin0110     EQU     %0110   ;Bcc
0000149A  =00000007                761  bin0111     EQU     %0111   ;MOVEQ
0000149A  =00000008                762  bin1000     EQU     %1000   ;DIVU.W
0000149A  =00000009                763  bin1001     EQU     %1001   ;SUB, SUBA
0000149A  =0000000B                764  bin1011     EQU     %1011   ;CMP, CMPA, EOR
0000149A  =0000000C                765  bin1100     EQU     %1100   ;AND, MULS.W
0000149A  =0000000D                766  bin1101     EQU     %1101   ;ADD, ADDA
0000149A  =0000000E                767  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
0000149A                           768  
0000149A                           769  
0000149A                           770              
0000149A                           771  ;LOOP:
0000149A                           772                  *-compare the adress pointers current address with ending address to see if we need to continue
0000149A                           773                  *- load the address registrer (pointer/ this helps us look at data)
0000149A                           774                  *-load address register number into data register
0000149A                           775                  
0000149A                           776                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
0000149A                           777                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
0000149A                           778                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
0000149A                           779                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
0000149A                           780                  ;BEQ     FINISH      ;finish they are equal
0000149A                           781                  ;RTS
0000149A                           782  
0000149A                           783          
0000149A                           784          *----------END OF I/O SECTION*---
0000149A                           785          *----------Start of OPCODE SUBROUTINE
0000149A  =0000A000                786  stack            EQU        $A000  
0000149A  =0000000C                787  shift            EQU        12                   * Shift 12 bits 
00000400                           788                   ORG        $400
00000400                           789           
00000400  4FF9 0000A000            790  get_opcode       LEA        stack,SP        *Load the SP
00000406  41F9 00000424            791                   LEA        jmp_table,A0    *Index into the table
0000040C  4280                     792                   CLR.L      D0              *Zero it       
0000040E  227C 00009000            793                   MOVE.L     #$00009000,A1        *We'll play with it here
00000414  3011                     794                   MOVE.W     (A1),D0
00000416  123C 000C                795                   MOVE.B     #shift,D1       *Shift 12 bits to the right  
0000041A  E268                     796                   LSR.W      D1,D0           *Move the bits
0000041C  C0FC 0006                797                   MULU       #6,D0           *Form offset     
00000420  4EB0 0000                798                   JSR        0(A0,D0)        *Jump indirect with index
00000424                           799                   
00000424  4EF9 00000484            800  jmp_table        JMP        code0000        *Bit manipulation/MOVEP/Immediate
0000042A  4EF9 00000488            801                   JMP        code0001        *MOVE.B
00000430  4EF9 0000048C            802                   JMP        code0010        *MOVE.L
00000436  4EF9 00000490            803                   JMP        code0011        *MOVE.W
0000043C  4EF9 00000494            804                   JMP        code0100        *Miscellaneous
00000442  4EF9 000004A8            805                   JMP        code0101        *ADDQ/SUBQ/Scc/DBcc
00000448  4EF9 000004AC            806                   JMP        code0110        *BSR,BRA,Bcc
0000044E  4EF9 000004B0            807                   JMP        code0111        *MOVEQ
00000454  4EF9 000004B4            808                   JMP        code1000        *OR/DIV/SBCD
0000045A  4EF9 000004B8            809                   JMP        code1001        *SUB/SUBX
00000460  4EF9 000004BC            810                   JMP        code1010        *Unassigned
00000466  4EF9 000004C0            811                   JMP        code1011        *CMP/EOR
0000046C  4EF9 000004C4            812                   JMP        code1100        *AND/MUL/ABCD/EXG
00000472  4EF9 000004C8            813                   JMP        code1101        *ADD/ADDA/ADDX
00000478  4EF9 000004CC            814                   JMP        code1110        *Shift/Rotate
0000047E  4EF9 000004D0            815                   JMP        code1111        *Special/Reserved
00000484                           816                   
00000484  4E72 2700                817  code0000         STOP       #$2700
00000488  4E72 2700                818  code0001         STOP       #$2700
0000048C  4E72 2700                819  code0010         STOP       #$2700
00000490  4E72 2700                820  code0011         STOP       #$2700
00000494  267C 00000000            821  code0100         MOVE.L     #0,A3
0000049A  4241                     822                   CLR        D1
0000049C  43F9 000006C5            823                   LEA        enter_start_AD,A1
000004A2  700E                     824                   MOVE.L     #14,D0
000004A4  4E4F                     825                   TRAP       #15
000004A6  4E75                     826                   RTS
000004A8  4E72 2700                827  code0101         STOP       #$2700
000004AC  4E72 2700                828  code0110         STOP       #$2700
000004B0  4E72 2700                829  code0111         STOP       #$2700
000004B4  4E72 2700                830  code1000         STOP       #$2700
000004B8  4E72 2700                831  code1001         STOP       #$2700
000004BC  4E72 2700                832  code1010         STOP       #$2700
000004C0  4E72 2700                833  code1011         STOP       #$2700
000004C4  4E72 2700                834  code1100         STOP       #$2700
000004C8  4E72 2700                835  code1101         STOP       #$2700
000004CC  4E72 2700                836  code1110         STOP       #$2700
000004D0  4E72 2700                837  code1111         STOP       #$2700
000004D4                           838  
000004D4                           839  FINISH:
000004D4                           840          *INCLUDE 'opcode_subroutine.x68'
000004D4  2608                     841              MOVE.L  A0,D3
000004D6  2C03                     842              MOVE.L  D3,D6
000004D8  45F9 00000614            843              LEA     good_code_buffer,A2
000004DE                           844   
000004DE                           845              
000004DE  14FC 0046                846              MOVE.B  #'F',(A2)+      ;print spaces
000004E2  14FC 0049                847              MOVE.B  #'I',(A2)+      ;print spaces
000004E6  14FC 0049                848              MOVE.B  #'I',(A2)+      ;print spaces
000004EA  14FC 004E                849              MOVE.B  #'N',(A2)+      ;print spaces
000004EE  14FC 0049                850              MOVE.B  #'I',(A2)+      ;print D
000004F2  14FC 0053                851              MOVE.B  #'S',(A2)+      ;print A
000004F6  14FC 0048                852              MOVE.B  #'H',(A2)+      ;print T
000004FA  14FC 0041                853              MOVE.B  #'A',(A2)+      ;print A
000004FE  14FC 0041                854              MOVE.B  #'A',(A2)+      ;print spaces
00000502  14FC 0041                855              MOVE.B  #'A',(A2)+      ;print spaces
00000506  14FC 0048                856              MOVE.B  #'H',(A2)+      ;print spaces
0000050A  14FC 0041                857              MOVE.B  #'A',(A2)+      ;print spaces
0000050E  14FC 0052                858              MOVE.B  #'R',(A2)+
00000512  2610                     859              MOVE.L  (A0),D3
00000514  2C03                     860              MOVE.L  D3,D6
00000516  7E01                     861              MOVE.L  #1,D7
00000518                           862  
00000518                           863              
00000518  14BC 0000                864              MOVE.B  #$00,(A2) * add NULL value to print string
0000051C  43F9 00000614            865              LEA     good_code_buffer,A1
00000522  103C 000D                866              MOVE.B  #13,D0
00000526  4E4F                     867              TRAP    #15   
00000528  FFFF FFFF                868              SIMHALT
0000052C                           869  
0000052C                           870  *-390 -> 406 WITH NOP AT 400
0000052C                           871  
0000052C                           872  
0000052C                           873  
0000052C                           874  
0000052C                           875  
0000052C                           876  
0000052C                           877  
0000052C                           878  
0000052C                           879  
0000052C                           880  
0000052C                           881  
0000052C                           882  
0000052C                           883  
0000052C                           884  
0000052C                           885  
0000052C                           886  *-Parses input - take input from user to create a memory address
0000052C                           887  *- entry is parsed to make sure it falls within a valid range
0000052C                           888  *-good inputs are converteed to hex
0000052C                           889  *-the entered addres get's stored in d3
0000052C                           890  *-
0000052C                           891  *-
0000052C                           892  
0000052C                           893  
0000052C                           894  
0000052C  7C00                     895  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
0000052E  7A00                     896                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00000530                           897                  
00000530                           898                  *-CHECK TO SEE INPUT DATA
00000530  B205                     899                  CMP.B   D5,D1   D5 IS 0
00000532  6700 0086                900                  BEQ     error_no_input no input was found
00000536  0C41 0008                901                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
0000053A  6E00 0090                902                  BGT     error_bad_entry
0000053E                           903                  ;BGT     error_inv_to_many_char
0000053E  6000 0018                904                  BRA     parse_each
00000542                           905  
00000542  7C00                     906  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00000544  7A00                     907                  MOVEQ   #$0,D5  CLEARS D5
00000546  B205                     908                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00000548  6700 0070                909                  BEQ     error_no_input
0000054C  0C41 0008                910                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00000550  6E00 007A                911                  BGT     error_bad_entry
00000554                           912                  ;BGT     error_to_many_char
00000554  6000 0002                913                  BRA     parse_each        
00000558                           914  
00000558                           915  *parse each analyzes each ind character entered
00000558                           916  *in ASCII table lower case 'f' is tyhe highest character code (102)
00000558                           917  
00000558  1419                     918  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
0000055A  B405                     919                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
0000055C  6700 0058                920                  BEQ     parse_complete  end of user input
00000560  B43C 0066                921                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00000564  6E00 0012                922                  BGT     hex_compare
00000568                           923                  
00000568                           924                  *-
00000568                           925                  *Comapare the decimal number values betyween 0 -9 first
00000568                           926                  *
00000568                           927                  *-
00000568  B43C 002F                928  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
0000056C                           929                                      *-for decimal values between [47, 57] are valid
0000056C  6F00 0056                930                  BLE     error_char 
00000570  B43C 003A                931                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00000574  6D00 0022                932                  BLT     dec_convert
00000578                           933                  *-
00000578                           934                  *there are no number values, lets check alpha characters
00000578                           935                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
00000578                           936                  *->71 'G' then we should go and convert to hex range A-F
00000578                           937                  *-UPPER case
00000578                           938                  *-      
00000578  B43C 0041                939  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
0000057C  6D00 0046                940                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00000580  B43C 0047                941                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00000584  6D00 001C                942                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
00000588  B43C 0061                943  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
0000058C  6D00 0036                944                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
00000590  B43C 0067                945                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
00000594  6D00 0016                946                  BLT     lower_ascii
00000598                           947                  
00000598                           948           
00000598  0402 0030                949  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
0000059C                           950                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
0000059C  E986                     951                  ASL.L   #4,D6
0000059E  DC02                     952                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000005A0  60B6                     953                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000005A2                           954                                      *- 97 - 103
000005A2                           955                  
000005A2                           956                              
000005A2                           957  *- ASCII conversions UPPER case to hex value by substracting 55
000005A2                           958  
000005A2  0402 0037                959  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000005A6  E986                     960                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000005A8  DC02                     961                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000005AA  60AC                     962                  BRA     parse_each  parse next item
000005AC                           963  *-ASCI lower case to hex value by subtracting 87
000005AC  0402 0057                964  lower_ascii     SUBI.B  #87,D2
000005B0  E986                     965                  ASL.L   #4,D6
000005B2  DC02                     966                  ADD.B   D2,D6
000005B4  60A2                     967                  BRA     parse_each
000005B6                           968  
000005B6  7801                     969  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000005B8  4E75                     970                  RTS             JUMP FROM SUBROUTINE                
000005BA  43F9 0000068A            971  error_no_input  LEA no_entry,A1 load bad entry statment
000005C0  7001                     972                  MOVE.L  #1,D0
000005C2  4E4F                     973                  TRAP    #15
000005C4                           974                  ;JMP     get_input
000005C4  43F9 000006B2            975  error_char      LEA bad_char,A1
000005CA  4E4F                     976                  trap #15
000005CC                           977                  ;JMP get_input0
000005CC  43F9 0000069D            978  error_bad_entry LEA bad_entry,A1
000005D2  4E4F                     979                  TRAP #15
000005D4                           980                  ;JMP  get_input
000005D4                           981  
000005D4                           982  
000005D4  FFFF FFFF                983      SIMHALT             ; halt simulator
000005D8                           984  
000005D8                           985  * Put variables and constants here
000005D8= 48 65 6C 6C 6F 20 ...    986  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00000614                           987  
00000614                           988  
00000614                           989  good_code_buffer    DS.B    88
0000066C                           990  
0000066C                           991  bad_code_buffer     DS.B    30
0000068A= 4E 6F 20 45 6E 74 ...    992  no_entry    DC.B    'No Entry detected.',0
0000069D= 42 61 64 20 45 6E ...    993  bad_entry   DC.B    'Bad Entry Dectected.',0
000006B2= 42 61 64 20 43 68 ...    994  bad_char    DC.B    'Bad Char detected.',0
000006C5                           995  *-errors
000006C5                           996  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000006C5= 45 6E 74 65 72 20 ...    997  enter_start_AD  DC.B    'Enter a starting address: ',0
000006E0                           998  userStartAddrInput  DS.B    50  address used to store the data input from user
00000712                           999  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00000744                          1000  
00000744= 45 6E 74 65 72 20 ...   1001  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00000779                          1002  
00000779                          1003  userEndInput    DS.B    50  addresse used to store the data input from user
000007AC  43F8 068A               1004  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
000007B0  7001                    1005                          MOVE.L  #1,D0
000007B2  4E4F                    1006                          TRAP    #15
000007B4                          1007                          ;JMP     get_input
000007B4                          1008  
000007B4                          1009  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
000007B4                          1010  
000007B4                          1011      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESSCOUNT        1092
BAD_CHAR            6B2
BAD_CODE_BUFFER     66C
BAD_ENTRY           69D
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CODE0000            484
CODE0001            488
CODE0010            48C
CODE0011            490
CODE0100            494
CODE0101            4A8
CODE0110            4AC
CODE0111            4B0
CODE1000            4B4
CODE1001            4B8
CODE1010            4BC
CODE1011            4C0
CODE1100            4C4
CODE1101            4C8
CODE1110            4CC
CODE1111            4D0
CR                  D
DEC_COMPARE         568
DEC_CONVERT         598
ENTER_START_AD      6C5
ERROR_BAD_ENTRY     5CC
ERROR_CHAR          5C4
ERROR_INV_TO_MANY_CHAR  7AC
ERROR_NO_INPUT      5BA
FINISH              4D4
GET_INPUT_END_ADDR  1030
GET_INPUT_START_ADDR  100C
GET_NEXT_INSTRUCTION  10A4
GET_OPCODE          400
GOOD_CODE_BUFFER    614
HEX_COMPARE         578
JMP_TABLE           424
LF                  A
LOWER_ASCII         5AC
LOW_HEX_COMPARE     588
M0000               1180
M0001               118C
M0010               1198
M0011               11AC
M0100               11C4
M0111               11DC
MAINLOOP            107C
MODETABLE           1150
N0000               12DE
N0001               12E4
N0010               12EA
N0011               12F0
N0100               12F6
N0101               12FC
N0110               1302
N0111               1308
N1000               130E
N1001               1314
N1010               131A
N1011               1320
N1100               1326
N1101               132C
N1110               1332
N1111               1338
NO_ENTRY            68A
NUMTABLE            125E
OP0001              139A
OP0100              133E
OPERROR             1420
PARSE_COMPLETE      5B6
PARSE_EACH          558
PARSE_END           542
PARSE_INPUT         52C
PRINTCODE           1484
PRINT_WORD          10F6
REGISTERPRINT       11E2
REGNUMTABLE         11EE
RN0000              122E
RN0001              1234
RN0010              123A
RN0011              1240
RN0100              1246
RN0101              124C
RN0110              1252
RN0111              1258
SHIFT               C
STACK               A000
START               1000
STARTLOC            7000
STORE_SRT_END       105A
UPPER_ASCII         5A2
USEREND             744
USERENDADDRINPUT    712
USERENDINPUT        779
USERSTARTADDRINPUT  6E0
WELCOME_MESSAGE     5D8
WRITE_DATA_IN_D3_TO_BUFFER  10E0
_NOP                134E
_RTS                1374
