00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2017-05-30 ¿ÀÈÄ 11:43:55

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : (!!!!!!STABLE!!!!) Master branch
00000000                             3  * Written by : Danny Ly & Edward Chang
00000000                             4  * Date       : 4/27/2017
00000000                             5  * Description: Our dissasembler for 68K
00000000                             6  *-----------------------------------------------------------
00000000                             7  *-CURRENT STATE ONLY CONVERTS THE STRING ADDRESS TO A HEX ADDRESS STORED INSIDE D6
00001000                             8      ORG    $1000
00001000                             9      
00001000  =0000000D                 10  CR  EQU $0D
00001000  =0000000A                 11  LF  EQU $0A
00001000  =00007000                 12  startLoc    EQU $7000
00001000                            13  
00001000                            14  
00001000                            15  *--- Notes
00001000                            16  *We'll keep A2 as our pointer to writing to the different buffers
00001000                            17  * A4 will be our main pointer to current memory address and current data
00001000                            18  * D3 will be dedicated register to manipulate our data in
00001000                            19  *
00001000                            20  *
00001000                            21  *---------
00001000                            22  START:                  
00001000                            23              ; first instruction of program
00001000                            24              ;LEA     stack,SP
00001000                            25              *-present the hello message
00001000  43F9 00003900             26              LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 27              MOVE.B  #14,D0
0000100A  4E4F                      28              TRAP    #15
0000100C                            29              
0000100C                            30  *           
0000100C                            31  **- FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            32  *
0000100C                            33  ** Put program code here
0000100C                            34  **-----
0000100C                            35  **This program starts by given a starting address and an ending address disassemble
0000100C                            36  **the binary code that is at that location.
0000100C                            37  **
0000100C                            38  **
0000100C                            39  **----
0000100C                            40  *
0000100C                            41  **-------
0000100C                            42  ** Needs to check for odd addressing**
0000100C                            43  **
0000100C                            44  **
0000100C                            45  **-----
0000100C                            46  *                *---------------------I/O SECTION
0000100C                            47  *                * Grabs ascii from user and converts to hex stored into memory
0000100C                            48  *                * A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            49  *                * statically in memory and retrieved when needed to compare
0000100C                            50  *                * this free's up a adress/data register to use
0000100C                            51  *                *-----------------------
0000100C                            52  *                
0000100C                            53  *                
0000100C                            54  *get_input_start_addr 
0000100C                            55  *                MOVE.L  #0,A3
0000100C                            56  *                CLR     D1
0000100C                            57  *                LEA     enter_start_AD,A1
0000100C                            58  *                MOVE.L  #14,D0
0000100C                            59  *                TRAP    #15
0000100C                            60  *                
0000100C                            61  *                
0000100C                            62  *
0000100C                            63  *      
0000100C                            64  *                LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                            65  *                MOVE.L  #2,D0
0000100C                            66  *                TRAP    #15
0000100C                            67  *                JSR     parse_input             parse the starting address
0000100C                            68  *                
0000100C                            69  *                
0000100C                            70  *                MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                            71  *                
0000100C                            72  *                                                *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                            73  *                                                *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                            74  *
0000100C                            75  *
0000100C                            76  *get_input_end_addr
0000100C                            77  *                MOVE.L  #0,A3
0000100C                            78  *                CLR     D1
0000100C                            79  *                LEA     userEnd,A1
0000100C                            80  *                MOVE.L  #14,D0
0000100C                            81  *                TRAP    #15
0000100C                            82  *                
0000100C                            83  *
0000100C                            84  *
0000100C                            85  *                LEA     userEndAddrInput,A1
0000100C                            86  *                MOVE.B  userEnd,D1
0000100C                            87  *                MOVE.L  #2,D0
0000100C                            88  *                TRAP    #15
0000100C                            89  *                JSR     parse_end
0000100C                            90  *
0000100C                            91  *                
0000100C                            92  *                MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO 
0000100C                            93  
0000100C                            94  *  
0000100C                            95  *             
0000100C                            96  *STORE_SRT_END:
0000100C                            97  *               
0000100C                            98  *                      ;store the starting and ending address into memory out of range
0000100C                            99  *            SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                           100  *            MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           101  *            MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           102  *            MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           103  *            MOVE.L  A5,A4
0000100C                           104              
0000100C                           105              *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           106              *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           107              *
0000100C  2C3C 00000996            108              MOVE.L  #$996,D6    Starting address loads into D6
00001012  2A46                     109              MOVE.L  D6,A5       Move D6 into a5
00001014                           110              
00001014  2C3C 000009CF            111              MOVE.L  #$9CF,D6
0000101A  2C46                     112              MOVE.L  D6,A6
0000101C                           113              
0000101C                           114              
0000101C  23CD 00FFFF00            115              MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            116              MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     117              MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           118              *
0000102A                           119              *
0000102A                           120              *-------------END OF TESING CODE-----------
0000102A                           121          
0000102A  6000 007A                122              BRA get_next_instruction
0000102E                           123                           
0000102E                           124                           
0000102E                           125     
0000102E                           126  *---move_addresses:
0000102E                           127                                  
0000102E                           128                  *-MOVE 2 INTO DATA REG
0000102E                           129                  
0000102E                           130                  ;JSR     LOOP
0000102E                           131                  *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           132                  *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO 
0000102E                           133                  
0000102E                           134                  *----MOVE.W  A4,A0
0000102E                           135                  
0000102E                           136                  *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           137                  *----MOVE.B  #2,D4
0000102E                           138                  
0000102E                           139                  *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           140                  *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           141                  *------MOVE.L  D3,D7
0000102E                           142                  
0000102E                           143  
0000102E                           144  
0000102E                           145  
0000102E                           146                  *------LEA     good_code_buffer,A2 load again
0000102E                           147                  *------JSR     print_d3
0000102E                           148                  
0000102E                           149                  
0000102E                           150                  ;JSR     get_opcode 
0000102E                           151  
0000102E                           152                  *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           153                  *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           154                  ;SIMHALT
0000102E                           155  
0000102E                           156  
0000102E                           157  * ---------------------------------------------------------- 
0000102E                           158  * Decode ---------------------------------------------------
0000102E  49F8 7000                159              LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 0072                160              BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           161       
00001036                           162  mainLoop          
00001036                           163              *-----
00001036                           164              *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           165              *- listing of finished and un finished work
00001036                           166              *-          ***Machine Code saved in D6*****
00001036                           167              *-----
00001036                           168  
00001036  E84B                     169              LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           170              
00001038                           171              ;compare bits to instructions
00001038                           172              *- Machine code saved in D6
00001038  B63C 0001                173              CMP.B   #bin0001,D3 ;MOVE.B, MOVEA.B
0000103C  6700 0A04                174              BEQ     op0001      ;branch to op0001
00001040  B63C 0003                175              CMP.B   #bin0011,D3 ;MOVE.W, MOVEA.W
00001044  6700 0A5C                176              BEQ     op0011      ;branch to op0011
00001048  B63C 0002                177              CMP.B   #bin0010,D3 ;MOVE.L, MOVEA.W 
0000104C  6700 0B58                178              BEQ     op0010      ;branch to op0010           
00001050  B63C 0007                179              CMP.B   #bin0111,D3 ;MOVEQ
00001054  6700 14CC                180              BEQ     op0111      ;branch to op0111                        
00001058  B63C 0004                181              CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP(DONE), RTS(DONE)
0000105C  6700 05D2                182              BEQ     op0100          branch to op0100                        
00001060  B63C 000D                183              CMP.B   #bin1101,D3 ;ADD, ADDA
00001064  6700 0C44                184              BEQ     op1101      ;branch to op1101            
00001068  B63C 0009                185              CMP.B   #bin1001,D3 ;SUB, SUBA
0000106C  6700 0E8E                186              BEQ     op1001      ;branch to op1001                        
00001070                           187              ;CMP.B   #bin0000,D3 ;ADDI, ANDI, EORI, BCHG, CMPI
00001070                           188              ;BEQ     op0000      ;branch to op0000                       
00001070  B63C 0005                189              CMP.B   #bin0101,D3 ;SUBQ ADDQ
00001074  6700 183E                190              BEQ     op0101      ;branch to op0101                         
00001078  B63C 0006                191              CMP.B   #bin0110,D3 ;BRA, Bcc
0000107C  6700 07F2                192              BEQ     op0110      ;branch to op0110            
00001080  B63C 0008                193              CMP.B   #bin1000,D3 ;DIVU.W
00001084  6700 1288                194              BEQ     op1000      ;branch to op1000                                      
00001088                           195              ;CMP.B   #bin1011,D3 ;CMP, CMPA, EOR
00001088                           196              ;BEQ     op1011      ;branch to op1011 
00001088                           197              ;CMP.B   #bin1100,D3 ;AND, MULS.W
00001088                           198              ;BEQ     op1100      ;branch to op1100                                    
00001088  B63C 000E                199              CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
0000108C  6700 1B56                200              BEQ     op1110      ;branch to op1110            
00001090                           201              
00001090  6000 26E0                202              BRA     opERROR     ;invalid opcode display we havent implemented this code yet
00001094                           203              
00001094                           204              ;branch to display opError display
00001094                           205              
00001094                           206              ;print all the things...
00001094                           207   *******************************************************************************
00001094                           208  *
00001094                           209  *******************************************************************************
00001094                           210  addressCount 
00001094                           211              *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
00001094                           212              *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
00001094                           213              *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
00001094                           214              *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP 
00001094                           215              *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
00001094                           216              
00001094  4BF9 00FFFF10            217              LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
0000109A  2215                     218              MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
0000109C  2A0C                     219              MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
0000109E  B285                     220              CMP.L   D5,D1       * COMPARE THE ADDRESSES
000010A0  6F00 274A                221              BLE     FINISH      * branch to end if ending address reached
000010A4  4E75                     222              RTS                 * return IF WE HAVE NOT FINISHED
000010A6                           223              
000010A6                           224  get_next_instruction:
000010A6  4EB8 1094                225                  JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
000010AA                           226                  *-line count
000010AA  4245                     227                  CLR D5             *-CLEAR THIS REGISTER/
000010AC                           228                  
000010AC  45F9 0000393C            229                  Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
000010B2  304C                     230                  MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
000010B4  7E02                     231                  MOVE.L  #2,D7   *-CHECKER FOR ERROR
000010B6  2608                     232                  MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
000010B8  2C03                     233                  MOVE.L  D3,D6   
000010BA  45F9 0000393C            234                  LEA     good_code_buffer,A2
000010C0                           235                                  *-write the current data moved to data register d3
000010C0  4EB9 000010E8            236                  JSR     write_data_in_D3_to_buffer
000010C6                           237                  
000010C6  14BC 0020                238                  MOVE.B  #' ',(A2)
000010CA  14BC 0020                239                  MOVE.B  #' ',(A2)
000010CE  14BC 0020                240                  MOVE.B  #' ',(A2)
000010D2  14BC 0020                241                  MOVE.B  #' ',(A2)
000010D6                           242                  
000010D6  4286                     243                  CLR.L   D6
000010D8  4283                     244                  CLR.L   D3
000010DA                           245                  
000010DA  3A4C                     246                  MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
000010DC                           247                  
000010DC  3C1C                     248                  MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000010DE                           249                                     *-WHICH WOULD BE THE OPCODE DATA, INTO D6
000010DE                           250  
000010DE  2814                     251                  MOVE.L  (A4),D4  If absolute addressing => this will be operand                 
000010E0  3606                     252                  MOVE.W  D6,D3
000010E2  E04B                     253                  LSR.W   #8,D3
000010E4                           254                  
000010E4  6000 FF50                255                  BRA     mainLoop
000010E8                           256                  
000010E8                           257  write_data_in_D3_to_buffer:
000010E8                           258              *------
000010E8                           259              *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
000010E8                           260              *
000010E8                           261              *
000010E8                           262              *---------
000010E8  BE7C 0002                263                  CMP.W   #2,D7 ERROR checking
000010EC  6600 0010                264                  BNE     print_word branch off to write the first word of the line
000010F0  4843                     265                  SWAP    D3
000010F2  4846                     266                  SWAP    D6
000010F4  4EB9 000010FE            267                  JSR     print_word
000010FA  4846                     268                  SWAP    D6
000010FC  2606                     269                  MOVE.L  D6,D3
000010FE                           270                  
000010FE                           271   print_word:
000010FE                           272                  *-****
000010FE                           273                  * called 4 times to decode from hex to ascii the first word 
000010FE                           274                  *   using the below jump table
000010FE                           275                  *
000010FE                           276                  *-------
000010FE  E04B                     277                  LSR.W   #8,D3
00001100  E84B                     278                  LSR.W   #4,D3
00001102  C6FC 0008                279                  MULU.W  #8,D3
00001106  4DF9 00001418            280                  LEA     numTable,A6
0000110C  4EB6 3000                281                  JSR     (A6,D3)
00001110                           282                  
00001110  3606                     283                  MOVE.W  D6,D3   COPY DATA
00001112  E94B                     284                  LSL.W   #4,D3
00001114  E04B                     285                  LSR.W   #8,D3
00001116  E84B                     286                  LSR.W   #4,D3
00001118  C6FC 0008                287                  MULU.W  #8,D3
0000111C  4DF9 00001418            288                  LEA     numTable,A6
00001122  4EB6 3000                289                  JSR     (A6,D3)
00001126                           290                  
00001126  3606                     291                  MOVE.W  D6,D3
00001128                           292                  
00001128  E14B                     293                  LSL.W   #8,D3
0000112A  E04B                     294                  LSR.W   #8,D3
0000112C  E84B                     295                  LSR.W   #4,D3
0000112E  C6FC 0008                296                  MULU.W  #8,D3
00001132  4DF9 00001418            297                  LEA numTable,A6
00001138  4EB6 3000                298                  JSR     (A6,D3)
0000113C                           299                  
0000113C                           300                  
0000113C  3606                     301                  MOVE.W  D6,D3
0000113E  E94B                     302                  LSL.W   #4,D3
00001140  E14B                     303                  LSL.W   #8,D3
00001142  E04B                     304                  LSR.W   #8,D3
00001144  E84B                     305                  LSR.W   #4,D3
00001146  C6FC 0008                306                  MULU.W  #8,D3
0000114A  4DF9 00001418            307                  LEA     numTable,A6
00001150  4EB6 3000                308                  JSR     (A6,D3)
00001154  5805                     309                  ADDI.B  #4,D5
00001156  4E75                     310                  RTS
00001158                           311  * -----------------------------------------------------------            
00001158                           312  * Jump Table immAbTable *************************************
00001158                           313  *** matches the associated Addressing mode     
00001158                           314  *************************************************************
00001158  4EB9 000011A0            315  immAbTable  JSR     IA000   ;Absoulute Word
0000115E  4E75                     316              RTS             ;return, done printing
00001160  4EB9 00001206            317              JSR     IA001   ;Aboulute Long
00001166  4E75                     318              RTS             ;return, done printing
00001168  4EB9 00001180            319              JSR     IA010   ;immediate Data Long
0000116E  4E75                     320              RTS             ;return, done printing
00001170  4EB9 0000118C            321              JSR     IA011   ;immediate Data Word
00001176  4E75                     322              RTS             ;return, done printing  
00001178  4EB9 000012CA            323              JSR     IA100   ;immediate Data Byte
0000117E  4E75                     324              RTS             ;return, done printing
00001180                           325  * -----------------------------------------------------------            
00001180                           326  IA010       
00001180                           327              ;immediateData Long
00001180  14FC 0023                328              MOVE.B  #'#',(A2)+
00001184  4EB9 00001206            329              JSR     IA001
0000118A  4E75                     330              RTS
0000118C                           331  * -----------------------------------------------------------
0000118C                           332  IA011       
0000118C                           333              ;immediateData Word
0000118C  14FC 0023                334              MOVE.B  #'#',(A2)+
00001190  4EB9 000011A0            335              JSR     IA000
00001196  4E75                     336              RTS
00001198                           337  * ----------------------------------------------------------- 
00001198                           338  moveIntPointerWord
00001198  381C                     339              MOVE.W  (A4)+,D4     MOVE insturction pointer by WORD to get next
0000119A  4E75                     340              RTS
0000119C                           341  moveIntPointerLong
0000119C  281C                     342              MOVE.L  (A4)+,D4     MOVE insturction pointer by LONG to get next
0000119E  4E75                     343              RTS
000011A0                           344  * -----------------------------------------------------------            
000011A0                           345  * Subroutine IA000   ------------------------------------------
000011A0                           346  IA000                               ;absoulteWord   
000011A0  14FC 0024                347              MOVE.B  #'$',(A2)+ 
000011A4  E08C                     348              LSR.L   #8,D4       XXXX **** => 00XX XX**
000011A6  E08C                     349              LSR.L   #8,D4       00XX XX** => 0000 XXXX
000011A8                           350              *4MSB   X***
000011A8  4241                     351              CLR     D1
000011AA  3204                     352              MOVE.W  D4,D1       X***
000011AC  E049                     353              LSR.W   #8,D1       00X*
000011AE  E849                     354              LSR.W   #4,D1       000X
000011B0  4DF9 00001418            355              LEA     numTable ,A6 Load the table into A6
000011B6  C2FC 0008                356              MULU    #8,D1
000011BA  4EB6 1000                357              JSR     (A6,D1)     Jump to subroutine of value at D1 
000011BE                           358              *next 4MSB  *X**
000011BE  4241                     359              CLR     D1
000011C0  3204                     360              MOVE.W  D4,D1       *X**
000011C2  E949                     361              LSL.W   #4,D1       X**0        
000011C4  E049                     362              LSR.W   #8,D1       00X*
000011C6  E849                     363              LSR.W   #4,D1       000X
000011C8  4DF9 00001418            364              LEA     numTable ,A6 Load the table into A6
000011CE  C2FC 0008                365              MULU    #8,D1
000011D2  4EB6 1000                366              JSR     (A6,D1)     Jump to subroutine of value at D1
000011D6                           367              *next 4MSB  **X*
000011D6  4241                     368              CLR     D1
000011D8  1204                     369              MOVE.B  D4,D1       00X*
000011DA  E809                     370              LSR.B   #4,D1       000X
000011DC  4DF9 00001418            371              LEA     numTable ,A6 Load the table into A6
000011E2  C2FC 0008                372                          MULU    #8,D1
000011E6  4EB6 1000                373              JSR     (A6,D1)     Jump to subroutine of value at D1
000011EA                           374              *last 4  bits   ***X
000011EA  4241                     375              CLR     D1
000011EC  1204                     376              MOVE.B  D4,D1       00*X
000011EE  E909                     377              LSL.B   #4,D1       00X0    
000011F0  E809                     378              LSR.B   #4,D1       000X
000011F2  4DF9 00001418            379              LEA     numTable ,A6 Load the table into A6
000011F8  C2FC 0008                380                          MULU    #8,D1
000011FC  4EB6 1000                381              JSR     (A6,D1)     Jump to subroutine of value at D1
00001200  4EB8 1198                382              JSR     moveIntPointerWord
00001204  4E75                     383              RTS           
00001206                           384  * -----------------------------------------------------------            
00001206                           385  * Subroutine IA001   ------------------------------------------
00001206                           386  IA001                               ;absoulteLong
00001206  4241                     387              CLR     D1
00001208  4242                     388              CLR     D2 
0000120A  14FC 0024                389              MOVE.B  #'$',(A2)+ 
0000120E  2404                     390              MOVE.L  D4,D2       D2 will be used for later
00001210                           391  *----------- first Word Value D4
00001210  E08C                     392              LSR.L   #8,D4       XXXX **** => 00XX XX**
00001212  E08C                     393              LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001214                           394              *4MSB   X***
00001214  4241                     395              CLR     D1
00001216  3204                     396              MOVE.W  D4,D1       X***
00001218  E049                     397              LSR.W   #8,D1       00X*
0000121A  E849                     398              LSR.W   #4,D1       000X
0000121C  4DF9 00001418            399              LEA     numTable ,A6 Load the table into A6
00001222  C2FC 0008                400              MULU    #8,D1
00001226  4EB6 1000                401              JSR     (A6,D1)     Jump to subroutine of value at D1 
0000122A                           402              *next 4MSB  *X**
0000122A  4241                     403              CLR     D1
0000122C  3204                     404              MOVE.W  D4,D1       *X**
0000122E  E949                     405              LSL.W   #4,D1       X**0        
00001230  E049                     406              LSR.W   #8,D1       00X*
00001232  E849                     407              LSR.W   #4,D1       000X
00001234  4DF9 00001418            408              LEA     numTable ,A6 Load the table into A6
0000123A  C2FC 0008                409              MULU    #8,D1
0000123E  4EB6 1000                410              JSR     (A6,D1)     Jump to subroutine of value at D1
00001242                           411              *next 4MSB  **X*
00001242  4241                     412              CLR     D1
00001244  1204                     413              MOVE.B  D4,D1       00X*
00001246  E809                     414              LSR.B   #4,D1       000X
00001248  4DF9 00001418            415              LEA     numTable ,A6 Load the table into A6
0000124E  C2FC 0008                416                          MULU    #8,D1
00001252  4EB6 1000                417              JSR     (A6,D1)     Jump to subroutine of value at D1
00001256                           418              *last 4  bits   ***X
00001256  4241                     419              CLR     D1
00001258  1204                     420              MOVE.B  D4,D1       00*X
0000125A  E909                     421              LSL.B   #4,D1       00X0    
0000125C  E809                     422              LSR.B   #4,D1       000X
0000125E  4DF9 00001418            423              LEA     numTable ,A6 Load the table into A6
00001264  C2FC 0008                424                          MULU    #8,D1
00001268  4EB6 1000                425              JSR     (A6,D1)     Jump to subroutine of value at D1
0000126C                           426  *---------  Second Word Value D2    **** XXXX
0000126C                           427              *4MSB   X***
0000126C  4241                     428              CLR     D1
0000126E  3202                     429              MOVE.W  D2,D1
00001270  E049                     430              LSR.W   #8,D1            00X*
00001272  E849                     431              LSR.W   #4,D1            000X
00001274  C2FC 0008                432              MULU    #8,D1
00001278  4DF9 00001418            433              LEA     numTable ,A6 Load the table into A6
0000127E  4EB6 1000                434              JSR     (A6,D1)     Jump to subroutine of value at D1
00001282                           435              *next 4MSB  *X**
00001282  4241                     436              CLR     D1
00001284  3202                     437              MOVE.W  D2,D1
00001286  E949                     438              LSL.W   #4,D1       X**0
00001288  E049                     439              LSR.W   #8,D1       00X*
0000128A  E809                     440              LSR.B   #4,D1       000X
0000128C  C2FC 0008                441              MULU    #8,D1
00001290  4DF9 00001418            442              LEA     numTable ,A6 Load the table into A6
00001296  4EB6 1000                443              JSR     (A6,D1)     Jump to subroutine of value at D1
0000129A                           444              *next 4MSB  **X*
0000129A  4241                     445              CLR     D1
0000129C  1202                     446              MOVE.B  D2,D1       00X*
0000129E  E809                     447              LSR.B   #4,D1       000X
000012A0  C2FC 0008                448              MULU    #8,D1
000012A4  4DF9 00001418            449              LEA     numTable ,A6 Load the table into A6
000012AA  4EB6 1000                450              JSR     (A6,D1)     Jump to subroutine of value at D1
000012AE                           451              *next 4MSB  ***X
000012AE  4241                     452              CLR     D1
000012B0  1202                     453              MOVE.B  D2,D1       00*X
000012B2  E909                     454              LSL.B   #4,D1       00X0
000012B4  E809                     455              LSR.B   #4,D1       000X
000012B6  C2FC 0008                456              MULU    #8,D1
000012BA  4DF9 00001418            457              LEA     numTable ,A6 Load the table into A6
000012C0  4EB6 1000                458              JSR     (A6,D1)     Jump to subroutine of value at D1
000012C4  4EB8 119C                459              JSR     moveIntPointerLong
000012C8  4E75                     460              RTS
000012CA                           461   
000012CA                           462  * -----------------------------------------------------------            
000012CA                           463  * Subroutine IA100   ------------------------------------------
000012CA                           464  IA100                               ;immediateData Byte
000012CA  14FC 0023                465              MOVE.B  #'#',(A2)+
000012CE  14FC 0024                466              MOVE.B  #'$',(A2)+  
000012D2  381D                     467              MOVE.W  (A5)+,D4    WE got the address for the operand
000012D4  3815                     468              MOVE.W  (A5),D4     Got the value of operand, immeditae data
000012D6                           469  
000012D6                           470              *4MSB   00X*
000012D6  4242                     471              CLR     D2
000012D8  1404                     472              MOVE.B  D4,D2       00X*
000012DA  E80A                     473              LSR.B   #4,D2       000X
000012DC  C4FC 0008                474              MULU    #8,D2   
000012E0  4EB6 2000                475              JSR     (A6,D2)     Jump to subroutine of value at D2
000012E4                           476              *last 4bits 00*X
000012E4  4242                     477              CLR     D2
000012E6  1404                     478              MOVE.B  D4,D2       00*X
000012E8  E90A                     479              LSL.B   #4,D2       00X*
000012EA  E80A                     480              LSR.B   #4,D2       000X
000012EC  C4FC 0008                481              MULU    #8,D2   
000012F0  4EB6 2000                482              JSR     (A6,D2)     Jump to subroutine of value at D2
000012F4  4EB8 1198                483              JSR     moveIntPointerWord
000012F8  4E75                     484              RTS
000012FA                           485  
000012FA                           486                            
000012FA                           487  * -----------------------------------------------------------            
000012FA                           488  * Jump Table modeTable ***************************************
000012FA                           489  *** matches the associated Addressing mode     
000012FA                           490  *************************************************************
000012FA  4EB9 0000133A            491  modeTable   JSR     M0000   ;Dn, Data Register 
00001300  4E75                     492              RTS             ;return, done printing
00001302  4EB9 00001346            493              JSR     M0001   ;An, Address Register 
00001308  4E75                     494              RTS             ;return, done printing
0000130A  4EB9 00001352            495              JSR     M0010   ;(An), Address
00001310  4E75                     496              RTS             ;return, done printing
00001312  4EB9 00001366            497              JSR     M0011   ;(An)+, Address with Postincrement
00001318  4E75                     498              RTS             ;return, done printing            
0000131A  4EB9 0000137E            499              JSR     M0100   ;-(An), Address with Predecrement
00001320  4E75                     500              RTS             ;return, done printing
00001322  4EB9 00001396            501              JSR     M0101   ; blank - not assigned for this project
00001328  4E75                     502              RTS
0000132A  4EB9 00001398            503              JSR     M0110   ; blank - not assigned for this project
00001330  4E75                     504              RTS
00001332  4EB9 0000139A            505              JSR     M0111   ;(xxx).W, (xxx).L, #imm
00001338  4E75                     506              RTS             ;return, done printing           
0000133A                           507  * -----------------------------------------------------------            
0000133A                           508  * Subroutine M0000 ------------------------------------------
0000133A                           509  M0000                               ;Dn
0000133A  14FC 0044                510              MOVE.B  #'D',(A2)+      ;display D
0000133E  264A                     511              MOVEA.L A2,A3           ;get address for n
00001340  14FC 0020                512              MOVE.B  #' ',(A2)+      ;blank
00001344  4E75                     513              RTS
00001346                           514  
00001346                           515  * -----------------------------------------------------------            
00001346                           516  * Subroutine M0001 ------------------------------------------
00001346                           517  M0001                               ;An
00001346  14FC 0041                518              MOVE.B  #'A',(A2)+      ;display A
0000134A  264A                     519              MOVEA.L A2,A3           ;get address for n
0000134C  14FC 0020                520              MOVE.B  #' ',(A2)+      ;blank
00001350  4E75                     521              RTS
00001352                           522  
00001352                           523  * -----------------------------------------------------------            
00001352                           524  * Subroutine M0010 ------------------------------------------
00001352                           525  M0010                               ;(An) Address
00001352  14FC 0028                526              MOVE.B  #'(',(A2)+      ;display (
00001356  14FC 0041                527              MOVE.B  #'A',(A2)+      ;display A
0000135A  264A                     528              MOVEA.L A2,A3           ;get address for n
0000135C  14FC 0020                529              MOVE.B  #' ',(A2)+      ;blank      
00001360  14FC 0029                530              MOVE.B  #')',(A2)+      ;display )
00001364  4E75                     531              RTS
00001366                           532   
00001366                           533  * -----------------------------------------------------------            
00001366                           534  * Subroutine M0011 ------------------------------------------
00001366                           535  M0011                               ;(An)+ 
00001366  14FC 0028                536              MOVE.B  #'(',(A2)+      ;display (
0000136A  14FC 0041                537              MOVE.B  #'A',(A2)+      ;display A
0000136E  264A                     538              MOVEA.L A2,A3           ;get address for n 
00001370  14FC 0020                539              MOVE.B  #' ',(A2)+      ;blank     
00001374  14FC 0029                540              MOVE.B  #')',(A2)+      ;display )
00001378  14FC 002B                541              MOVE.B  #'+',(A2)+      ;display +
0000137C  4E75                     542              RTS
0000137E                           543  
0000137E                           544  * -----------------------------------------------------------            
0000137E                           545  * Subroutine M0100 ------------------------------------------
0000137E                           546  M0100                               ;-(An)
0000137E  14FC 002D                547              MOVE.B  #'-',(A2)+      ;display -
00001382  14FC 0028                548              MOVE.B  #'(',(A2)+      ;display (
00001386  14FC 0041                549              MOVE.B  #'A',(A2)+      ;display A
0000138A  264A                     550              MOVEA.L A2,A3           ;get address for n
0000138C  14FC 0020                551              MOVE.B  #' ',(A2)+      ;blank      
00001390  14FC 0029                552              MOVE.B  #')',(A2)+      ;display )
00001394  4E75                     553              RTS
00001396                           554  
00001396                           555  * -----------------------------------------------------------    
00001396                           556  * Subroutine M0101 ------------------------------------------
00001396                           557  M0101                               ;do nothing
00001396  4E75                     558              RTS
00001398                           559  * -----------------------------------------------------------   
00001398                           560  * Subroutine M0110 ------------------------------------------
00001398                           561  M0110                               ;do nothing
00001398  4E75                     562              RTS
0000139A                           563  * -----------------------------------------------------------     
0000139A                           564  * Subroutine M0111 -------------------------Not finished-----
0000139A                           565  * Register is stored at D1
0000139A                           566  * ----case 1 : Register 100 => #imm => #XX 3 spaces
0000139A                           567  * ----case 2 : Register 000 => (XXX).W => 
0000139A                           568  * ----case 3 : Register 001 => (XXX).L
0000139A                           569  * 
0000139A                           570  * MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
0000139A                           571  
0000139A                           572  M0111                               ;(xxx).W, (xxx).L, #imm
0000139A                           573                                      ; This will be taken care under opcode subroutine
0000139A  4E75                     574              RTS
0000139C                           575  
0000139C                           576  * -----------------------------------------------------------
0000139C                           577  * Subroutine immediateData 
0000139C                           578  ;immediateData     
0000139C                           579  ;            RTS
0000139C                           580  * -----------------------------------------------------------
0000139C                           581  
0000139C                           582  * Subroutine registerPrint----------------------------------- 
0000139C                           583  registerPrint
0000139C  4DF9 00001418            584              LEA     numTable,A6 Load the table into A6
000013A2  4EB6 1000                585              JSR     (A6,D1)     Jump to numTable with value at D1
000013A6  4E75                     586              RTS
000013A8                           587  
000013A8                           588  * -----------------------------------------------------------            
000013A8                           589  * Jump Table regNumTable ***************************************
000013A8                           590  *** prints the associated number of the register            *
000013A8                           591  *** Also prints hex values for data and addresses           *
000013A8                           592  *-----see below for decoding of what these sub-routines are
000013A8                           593  *************************************************************
000013A8  4EB9 000013E8            594  regNumTable JSR     RN0000   ;register 0
000013AE  4E75                     595              RTS             ;return, done printing
000013B0  4EB9 000013EE            596              JSR     RN0001   ;register 1
000013B6  4E75                     597              RTS             ;return, done printing
000013B8  4EB9 000013F4            598              JSR     RN0010   ;register 2
000013BE  4E75                     599              RTS             ;return, done printing
000013C0  4EB9 000013FA            600              JSR     RN0011   ;register 3
000013C6  4E75                     601              RTS             ;return, done printing
000013C8  4EB9 00001400            602              JSR     RN0100   ;register 4
000013CE  4E75                     603              RTS             ;return, done printing
000013D0  4EB9 00001406            604              JSR     RN0101   ;register 5
000013D6  4E75                     605              RTS             ;return, done printing
000013D8  4EB9 0000140C            606              JSR     RN0110   ;register 6
000013DE  4E75                     607              RTS             ;return, done printing
000013E0  4EB9 00001412            608              JSR     RN0111   ;register 7
000013E6  4E75                     609              RTS             ;return, done printing
000013E8                           610  * -----------------------------------------------------------            
000013E8                           611  * Subroutine RN0000 ------------------------------------------
000013E8                           612  RN0000
000013E8  16BC 0030                613              MOVE.B  #'0',(A3)      ;display 0
000013EC  4E75                     614              RTS
000013EE                           615  
000013EE                           616  * -----------------------------------------------------------            
000013EE                           617  * Subroutine RN0001 ------------------------------------------
000013EE                           618  RN0001
000013EE  16BC 0031                619              MOVE.B  #'1',(A3)      ;display 1
000013F2  4E75                     620              RTS
000013F4                           621  
000013F4                           622  * -----------------------------------------------------------            
000013F4                           623  * Subroutine RN0010 ------------------------------------------
000013F4                           624  RN0010
000013F4  16BC 0032                625              MOVE.B  #'2',(A3)      ;display 2
000013F8  4E75                     626              RTS
000013FA                           627   
000013FA                           628  * -----------------------------------------------------------            
000013FA                           629  * Subroutine RN0011 ------------------------------------------
000013FA                           630  RN0011
000013FA  16BC 0033                631              MOVE.B  #'3',(A3)      ;display 3
000013FE  4E75                     632              RTS
00001400                           633  
00001400                           634  * -----------------------------------------------------------            
00001400                           635  * Subroutine RN0100 ------------------------------------------
00001400                           636  RN0100
00001400  16BC 0034                637              MOVE.B  #'4',(A3)      ;display 4
00001404  4E75                     638              RTS
00001406                           639  
00001406                           640  * -----------------------------------------------------------            
00001406                           641  * Subroutine RN0101 ------------------------------------------
00001406                           642  RN0101
00001406  16BC 0035                643              MOVE.B  #'5',(A3)      ;display 5
0000140A  4E75                     644              RTS
0000140C                           645  
0000140C                           646  * -----------------------------------------------------------            
0000140C                           647  * Subroutine RN0110 ------------------------------------------
0000140C                           648  RN0110
0000140C  16BC 0036                649              MOVE.B  #'6',(A3)      ;display 6
00001410  4E75                     650              RTS
00001412                           651              
00001412                           652  * -----------------------------------------------------------            
00001412                           653  * Subroutine RN0111 ------------------------------------------
00001412                           654  RN0111
00001412  16BC 0037                655              MOVE.B  #'7',(A3)      ;display 7
00001416  4E75                     656              RTS
00001418                           657  
00001418                           658  * -----------------------------------------------------------            
00001418                           659  * Jump Table numTable ***************************************
00001418                           660  *** prints the associated number of the register            *
00001418                           661  *** Also prints hex values for data and addresses           *
00001418                           662  *-----see below for decoding of what these sub-routines are
00001418                           663  *************************************************************
00001418  4EB9 00001498            664  numTable    JSR     N0000   ;register 0
0000141E  4E75                     665              RTS             ;return, done printing
00001420  4EB9 0000149E            666              JSR     N0001   ;register 1
00001426  4E75                     667              RTS             ;return, done printing
00001428  4EB9 000014A4            668              JSR     N0010   ;register 2
0000142E  4E75                     669              RTS             ;return, done printing
00001430  4EB9 000014AA            670              JSR     N0011   ;register 3
00001436  4E75                     671              RTS             ;return, done printing
00001438  4EB9 000014B0            672              JSR     N0100   ;register 4
0000143E  4E75                     673              RTS             ;return, done printing
00001440  4EB9 000014B6            674              JSR     N0101   ;register 5
00001446  4E75                     675              RTS             ;return, done printing
00001448  4EB9 000014BC            676              JSR     N0110   ;register 6
0000144E  4E75                     677              RTS             ;return, done printing
00001450  4EB9 000014C2            678              JSR     N0111   ;register 7
00001456  4E75                     679              RTS             ;return, done printing
00001458  4EB9 000014C8            680              JSR     N1000   ;num 8
0000145E  4E75                     681              RTS             ;return, done printing
00001460  4EB9 000014CE            682              JSR     N1001   ;num 9
00001466  4E75                     683              RTS             ;return, done printing
00001468  4EB9 000014D4            684              JSR     N1010   ;num A
0000146E  4E75                     685              RTS             ;return, done printing
00001470  4EB9 000014DA            686              JSR     N1011   ;num B
00001476  4E75                     687              RTS             ;return, done printing
00001478  4EB9 000014E0            688              JSR     N1100   ;num C
0000147E  4E75                     689              RTS             ;return, done printing
00001480  4EB9 000014E6            690              JSR     N1101   ;num D
00001486  4E75                     691              RTS             ;return, done printing
00001488  4EB9 000014EC            692              JSR     N1110   ;num E
0000148E  4E75                     693              RTS             ;return, done printing
00001490  4EB9 000014F2            694              JSR     N1111   ;num F
00001496  4E75                     695              RTS             ;return, done printing
00001498                           696  * -----------------------------------------------------------            
00001498                           697  * Subroutine N0000 ------------------------------------------
00001498                           698  N0000
00001498  14FC 0030                699              MOVE.B  #'0',(A2)+      ;display 0
0000149C  4E75                     700              RTS
0000149E                           701  
0000149E                           702  * -----------------------------------------------------------            
0000149E                           703  * Subroutine N0001 ------------------------------------------
0000149E                           704  N0001
0000149E  14FC 0031                705              MOVE.B  #'1',(A2)+      ;display 1
000014A2  4E75                     706              RTS
000014A4                           707  
000014A4                           708  * -----------------------------------------------------------            
000014A4                           709  * Subroutine N0010 ------------------------------------------
000014A4                           710  N0010
000014A4  14FC 0032                711              MOVE.B  #'2',(A2)+      ;display 2
000014A8  4E75                     712              RTS
000014AA                           713   
000014AA                           714  * -----------------------------------------------------------            
000014AA                           715  * Subroutine N0011 ------------------------------------------
000014AA                           716  N0011
000014AA  14FC 0033                717              MOVE.B  #'3',(A2)+      ;display 3
000014AE  4E75                     718              RTS
000014B0                           719  
000014B0                           720  * -----------------------------------------------------------            
000014B0                           721  * Subroutine N0100 ------------------------------------------
000014B0                           722  N0100
000014B0  14FC 0034                723              MOVE.B  #'4',(A2)+      ;display 4
000014B4  4E75                     724              RTS
000014B6                           725  
000014B6                           726  * -----------------------------------------------------------            
000014B6                           727  * Subroutine N0101 ------------------------------------------
000014B6                           728  N0101
000014B6  14FC 0035                729              MOVE.B  #'5',(A2)+      ;display 5
000014BA  4E75                     730              RTS
000014BC                           731  
000014BC                           732  * -----------------------------------------------------------            
000014BC                           733  * Subroutine N0110 ------------------------------------------
000014BC                           734  N0110
000014BC  14FC 0036                735              MOVE.B  #'6',(A2)+      ;display 6
000014C0  4E75                     736              RTS
000014C2                           737              
000014C2                           738  * -----------------------------------------------------------            
000014C2                           739  * Subroutine N0111 ------------------------------------------
000014C2                           740  N0111
000014C2  14FC 0037                741              MOVE.B  #'7',(A2)+      ;display 7
000014C6  4E75                     742              RTS
000014C8                           743  
000014C8                           744  * ----------------------------------------------------------- 
000014C8                           745  * Subroutine N1000 ------------------------------------------
000014C8                           746  N1000       
000014C8  14FC 0038                747              MOVE.B  #'8',(A2)+      ;display 8
000014CC  4E75                     748              RTS
000014CE                           749  
000014CE                           750  * -----------------------------------------------------------            
000014CE                           751  * Subroutine N1001 ------------------------------------------
000014CE                           752  N1001   
000014CE  14FC 0039                753              MOVE.B  #'9',(A2)+      ;display 9
000014D2  4E75                     754              RTS
000014D4                           755  
000014D4                           756  * -----------------------------------------------------------            
000014D4                           757  * Subroutine N1010 ------------------------------------------
000014D4                           758  N1010   
000014D4  14FC 0041                759              MOVE.B  #'A',(A2)+      ;display A
000014D8  4E75                     760              RTS
000014DA                           761  
000014DA                           762  * -----------------------------------------------------------            
000014DA                           763  * Subroutine N1011 ------------------------------------------
000014DA                           764  N1011   
000014DA  14FC 0042                765              MOVE.B  #'B',(A2)+      ;display B
000014DE  4E75                     766              RTS
000014E0                           767  
000014E0                           768  * -----------------------------------------------------------            
000014E0                           769  * Subroutine N1100 ------------------------------------------
000014E0                           770  N1100   
000014E0  14FC 0043                771              MOVE.B  #'C',(A2)+      ;display C
000014E4  4E75                     772              RTS
000014E6                           773  
000014E6                           774  * -----------------------------------------------------------            
000014E6                           775  * Subroutine N1101 ------------------------------------------
000014E6                           776  N1101   
000014E6  14FC 0044                777              MOVE.B  #'D',(A2)+      ;display D
000014EA  4E75                     778              RTS
000014EC                           779  
000014EC                           780  * -----------------------------------------------------------            
000014EC                           781  * Subroutine N1110 ------------------------------------------
000014EC                           782  N1110   
000014EC  14FC 0045                783              MOVE.B  #'E',(A2)+      ;display E
000014F0  4E75                     784              RTS
000014F2                           785  
000014F2                           786  * -----------------------------------------------------------            
000014F2                           787  * Subroutine N1111 ------------------------------------------
000014F2                           788  N1111   
000014F2  14FC 0046                789              MOVE.B  #'F',(A2)+      ;display F
000014F6  4E75                     790              RTS   
000014F8                           791  *-------------------- HELPER FUCNTION LOCATION -----------
000014F8                           792  *- For Mode always D2
000014F8                           793  *-- For Register always D1
000014F8                           794  *-  Original Machine code In D6
000014F8                           795  
000014F8                           796  
000014F8                           797  *            HELPER LOCATION
000014F8                           798  *            HELPER LOCATION
000014F8                           799  *            HELPER LOCATION
000014F8                           800  *            HELPER LOCATION
000014F8                           801  *            HELPER LOCATION
000014F8                           802  *------------------------------------------------------------
000014F8                           803  get_0to2_bit
000014F8                           804  *------------------------------------------------------------
000014F8                           805  * MachineCode: 0001 **** **** **** *BIT
000014F8                           806  * Only last 3 bits which is stored at D0 => Source Register
000014F8  4241                     807              CLR     D1
000014FA  1206                     808              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000014FC  EB09                     809              LSL.B   #5,D1       **** **** BIT0 0000
000014FE  EA09                     810              LSR.B   #5,D1       **** **** 0000 0BIT
00001500  1001                     811              MOVE.B  D1,D0      
00001502  C0FC 0008                812              MULU    #8,D0       value adjusted for jumping
00001506  4DF8 13A8                813              LEA     regNumTable ,A6 Load the table into A6
0000150A  4EB6 0000                814              JSR     (A6,D0)     Jump to subroutine of value at D1   
0000150E  4E75                     815              RTS
00001510                           816  *------------------------------------------------------------
00001510                           817  get_3to5_bit
00001510                           818  *------------------------------------------------------------
00001510                           819  * MachineCode: 0001 **** **** **BI T***
00001510                           820  * Only next last 3 bits which is stored at D0 => Source Address mode
00001510  4242                     821              CLR     D2
00001512  4241                     822              CLR     D1
00001514  1406                     823              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001516  E50A                     824              LSL.B   #2,D2       **** **** BIT* **00
00001518  EA0A                     825              LSR.B   #5,D2       **** **** 0000 0BIT
0000151A  1002                     826              MOVE.B  D2,D0
0000151C  C0FC 0008                827              MULU    #8,D0       value adjusted for jumping
00001520  4DF8 12FA                828              LEA     modeTable,A6 Load the table into A6
00001524  4EB6 0000                829              JSR     (A6,D0)     Jump to subroutine of value at D0
00001528  4E75                     830              RTS
0000152A                           831  *------------------------------------------------------------
0000152A                           832  get_6to8_bit
0000152A                           833  *------------------------------------------------------------
0000152A                           834  * MachineCode: 0001 **** ***B IT** ****
0000152A                           835  * Only next last 3 bits which is stored at D0 => Destination Address mode
0000152A  4242                     836              CLR     D2
0000152C  4241                     837              CLR     D1
0000152E  3406                     838              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001530  EF4A                     839              LSL.W   #7,D2       BIT* **** **** 0000
00001532  E04A                     840              LSR.W   #8,D2       0000 0000 BIT* ****
00001534  EA4A                     841              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001536  C4FC 0008                842              MULU    #8,D2       value adjusted for jumping
0000153A  4DF8 12FA                843              LEA     modeTable,A6 Load the table into A6
0000153E  4EB6 2000                844              JSR     (A6,D2)     Jump to subroutine of value at D2
00001542  4E75                     845              RTS
00001544                           846  *------------------------------------------------------------
00001544                           847  get_9to11_bit
00001544                           848  *------------------------------------------------------------
00001544                           849  * MachineCode: 0001 **** BIT* **** ****
00001544                           850  * Decode 3 bits => Destination Register
00001544                           851  * Stored at D1
00001544  4241                     852              CLR     D1
00001546  3206                     853              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001548  E949                     854              LSL.W   #4,D1       BIT* **** **** 0000
0000154A  E049                     855              LSR.W   #8,D1       0000 0000 BIT* ****
0000154C  EA49                     856              LSR.W   #5,D1       0000 0000 0000 0BIT     
0000154E  C2FC 0008                857              MULU    #8,D1       value adjusted for jumping
00001552  4DF8 13A8                858              LEA     regNumTable ,A6 Load the table into A6
00001556  4EB6 1000                859              JSR     (A6,D1)     Jump to subroutine of value at D1 
0000155A  4E75                     860              RTS  
0000155C                           861  *-----------------------FUNCTION word or Long --------------
0000155C                           862  *----------Used to decipher if we are decoding a word or long
0000155C                           863  *-  This subroutine determines f the operations is a word or a long, 
0000155C                           864  *- we use the AND operator to clear out everything except for the 
0000155C                           865  *-3 bit which will be found in D3, we play with our data in D3
0000155C                           866  *-the word or LONG can be found in the OPCODE FIELD which is 
0000155C                           867  *-bits 8 _6
0000155C                           868  
0000155C                           869  print_long:
0000155C                           870                  *-This method print out the long stored in D4,
0000155C                           871                  *- converting from hex to ascii
0000155C  2604                     872                  MOVE.L  D4,D3
0000155E  4843                     873                  SWAP D3
00001560                           874                  
00001560  C6BC 0000FFFF            875                  AND.L   #$0000FFFF,D3
00001566  3403                     876                  MOVE.W  D3,D2
00001568  3602                     877                  MOVE.W  D2,D3
0000156A                           878                  *-get bit 0
0000156A                           879                 
0000156A                           880            
0000156A  E14B                     881                 LSL.W    #8,D3
0000156C  E94B                     882                 LSL.W    #4,D3
0000156E  E04B                     883                 LSR.W    #8,D3
00001570  E84B                     884                 LSR.W    #4,D3
00001572                           885                 
00001572  C6FC 0008                886                 MULU.W   #8,D3
00001576  4DF8 1418                887                 LEA  numTable,A6
0000157A  4EB6 3000                888                 JSR  (A6,D3)
0000157E                           889                 
0000157E                           890                 *-get bit 1
0000157E  4243                     891                 CLR  D3
00001580  3602                     892                 MOVE.W   D2,D3
00001582  C67C 00F0                893                 AND.W    #$00F0,D3
00001586  E84B                     894                 LSR.W    #4,D3
00001588                           895                                
00001588  C6FC 0008                896                 MULU.W   #8,D3
0000158C  4DF8 1418                897                 LEA  numTable,A6
00001590  4EB6 3000                898                 JSR  (A6,D3)
00001594                           899                 
00001594  3602                     900                 MOVE.W   D2,D3
00001596  C67C 0F00                901                 AND.W    #$0F00,D3
0000159A  E04B                     902                 LSR.W    #8,D3
0000159C                           903                                
0000159C  C6FC 0008                904                 MULU.W   #8,D3
000015A0  4DF8 1418                905                 LEA  numTable,A6
000015A4  4EB6 3000                906                 JSR  (A6,D3)
000015A8                           907                 
000015A8  3602                     908                 MOVE.W   D2,D3
000015AA  C67C F000                909                 AND.W    #$F000,D3
000015AE  E04B                     910                 LSR.W    #8,D3
000015B0  E84B                     911                 LSR.W    #4,D3
000015B2                           912                                
000015B2  C6FC 0008                913                 MULU.W   #8,D3
000015B6  4DF8 1418                914                 LEA  numTable,A6
000015BA  4EB6 3000                915                 JSR  (A6,D3)
000015BE                           916                 
000015BE                           917                 *-print the upper word
000015BE                           918                 
000015BE  2604                     919                 MOVE.L D4,D3
000015C0                           920                 
000015C0  C6BC 0000FFFF            921                 AND.L    #$0000FFFF,D3
000015C6  3403                     922                 MOVE.W   D3,D2
000015C8                           923                 
000015C8                           924                 *-get bit 4
000015C8  C67C F000                925                 AND.W    #$F000,D3
000015CC  E04B                     926                 LSR.W    #8,D3
000015CE  E84B                     927                 LSR.W    #4,D3                              
000015D0  C6FC 0008                928                 MULU.W   #8,D3
000015D4  4DF8 1418                929                 LEA  numTable,A6
000015D8  4EB6 3000                930                 JSR  (A6,D3)
000015DC                           931                 
000015DC                           932                 
000015DC  3602                     933                 MOVE.W   D2,D3
000015DE  C67C 0F00                934                 AND.W    #$0F00,D3
000015E2  E04B                     935                 LSR.W    #8,D3                              
000015E4  C6FC 0008                936                 MULU.W   #8,D3
000015E8  4DF8 1418                937                 LEA  numTable,A6
000015EC  4EB6 3000                938                 JSR  (A6,D3)
000015F0                           939                 
000015F0  3602                     940                 MOVE.W   D2,D3
000015F2  C67C 00F0                941                 AND.W    #$00F0,D3
000015F6  E84B                     942                 LSR.W    #4,D3                              
000015F8  C6FC 0008                943                 MULU.W   #8,D3
000015FC  4DF8 1418                944                 LEA  numTable,A6
00001600  4EB6 3000                945                 JSR  (A6,D3)
00001604                           946                 
00001604                           947                 
00001604  3602                     948                 MOVE.W   D2,D3
00001606  C67C 000F                949                 AND.W    #$000F,D3                             
0000160A  C6FC 0008                950                 MULU.W   #8,D3
0000160E  4DF8 1418                951                 LEA  numTable,A6
00001612  4EB6 3000                952                 JSR  (A6,D3)
00001616  4E75                     953                 RTS
00001618                           954                 
00001618                           955  
00001618                           956  WordOrLong  
00001618                           957          *-find this OPMODE          
00001618  4283                     958          CLR.L   D3
0000161A  3606                     959          MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
0000161C                           960          *-we will store this in D3
0000161C                           961          *-using a shortcut the AND operator
0000161C                           962          *-we need these bits
0000161C                           963          *-[**** XXXX X[XXX] ****]
0000161C                           964              *- starts repersenting bits we do not need
0000161C                           965              *-shortcut we do not need to shift as much
0000161C                           966              *-minor optimization
0000161C                           967              *-AND F to keep 0 to throw away
0000161C  C67C 0FF0                968          AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
00001620  EC4B                     969          LSR.W   #6,D3
00001622                           970          *- now weneed to get the last 3 bits
00001622                           971          *-shift to the right by 6 makes the last 3 bits in the 
00001622                           972          *-byte postion
00001622                           973          *-[**** **** XXXX X[XXX]]m we need to clear everything else
00001622  C67C 000F                974          AND.W   #$000F,D3 clear everything except the last byte we need
00001626  E34B                     975          LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
00001628                           976          *-make sure everyhting is clearn except the last byte
00001628  C67C 000F                977          AND.W   #$000F,D3
0000162C                           978          *-Shift back by 1 bit to the right
0000162C  E24B                     979          LSR.W   #1,D3
0000162E  4E75                     980          RTS 
00001630                           981          
00001630                           982              
00001630                           983              
00001630                           984              
00001630                           985              
00001630                           986              *---------------------------------------------------------------
00001630                           987              *--------------------------------------------------------
00001630                           988              *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
00001630                           989              *-------------------------------------
00001630                           990              INCLUDE 'op0100.x68'    IN a different file, modulated design
00001630                           991  op0100      *MOVEM, JSR,LEA,RTS,NOP
00001630  BC7C 4E71                992              CMP.W   #$4E71,D6
00001634  6700 0126                993              BEQ     _NOP
00001638  BC7C 4E75                994              CMP.W   #$4E75,D6   ;see if it's a RTS
0000163C  6700 0144                995              BEQ     _RTS        branch to RTS
00001640  4242                     996              CLR     D2
00001642  3406                     997              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001644  EF4A                     998              LSL.W   #7,D2       BIT* **** **** 0000
00001646  E04A                     999              LSR.W   #8,D2       0000 0000 BIT* ****
00001648  EA4A                    1000              LSR.W   #5,D2       0000 0000 0000 0BIT 
0000164A  B43C 0007               1001              CMP.B   #7,D2
0000164E  6700 0158               1002              BEQ     _LEA        branch to LEA
00001652  BC7C 4EB8               1003              CMP.W   #$4EB8,D6   ;see if it's a JSR
00001656  6700 01B2               1004              BEQ     _JSR  
0000165A  BC7C 4EB9               1005              CMP.W   #$4EB9,D6   ;see if it's a JSR
0000165E  6700 01AA               1006              BEQ     _JSR
00001662  BC7C 4EA7               1007              CMP.W   #$4EA7,D6   ;see if it's a JSR
00001666  6300 01A2               1008              BLS     _JSR          
0000166A  7E02                    1009              MOVE.L  #2,D7       ;data is not error
0000166C  14FC 0020               1010              MOVE.B  #' ',(A2)+      ;print spaces
00001670  14FC 0020               1011              MOVE.B  #' ',(A2)+      ;print spaces
00001674  14FC 0020               1012              MOVE.B  #' ',(A2)+      ;print spaces
00001678  14FC 0020               1013              MOVE.B  #' ',(A2)+      ;print spaces
0000167C  14FC 004D               1014              MOVE.B  #'M',(A2)+      ;print M
00001680  14FC 004F               1015              MOVE.B  #'O',(A2)+      ;print O
00001684  14FC 0056               1016              MOVE.B  #'V',(A2)+      ;print V
00001688  14FC 0045               1017              MOVE.B  #'E',(A2)+      ;print E
0000168C  14FC 004D               1018              MOVE.B  #'M',(A2)+      ;print M
00001690  14FC 002E               1019              MOVE.B  #'.',(A2)+      ;print .
00001694  1206                    1020              MOVE.B  D6,D1           *X** ****
00001696  E309                    1021              LSL.B   #1,D1           X*** ***0
00001698  EE09                    1022              LSR.B   #7,D1           0000 000X
0000169A  B23C 0000               1023              CMP.B   #0,D1
0000169E  6700 000A               1024              BEQ     movem_w
000016A2  14FC 004C               1025              MOVE.B  #'L',(A2)+      ;print L
000016A6  6000 000A               1026              BRA     decodeMOVEM
000016AA                          1027  movem_w 
000016AA  14FC 0057               1028              MOVE.B  #'W',(A2)+      ;print W
000016AE  6000 0002               1029              BRA     decodeMOVEM
000016B2                          1030  decodeMOVEM            
000016B2  14FC 0020               1031              MOVE.B  #' ',(A2)+      ;print spaces
000016B6  14FC 0020               1032              MOVE.B  #' ',(A2)+      ;print spaces
000016BA  14FC 0020               1033              MOVE.B  #' ',(A2)+      ;print spaces
000016BE  1A3C 0003               1034              MOVE.B  #3,D5           ;counter for output
000016C2  4241                    1035              CLR     D1
000016C4  3206                    1036              MOVE.W  D6,D1           **** *X** **** ****
000016C6  EB49                    1037              LSL.W   #5,D1           X*** **** ***0 0000
000016C8  E049                    1038              LSR.W   #8,D1           0000 0000 X*** ****
000016CA  EE49                    1039              LSR.W   #7,D1           0000 0000 0000 000X
000016CC  E08C                    1040              LSR.L   #8,D4
000016CE  E08C                    1041              LSR.L   #8,D4           D4 holds the list
000016D0  B23C 0000               1042              CMP.B   #0,D1
000016D4  6700 0006               1043              BEQ     RtoM
000016D8  6600 006C               1044              BNE     MtoR
000016DC                          1045  RtoM
000016DC  103C 0000               1046              MOVE.B  #0,D0
000016E0  123C 0001               1047              MOVE.B  #1,D1            
000016E4                          1048  LoopSmallDn
000016E4  3604                    1049              MOVE.W  D4,D3
000016E6  C641                    1050              AND     D1,D3
000016E8  B641                    1051              CMP     D1,D3
000016EA  6700 000C               1052              BEQ     foundSmallDn      found the smallest get out    
000016EE  E349                    1053              LSL.W   #1,D1           multiplied by 2
000016F0  5200                    1054              ADD.B   #1,D0
000016F2  B03C 0008               1055              CMP.B   #8,D0
000016F6  66EC                    1056              BNE     LoopSmallDn
000016F8                          1057  foundSmallDn  
000016F8  B03C 0008               1058              CMP.B  #8,D0           
000016FC  6700 001E               1059              BEQ    LoopSmallAn       No Dn in the list
00001700  14FC 002D               1060              MOVE.B  #'-',(A2)+          
00001704  9843                    1061              SUB.W   D3,D4
00001706  B83C 0000               1062              CMP.B   #0,D4
0000170A                          1063              
0000170A  14FC 0044               1064              MOVE.B  #'D',(A2)+
0000170E  4DF8 13A8               1065              LEA    regNumTable,A6
00001712  4EB6 0000               1066              JSR    (A6,D0)           print out the first Dn
00001716  14FC 002F               1067              MOVE.B  #'/',(A2)+
0000171A  60C8                    1068              BRA     LoopSmallDn
0000171C                          1069  LoopSmallAn              
0000171C  3604                    1070              MOVE.W  D4,D3
0000171E  C641                    1071              AND     D1,D3
00001720  B641                    1072              CMP     D1,D3
00001722  6700 000C               1073              BEQ     foundSmallAn      found the smallest get out    
00001726  E349                    1074              LSL.W   #1,D1           multiplied by 2
00001728  5200                    1075              ADD.B   #1,D0
0000172A  B03C 0008               1076              CMP.B  #8,D0
0000172E  66EC                    1077              BNE     LoopSmallAn
00001730                          1078  foundSmallAn  
00001730                          1079              
00001730                          1080              
00001730  4EB9 00001758           1081              JSR     printList            
00001736  14FC 002C               1082               MOVE.B  #',',(A2)+      ;print spaces
0000173A  4EB8 1510               1083              JSR     get_3to5_bit
0000173E  4EB8 14F8               1084              JSR     get_0to2_bit
00001742  6000 2092               1085              BRA     printCode
00001746                          1086  MtoR
00001746  4EB8 1510               1087              JSR     get_3to5_bit
0000174A  4EB8 14F8               1088              JSR     get_0to2_bit
0000174E  14FC 002C               1089               MOVE.B  #',',(A2)+      ;print spaces
00001752                          1090              
00001752  4EB9 00001758           1091              JSR     printList
00001758                          1092  printList  
00001758                          1093              
00001758                          1094  
00001758                          1095  
00001758  6000 207C               1096              BRA     printCode
0000175C                          1097  
0000175C                          1098              
0000175C                          1099             
0000175C                          1100             
0000175C                          1101  
0000175C                          1102  _NOP
0000175C  7E02                    1103              MOVE.L  #2,D7       ;data is not error
0000175E  14FC 0020               1104              MOVE.B  #' ',(A2)+      ;print spaces
00001762  14FC 0020               1105              MOVE.B  #' ',(A2)+      ;print spaces
00001766  14FC 0020               1106              MOVE.B  #' ',(A2)+      ;print spaces
0000176A  14FC 0020               1107              MOVE.B  #' ',(A2)+      ;print spaces
0000176E  14FC 004E               1108              MOVE.B  #'N',(A2)+      ;print N
00001772  14FC 004F               1109              MOVE.B  #'O',(A2)+      ;print O
00001776  14FC 0050               1110              MOVE.B  #'P',(A2)+      ;print P
0000177A  1A3C 0003               1111              MOVE.B  #3,D5           ;counter for output
0000177E  6000 2056               1112              BRA     printCode
00001782                          1113  _RTS    
00001782  7E02                    1114              MOVE.L  #2,D7       ;data is not error
00001784  14FC 0020               1115              MOVE.B  #' ',(A2)+      ;print spaces
00001788  14FC 0020               1116              MOVE.B  #' ',(A2)+      ;print spaces
0000178C  14FC 0020               1117              MOVE.B  #' ',(A2)+      ;print spaces
00001790  14FC 0020               1118              MOVE.B  #' ',(A2)+      ;print spaces
00001794  14FC 0052               1119              MOVE.B  #'R',(A2)+      ;print R
00001798  14FC 0054               1120              MOVE.B  #'T',(A2)+      ;print T
0000179C  14FC 0053               1121              MOVE.B  #'S',(A2)+      ;print S
000017A0  1A3C 0003               1122              MOVE.B  #3,D5           ;counter for output
000017A4  6000 2030               1123              BRA     printCode
000017A8                          1124  _LEA    
000017A8  7E02                    1125              MOVE.L  #2,D7       ;data is not error
000017AA  14FC 0020               1126              MOVE.B  #' ',(A2)+      ;print spaces
000017AE  14FC 0020               1127              MOVE.B  #' ',(A2)+      ;print spaces
000017B2  14FC 0020               1128              MOVE.B  #' ',(A2)+      ;print spaces
000017B6  14FC 0020               1129              MOVE.B  #' ',(A2)+      ;print spaces
000017BA  14FC 004C               1130              MOVE.B  #'L',(A2)+      ;print R
000017BE  14FC 0045               1131              MOVE.B  #'E',(A2)+      ;print T
000017C2  14FC 0041               1132              MOVE.B  #'A',(A2)+      ;print S
000017C6  14FC 0020               1133              MOVE.B  #' ',(A2)+      ;print spaces
000017CA  14FC 0020               1134              MOVE.B  #' ',(A2)+      ;print spaces
000017CE  14FC 0020               1135              MOVE.B  #' ',(A2)+      ;print spaces
000017D2  14FC 0020               1136              MOVE.B  #' ',(A2)+      ;print spaces
000017D6  1A3C 0003               1137              MOVE.B  #3,D5           ;counter for output
000017DA  4EB8 1510               1138              JSR     get_3to5_bit
000017DE  4EB8 14F8               1139              JSR     get_0to2_bit
000017E2  B43C 0007               1140              CMP.B   #7,D2
000017E6  6700 0078               1141              BEQ     immAbLEA
000017EA                          1142  desDecodeLEA
000017EA  14FC 002C               1143              MOVE.B  #',',(A2)+  comma between operands
000017EE  4DF8 12FA               1144              LEA     modeTable,A6
000017F2  103C 0001               1145              MOVE.B  #1,D0
000017F6  C0FC 0008               1146              MULU    #8,D0       value adjusted for jumping
000017FA  4DF8 12FA               1147              LEA     modeTable,A6 Load the table into A6
000017FE  4EB6 0000               1148              JSR     (A6,D0)     Jump to subroutine of value at D0
00001802                          1149         
00001802  4EB8 1544               1150              JSR     get_9to11_bit
00001806  6000 1FCE               1151              BRA     printCode
0000180A                          1152  _JSR
0000180A  7E02                    1153              MOVE.L  #2,D7       ;data is not error
0000180C  14FC 0020               1154              MOVE.B  #' ',(A2)+      ;print spaces
00001810  14FC 0020               1155              MOVE.B  #' ',(A2)+      ;print spaces
00001814  14FC 0020               1156              MOVE.B  #' ',(A2)+      ;print spaces
00001818  14FC 0020               1157              MOVE.B  #' ',(A2)+      ;print spaces
0000181C  14FC 004A               1158              MOVE.B  #'J',(A2)+      ;print J
00001820  14FC 0053               1159              MOVE.B  #'S',(A2)+      ;print S
00001824  14FC 0052               1160              MOVE.B  #'R',(A2)+      ;print R
00001828  14FC 0020               1161              MOVE.B  #' ',(A2)+      ;print spaces
0000182C  14FC 0020               1162              MOVE.B  #' ',(A2)+      ;print spaces
00001830  14FC 0020               1163              MOVE.B  #' ',(A2)+      ;print spaces
00001834  14FC 0020               1164              MOVE.B  #' ',(A2)+      ;print spaces
00001838  1A3C 0003               1165              MOVE.B  #3,D5           ;counter for output
0000183C  4EB8 1510               1166              JSR     get_3to5_bit
00001840  4EB8 14F8               1167              JSR     get_0to2_bit
00001844  B43C 0007               1168              CMP.B   #7,D2
00001848  6700 0006               1169              BEQ     immAbJSR
0000184C  6000 1F88               1170              BRA     printCode
00001850                          1171  immAbJSR
00001850  4DF8 1158               1172              LEA     immAbTable, A6
00001854  C2FC 0008               1173              MULU    #8,D1
00001858  4EB6 1000               1174              JSR     (A6,D1)
0000185C  6000 1F78               1175              BRA     printCode
00001860                          1176  immAbLEA
00001860  4DF8 1158               1177              LEA     immAbTable, A6
00001864  C2FC 0008               1178              MULU    #8,D1
00001868  4EB6 1000               1179              JSR     (A6,D1)
0000186C  6000 FF7C               1180              BRA     desDecodeLEA
00001870                          1181              
00001870                          1182  
00001870                          1183  
00001870                          1184  
00001870                          1185  -------------------- end include --------------------
00001870                          1186              INCLUDE 'op0110.x68'    BRA,Bcc(BCC,BLT,BGE)        
00001870                          1187  op0110      *BRA, Bcc(BCC,BLT,BGE)
00001870  3406                    1188              MOVE.W  D6,D2
00001872  E94A                    1189              LSL.W   #4,D2
00001874  E04A                    1190              LSR.W   #8,D2
00001876  E84A                    1191              LSR.W   #4,D2
00001878  1002                    1192              MOVE.B  D2,D0
0000187A  B07C 0000               1193              CMP.W   #0,D0
0000187E  6700 001A               1194              BEQ     _BRA
00001882  BC7C 6400               1195              CMP.W   #$6400,D6   ;see if it's a BCC
00001886  6700 004C               1196              BEQ     _BCC  
0000188A  BC7C 6D00               1197              CMP.W   #$6D00,D6   ;see if it's a BLT
0000188E  6700 007E               1198              BEQ     _BLT
00001892  BC7C 6C00               1199              CMP.W   #$6C00,D6   ;see if it's a BGE
00001896  6300 00B0               1200              BLS     _BGE          
0000189A                          1201  _BRA
0000189A  7E02                    1202              MOVE.L  #2,D7       ;data is not error
0000189C  14FC 0020               1203              MOVE.B  #' ',(A2)+      ;print spaces
000018A0  14FC 0020               1204              MOVE.B  #' ',(A2)+      ;print spaces
000018A4  14FC 0020               1205              MOVE.B  #' ',(A2)+      ;print spaces
000018A8  14FC 0020               1206              MOVE.B  #' ',(A2)+      ;print spaces
000018AC  14FC 0042               1207              MOVE.B  #'B',(A2)+      ;print B
000018B0  14FC 0052               1208              MOVE.B  #'R',(A2)+      ;print R
000018B4  14FC 0041               1209              MOVE.B  #'A',(A2)+      ;print A
000018B8  14FC 0020               1210              MOVE.B  #' ',(A2)+      ;print spaces
000018BC  14FC 0020               1211              MOVE.B  #' ',(A2)+      ;print spaces
000018C0  14FC 0020               1212              MOVE.B  #' ',(A2)+      ;print spaces
000018C4  14FC 0020               1213              MOVE.B  #' ',(A2)+      ;print spaces
000018C8  14FC 0020               1214              MOVE.B  #' ',(A2)+      ;print spaces
000018CC  1A3C 0003               1215              MOVE.B  #3,D5           ;counter for output
000018D0  6000 00B0               1216              BRA     displacementDecode
000018D4                          1217  _BCC
000018D4  7E02                    1218              MOVE.L  #2,D7       ;data is not error
000018D6  14FC 0020               1219              MOVE.B  #' ',(A2)+      ;print spaces
000018DA  14FC 0020               1220              MOVE.B  #' ',(A2)+      ;print spaces
000018DE  14FC 0020               1221              MOVE.B  #' ',(A2)+      ;print spaces
000018E2  14FC 0020               1222              MOVE.B  #' ',(A2)+      ;print spaces
000018E6  14FC 0042               1223              MOVE.B  #'B',(A2)+      ;print B
000018EA  14FC 0043               1224              MOVE.B  #'C',(A2)+      ;print C
000018EE  14FC 0043               1225              MOVE.B  #'C',(A2)+      ;print C
000018F2  14FC 0020               1226              MOVE.B  #' ',(A2)+      ;print spaces
000018F6  14FC 0020               1227              MOVE.B  #' ',(A2)+      ;print spaces
000018FA  14FC 0020               1228              MOVE.B  #' ',(A2)+      ;print spaces
000018FE  14FC 0020               1229              MOVE.B  #' ',(A2)+      ;print spaces
00001902  14FC 0020               1230              MOVE.B  #' ',(A2)+      ;print spaces
00001906  1A3C 0003               1231              MOVE.B  #3,D5           ;counter for output
0000190A  6000 0076               1232              BRA     displacementDecode
0000190E                          1233  _BLT
0000190E  7E02                    1234              MOVE.L  #2,D7       ;data is not error
00001910  14FC 0020               1235              MOVE.B  #' ',(A2)+      ;print spaces
00001914  14FC 0020               1236              MOVE.B  #' ',(A2)+      ;print spaces
00001918  14FC 0020               1237              MOVE.B  #' ',(A2)+      ;print spaces
0000191C  14FC 0020               1238              MOVE.B  #' ',(A2)+      ;print spaces
00001920  14FC 0042               1239              MOVE.B  #'B',(A2)+      ;print B
00001924  14FC 004C               1240              MOVE.B  #'L',(A2)+      ;print L
00001928  14FC 0054               1241              MOVE.B  #'T',(A2)+      ;print T
0000192C  14FC 0020               1242              MOVE.B  #' ',(A2)+      ;print spaces
00001930  14FC 0020               1243              MOVE.B  #' ',(A2)+      ;print spaces
00001934  14FC 0020               1244              MOVE.B  #' ',(A2)+      ;print spaces
00001938  14FC 0020               1245              MOVE.B  #' ',(A2)+      ;print spaces
0000193C  14FC 0020               1246              MOVE.B  #' ',(A2)+      ;print spaces
00001940  1A3C 0003               1247              MOVE.B  #3,D5           ;counter for output
00001944  6000 003C               1248              BRA     displacementDecode
00001948                          1249  _BGE
00001948  7E02                    1250              MOVE.L  #2,D7       ;data is not error
0000194A  14FC 0020               1251              MOVE.B  #' ',(A2)+      ;print spaces
0000194E  14FC 0020               1252              MOVE.B  #' ',(A2)+      ;print spaces
00001952  14FC 0020               1253              MOVE.B  #' ',(A2)+      ;print spaces
00001956  14FC 0020               1254              MOVE.B  #' ',(A2)+      ;print spaces
0000195A  14FC 0042               1255              MOVE.B  #'B',(A2)+      ;print B
0000195E  14FC 0047               1256              MOVE.B  #'G',(A2)+      ;print G
00001962  14FC 0045               1257              MOVE.B  #'E',(A2)+      ;print E
00001966  14FC 0020               1258              MOVE.B  #' ',(A2)+      ;print spaces
0000196A  14FC 0020               1259              MOVE.B  #' ',(A2)+      ;print spaces
0000196E  14FC 0020               1260              MOVE.B  #' ',(A2)+      ;print spaces
00001972  14FC 0020               1261              MOVE.B  #' ',(A2)+      ;print spaces
00001976  14FC 0020               1262              MOVE.B  #' ',(A2)+      ;print spaces
0000197A  1A3C 0003               1263              MOVE.B  #3,D5           ;counter for output
0000197E  6000 0002               1264              BRA     displacementDecode
00001982                          1265  displacementDecode
00001982  4240                    1266              CLR     D0
00001984  1006                    1267              MOVE.B  D6,D0
00001986  B03C 0000               1268              CMP.B   #$00, D0
0000198A  6700 0022               1269              BEQ     _16_bitD
0000198E  B03C 00FF               1270              CMP.B   #$FF, D0
00001992  6700 003C               1271              BEQ     _32_bitD
00001996                          1272                    
00001996  14FC 0024               1273              MOVE.B  #'$',(A2)+
0000199A  DAC0                    1274              ADDA    D0,A5
0000199C  320D                    1275              MOVE.W  A5,D1
0000199E  C2FC 0008               1276              MULU    #8,D1
000019A2  4DF8 1418               1277              LEA     numTable ,A6 Load the table into A6
000019A6  4EB6 1000               1278              JSR     (A6,D1)     Jump to subroutine of value at D1
000019AA  6000 1E2A               1279              BRA     printCode
000019AE                          1280                    
000019AE                          1281  _16_bitD
000019AE  2004                    1282              MOVE.L  D4,D0
000019B0  E088                    1283              LSR.L   #8,D0
000019B2  E088                    1284              LSR.L   #8,D0
000019B4  C0FC 0008               1285              MULU    #8,D0
000019B8  14FC 0024               1286              MOVE.B  #'$',(A2)+
000019BC  DAC0                    1287              ADDA    D0,A5
000019BE  4240                    1288              CLR     D0
000019C0  300D                    1289              MOVE.W  A5,D0
000019C2  4EB9 000019EA           1290              JSR     print_Address
000019C8  4EB8 1198               1291              JSR     moveIntPointerWord
000019CC  6000 1E08               1292              BRA     printCode
000019D0                          1293  
000019D0                          1294  _32_bitD
000019D0  2004                    1295              MOVE.L  D4,D0
000019D2  C0FC 0008               1296              MULU    #8,D0
000019D6  4DF8 1418               1297              LEA     numTable ,A6 Load the table into A6
000019DA  4EB6 0000               1298              JSR     (A6,D0)     Jump to subroutine of value at D1
000019DE  4EB8 119C               1299              JSR     moveIntPointerLong
000019E2  6000 1DF2               1300              BRA     printCode
000019E6  6000 1DEE               1301              BRA     printCode
000019EA                          1302  print_Address
000019EA  3600                    1303              MOVE.W  D0,D3
000019EC  E04B                    1304              LSR.W   #8,D3
000019EE  E84B                    1305              LSR.W   #4,D3
000019F0  C6FC 0008               1306              MULU.W  #8,D3
000019F4  4DF8 1418               1307              LEA     numTable,A6
000019F8  4EB6 3000               1308              JSR     (A6,D3)
000019FC  4243                    1309              CLR     D3
000019FE  3600                    1310              MOVE.W  D0,D3
00001A00  E94B                    1311              LSL.W   #4,D3
00001A02  E04B                    1312              LSR.W   #8,D3
00001A04  E84B                    1313              LSR.W   #4,D3
00001A06  C6FC 0008               1314              MULU.W  #8,D3
00001A0A  4DF8 1418               1315              LEA     numTable,A6
00001A0E  4EB6 3000               1316              JSR     (A6,D3)
00001A12  4243                    1317              CLR     D3
00001A14  3600                    1318              MOVE.W  D0,D3
00001A16  E14B                    1319              LSL.W   #8,D3
00001A18  E04B                    1320              LSR.W   #8,D3
00001A1A  E84B                    1321              LSR.W   #4,D3
00001A1C  C6FC 0008               1322              MULU.W  #8,D3
00001A20  4DF8 1418               1323              LEA     numTable,A6
00001A24  4EB6 3000               1324              JSR     (A6,D3)
00001A28  4243                    1325              CLR     D3
00001A2A  3600                    1326              MOVE.W  D0,D3
00001A2C  E94B                    1327              LSL.W   #4,D3
00001A2E  E14B                    1328              LSL.W   #8,D3
00001A30  E04B                    1329              LSR.W   #8,D3
00001A32  E84B                    1330              LSR.W   #4,D3
00001A34  C6FC 0008               1331              MULU.W  #8,D3
00001A38  4DF8 1418               1332              LEA     numTable,A6
00001A3C  4EB6 3000               1333              JSR     (A6,D3)
00001A40  4E75                    1334              RTS
00001A42                          1335              
00001A42                          1336  
00001A42                          1337  
00001A42                          1338  
00001A42                          1339  
00001A42                          1340  
00001A42                          1341  
00001A42                          1342  
00001A42                          1343  -------------------- end include --------------------
00001A42                          1344              INCLUDE 'op0001.x68'    MOVE.B MOVEA.B 
00001A42                          1345  
00001A42                          1346  
00001A42                          1347  op0001
00001A42  7E02                    1348              MOVE.L  #2,D7       ;data is not error
00001A44  14FC 0020               1349              MOVE.B  #' ',(A2)+      ;print spaces
00001A48  14FC 0020               1350              MOVE.B  #' ',(A2)+      ;print spaces
00001A4C  14FC 0020               1351              MOVE.B  #' ',(A2)+      ;print spaces
00001A50  14FC 0020               1352              MOVE.B  #' ',(A2)+      ;print spaces
00001A54  14FC 004D               1353              MOVE.B  #'M',(A2)+      ;print M
00001A58  14FC 004F               1354              MOVE.B  #'O',(A2)+      ;print O
00001A5C  14FC 0056               1355              MOVE.B  #'V',(A2)+      ;print V
00001A60  14FC 0045               1356              MOVE.B  #'E',(A2)+      PRINT  E
00001A64  14FC 002E               1357              MOVE.B  #'.',(A2)+
00001A68  14FC 0042               1358              MOVE.B  #'B',(A2)+
00001A6C  14FC 0020               1359              MOVE.B  #' ',(A2)+ 
00001A70  14FC 0020               1360              MOVE.B  #' ',(A2)+
00001A74  4EB8 1510               1361              JSR     get_3to5_bit
00001A78  4EB8 14F8               1362              JSR     get_0to2_bit
00001A7C  B43C 0007               1363              CMP.B   #7,D2
00001A80  6700 0012               1364              BEQ     immAb0001
00001A84                          1365  desDecode0001   
00001A84  14FC 002C               1366              MOVE.B  #',',(A2)+  comma between operands
00001A88  4EB8 152A               1367              JSR     get_6to8_bit
00001A8C  4EB8 1544               1368              JSR     get_9to11_bit 
00001A90  6000 1D44               1369              BRA     printCode
00001A94                          1370  immAb0001
00001A94  4DF8 1158               1371              LEA     immAbTable, A6
00001A98  C2FC 0008               1372              MULU    #8,D1
00001A9C  4EB6 1000               1373              JSR     (A6,D1)
00001AA0  60E2                    1374              BRA     desDecode0001   
00001AA2                          1375  
00001AA2                          1376  
00001AA2                          1377  -------------------- end include --------------------
00001AA2                          1378              INCLUDE 'op0011.x68'    MOVE.W, MOVEA.W
00001AA2                          1379  
00001AA2                          1380  
00001AA2                          1381  
00001AA2                          1382  
00001AA2                          1383  op0011
00001AA2  4242                    1384              CLR     D2
00001AA4  4241                    1385              CLR     D1
00001AA6  3406                    1386              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001AA8  EF4A                    1387              LSL.W   #7,D2       BIT* **** **** 0000
00001AAA  E04A                    1388              LSR.W   #8,D2       0000 0000 BIT* ****
00001AAC  EA4A                    1389              LSR.W   #5,D2       0000 0000 0000 0BIT
00001AAE  B43C 0001               1390              CMP.B   #1,D2
00001AB2  6700 0038               1391              BEQ     MoveA_W
00001AB6  6600 0002               1392              BNE     Move_W
00001ABA                          1393  Move_W
00001ABA  7E02                    1394              MOVE.L  #2,D7       ;data is not error
00001ABC  14FC 0020               1395              MOVE.B  #' ',(A2)+      ;print spaces
00001AC0  14FC 0020               1396              MOVE.B  #' ',(A2)+      ;print spaces
00001AC4  14FC 0020               1397              MOVE.B  #' ',(A2)+      ;print spaces
00001AC8  14FC 0020               1398              MOVE.B  #' ',(A2)+      ;print spaces
00001ACC  14FC 004D               1399              MOVE.B  #'M',(A2)+      ;print M
00001AD0  14FC 004F               1400              MOVE.B  #'O',(A2)+      ;print O
00001AD4  14FC 0056               1401              MOVE.B  #'V',(A2)+      ;print V
00001AD8  14FC 0045               1402              MOVE.B  #'E',(A2)+      PRINT  E
00001ADC  14FC 002E               1403              MOVE.B  #'.',(A2)+
00001AE0  14FC 0057               1404              MOVE.B  #'W',(A2)+
00001AE4  14FC 0020               1405              MOVE.B  #' ',(A2)+ 
00001AE8  6000 0034               1406              BRA     decode0011
00001AEC                          1407  MoveA_W
00001AEC  7E02                    1408              MOVE.L  #2,D7       ;data is not error
00001AEE  14FC 0020               1409              MOVE.B  #' ',(A2)+      ;print spaces
00001AF2  14FC 0020               1410              MOVE.B  #' ',(A2)+      ;print spaces
00001AF6  14FC 0020               1411              MOVE.B  #' ',(A2)+      ;print spaces
00001AFA  14FC 0020               1412              MOVE.B  #' ',(A2)+      ;print spaces
00001AFE  14FC 004D               1413              MOVE.B  #'M',(A2)+      ;print M
00001B02  14FC 004F               1414              MOVE.B  #'O',(A2)+      ;print O
00001B06  14FC 0056               1415              MOVE.B  #'V',(A2)+      ;print V
00001B0A  14FC 0045               1416              MOVE.B  #'E',(A2)+      PRINT  E
00001B0E  14FC 0041               1417              MOVE.B  #'A',(A2)+      PRINT  E
00001B12  14FC 002E               1418              MOVE.B  #'.',(A2)+
00001B16  14FC 0057               1419              MOVE.B  #'W',(A2)+
00001B1A  6000 0002               1420              BRA     decode0011
00001B1E                          1421  decode0011
00001B1E  14FC 0020               1422              MOVE.B  #' ',(A2)+   
00001B22  4242                    1423              CLR     D2
00001B24  4241                    1424              CLR     D1
00001B26  1406                    1425              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001B28  E50A                    1426              LSL.B   #2,D2       **** **** BIT* **00
00001B2A  EA0A                    1427              LSR.B   #5,D2       **** **** 0000 0BIT
00001B2C  1002                    1428              MOVE.B  D2,D0
00001B2E  C0FC 0008               1429              MULU    #8,D0       value adjusted for jumping
00001B32  4DF8 12FA               1430              LEA     modeTable,A6 Load the table into A6
00001B36  4EB6 0000               1431              JSR     (A6,D0)     Jump to subroutine of value at D0
00001B3A                          1432              
00001B3A  1206                    1433              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001B3C  EB09                    1434              LSL.B   #5,D1       **** **** BIT0 0000
00001B3E  EA09                    1435              LSR.B   #5,D1       **** **** 0000 0BIT
00001B40  1001                    1436              MOVE.B  D1,D0      
00001B42  C0FC 0008               1437              MULU    #8,D0       value adjusted for jumping
00001B46  4DF8 13A8               1438              LEA     regNumTable ,A6 Load the table into A6
00001B4A  4EB6 0000               1439              JSR     (A6,D0)     Jump to subroutine of value at D1
00001B4E  B43C 0007               1440              CMP.B   #7,D2
00001B52  6700 0036               1441              BEQ     immAb0011
00001B56                          1442  desDecode0011   
00001B56  14FC 002C               1443              MOVE.B  #',',(A2)+  comma between operands
00001B5A  4242                    1444              CLR     D2
00001B5C  4241                    1445              CLR     D1
00001B5E  3406                    1446              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001B60  EF4A                    1447              LSL.W   #7,D2       BIT* **** **** 0000
00001B62  E04A                    1448              LSR.W   #8,D2       0000 0000 BIT* ****
00001B64  EA4A                    1449              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001B66  C4FC 0008               1450              MULU    #8,D2       value adjusted for jumping
00001B6A  4DF8 12FA               1451              LEA     modeTable,A6 Load the table into A6
00001B6E  4EB6 2000               1452              JSR     (A6,D2)     Jump to subroutine of value at D2
00001B72                          1453             
00001B72  3206                    1454              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001B74  E949                    1455              LSL.W   #4,D1       BIT* **** **** 0000
00001B76  E049                    1456              LSR.W   #8,D1       0000 0000 BIT* ****
00001B78  EA49                    1457              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001B7A  C2FC 0008               1458              MULU    #8,D1       value adjusted for jumping
00001B7E  4DF8 13A8               1459              LEA     regNumTable ,A6 Load the table into A6
00001B82  4EB6 1000               1460              JSR     (A6,D1)     Jump to subroutine of value at D1    
00001B86  6000 1C4E               1461              BRA     printCode
00001B8A                          1462  immAb0011
00001B8A  4DF8 1158               1463              LEA     immAbTable, A6
00001B8E  C2FC 0008               1464              MULU    #8,D1
00001B92  4EB6 1000               1465              JSR     (A6,D1)
00001B96  B27C 0020               1466              CMP     #32,D1      if immediate data
00001B9A  6700 0004               1467              BEQ     moveIntPointerWord0011
00001B9E  66B6                    1468              BNE     desDecode0011 
00001BA0                          1469  moveIntPointerWord0011
00001BA0  4EB8 1198               1470              JSR     moveIntPointerWord 
00001BA4  60B0                    1471              BRA     desDecode0011 
00001BA4  60B0                    1472  -------------------- end include --------------------
00001BA6                          1473              INCLUDE 'op0010.x68'    MOVE.L, MOVEA.L
00001BA6                          1474  
00001BA6                          1475  
00001BA6                          1476  
00001BA6                          1477  
00001BA6                          1478  op0010
00001BA6  4242                    1479              CLR     D2
00001BA8  4241                    1480              CLR     D1
00001BAA  3406                    1481              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001BAC  EF4A                    1482              LSL.W   #7,D2       BIT* **** **** 0000
00001BAE  E04A                    1483              LSR.W   #8,D2       0000 0000 BIT* ****
00001BB0  EA4A                    1484              LSR.W   #5,D2       0000 0000 0000 0BIT
00001BB2  B43C 0001               1485              CMP.B   #1,D2
00001BB6  6700 0038               1486              BEQ     MoveA_L
00001BBA  6600 0002               1487              BNE     Move_L
00001BBE                          1488  Move_L
00001BBE  7E02                    1489              MOVE.L  #2,D7       ;data is not error
00001BC0  14FC 0020               1490              MOVE.B  #' ',(A2)+      ;print spaces
00001BC4  14FC 0020               1491              MOVE.B  #' ',(A2)+      ;print spaces
00001BC8  14FC 0020               1492              MOVE.B  #' ',(A2)+      ;print spaces
00001BCC  14FC 0020               1493              MOVE.B  #' ',(A2)+      ;print spaces
00001BD0  14FC 004D               1494              MOVE.B  #'M',(A2)+      ;print M
00001BD4  14FC 004F               1495              MOVE.B  #'O',(A2)+      ;print O
00001BD8  14FC 0056               1496              MOVE.B  #'V',(A2)+      ;print V
00001BDC  14FC 0045               1497              MOVE.B  #'E',(A2)+      PRINT  E
00001BE0  14FC 002E               1498              MOVE.B  #'.',(A2)+
00001BE4  14FC 004C               1499              MOVE.B  #'L',(A2)+
00001BE8  14FC 0020               1500              MOVE.B  #' ',(A2)+ 
00001BEC  6000 0034               1501              BRA     decode0010
00001BF0                          1502  MoveA_L
00001BF0  7E02                    1503              MOVE.L  #2,D7       ;data is not error
00001BF2  14FC 0020               1504              MOVE.B  #' ',(A2)+      ;print spaces
00001BF6  14FC 0020               1505              MOVE.B  #' ',(A2)+      ;print spaces
00001BFA  14FC 0020               1506              MOVE.B  #' ',(A2)+      ;print spaces
00001BFE  14FC 0020               1507              MOVE.B  #' ',(A2)+      ;print spaces
00001C02  14FC 004D               1508              MOVE.B  #'M',(A2)+      ;print M
00001C06  14FC 004F               1509              MOVE.B  #'O',(A2)+      ;print O
00001C0A  14FC 0056               1510              MOVE.B  #'V',(A2)+      ;print V
00001C0E  14FC 0045               1511              MOVE.B  #'E',(A2)+      PRINT  E
00001C12  14FC 0041               1512              MOVE.B  #'A',(A2)+      PRINT  E
00001C16  14FC 002E               1513              MOVE.B  #'.',(A2)+
00001C1A  14FC 004C               1514              MOVE.B  #'L',(A2)+
00001C1E  6000 0002               1515              BRA     decode0010
00001C22                          1516  decode0010
00001C22  14FC 0020               1517              MOVE.B  #' ',(A2)+   
00001C26                          1518  
00001C26  4242                    1519              CLR     D2
00001C28  4241                    1520              CLR     D1
00001C2A  1406                    1521              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001C2C  E50A                    1522              LSL.B   #2,D2       **** **** BIT* **00
00001C2E  EA0A                    1523              LSR.B   #5,D2       **** **** 0000 0BIT
00001C30  1002                    1524              MOVE.B  D2,D0
00001C32  C0FC 0008               1525              MULU    #8,D0       value adjusted for jumping
00001C36  4DF8 12FA               1526              LEA     modeTable,A6 Load the table into A6
00001C3A  4EB6 0000               1527              JSR     (A6,D0)     Jump to subroutine of value at D0
00001C3E                          1528              
00001C3E  1206                    1529              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001C40  EB09                    1530              LSL.B   #5,D1       **** **** BIT0 0000
00001C42  EA09                    1531              LSR.B   #5,D1       **** **** 0000 0BIT
00001C44  1001                    1532              MOVE.B  D1,D0      
00001C46  C0FC 0008               1533              MULU    #8,D0       value adjusted for jumping
00001C4A  4DF8 13A8               1534              LEA     regNumTable ,A6 Load the table into A7
00001C4E  4EB6 0000               1535              JSR     (A6,D0)     Jump to subroutine of value at D1
00001C52  B43C 0007               1536              CMP.B   #7,D2
00001C56  6700 0036               1537              BEQ     immAb0010
00001C5A                          1538  desDecode0010   
00001C5A  14FC 002C               1539              MOVE.B  #',',(A2)+  comma between operands
00001C5E  4242                    1540              CLR     D2
00001C60  4241                    1541              CLR     D1
00001C62  3406                    1542              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001C64  EF4A                    1543              LSL.W   #7,D2       BIT* **** **** 0000
00001C66  E04A                    1544              LSR.W   #8,D2       0000 0000 BIT* ****
00001C68  EA4A                    1545              LSR.W   #5,D2       0000 0000 0000 0BIT 
00001C6A  C4FC 0008               1546              MULU    #8,D2       value adjusted for jumping
00001C6E  4DF8 12FA               1547              LEA     modeTable,A6 Load the table into A6
00001C72  4EB6 2000               1548              JSR     (A6,D2)     Jump to subroutine of value at D2
00001C76                          1549             
00001C76  3206                    1550              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001C78  E949                    1551              LSL.W   #4,D1       BIT* **** **** 0000
00001C7A  E049                    1552              LSR.W   #8,D1       0000 0000 BIT* ****
00001C7C  EA49                    1553              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001C7E  C2FC 0008               1554              MULU    #8,D1       value adjusted for jumping
00001C82  4DF8 13A8               1555              LEA     regNumTable ,A6 Load the table into A6
00001C86  4EB6 1000               1556              JSR     (A6,D1)     Jump to subroutine of value at D1    
00001C8A  6000 1B4A               1557              BRA     printCode
00001C8E                          1558  immAb0010
00001C8E  B27C 0020               1559              CMP     #32,D1      if immediate data
00001C92  6700 0010               1560              BEQ     immLong
00001C96                          1561  jumpimmAb0010
00001C96  4DF8 1158               1562              LEA     immAbTable, A6
00001C9A  C2FC 0008               1563              MULU    #8,D1
00001C9E  4EB6 1000               1564              JSR     (A6,D1)
00001CA2  60B6                    1565              BRA     desDecode0010
00001CA4                          1566  immLong
00001CA4  123C 0004               1567              MOVE.B  #4,D1
00001CA8  60EC                    1568              BRA     jumpimmAb0010           
00001CAA                          1569  
00001CAA                          1570  
00001CAA                          1571  -------------------- end include --------------------
00001CAA                          1572  
00001CAA                          1573              INCLUDE 'op1101.x68'    ADD,ADDA
00001CAA                          1574  op1101 
00001CAA                          1575      ;ADD, ADDA
00001CAA                          1576      
00001CAA                          1577      ; we need to determine what its size is (B,W,L) putting the data in D6
00001CAA  4EB8 1618               1578      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001CAE                          1579      ; we use to decode and branch
00001CAE                          1580      *-now D3 contains the OPMODE FIELD telling us wether this is
00001CAE                          1581      *-a LONG or a WORD
00001CAE                          1582      
00001CAE                          1583      *-now we need to decipher if its any of the adds
00001CAE  B63C 0000               1584      CMP.B   #hex_0,D3   is this ADD.B
00001CB2  6700 003A               1585      BEQ add_B           ;<EA> -> Dn
00001CB6  B63C 0001               1586      CMP.B   #hex_1,D3   is it ADD.W
00001CBA  6700 005A               1587      BEQ add_W       ;<EA> ->Dn
00001CBE  B63C 0002               1588      CMP.B   #hex_2,D3   is it ADD.L
00001CC2  6700 007A               1589      BEQ add_L ;<EA> ->Dn
00001CC6                          1590      
00001CC6  B63C 0004               1591      CMP.B   #hex_4,D3
00001CCA  6700 00CA               1592      BEQ add_B_EA Dn -> EA
00001CCE                          1593      
00001CCE  B63C 0005               1594      CMP.B   #hex_5,D3
00001CD2  6700 00EA               1595      BEQ add_W_EA Dn ->EA
00001CD6  B63C 0006               1596      CMP.B   #hex_6,D3
00001CDA  6700 010A               1597      BEQ add_L_EA Dn - >EA
00001CDE  B63C 0003               1598      CMP.B   #hex_3,D3
00001CE2  6700 015A               1599      BEQ adda_W
00001CE6                          1600      
00001CE6  B63C 0007               1601      CMP.B   #hex_7,D3
00001CEA  6700 018E               1602      BEQ adda_L
00001CEE                          1603  add_B   ;add.B EA->Dn
00001CEE                          1604      
00001CEE                          1605      *-store the size of the operation for immediate decoding use here/below
00001CEE                          1606      *-D7 equals storage of size of operation
00001CEE                          1607      *- #3 is byte , #2 is word #1 is long
00001CEE                          1608      ;MOVE.B  #3,D7
00001CEE  14FC 0020               1609      MOVE.B  #' ',(A2)+
00001CF2  14FC 0020               1610      MOVE.B  #' ',(A2)+
00001CF6  14FC 0020               1611      MOVE.B  #' ',(A2)+
00001CFA  14FC 0020               1612      MOVE.B  #' ',(A2)+
00001CFE  14FC 0041               1613      MOVE.B  #'A',(A2)+
00001D02  14FC 0044               1614      MOVE.B  #'D',(A2)+
00001D06  14FC 0044               1615      MOVE.B  #'D',(A2)+
00001D0A  14FC 002E               1616      MOVE.B  #'.',(A2)+
00001D0E  14FC 0042               1617      MOVE.B  #'B',(A2)+
00001D12  6000 0052               1618      BRA     eaDnDecodeAdd
00001D16                          1619  
00001D16                          1620  add_W   ;add.W EA->Dn
00001D16                          1621      
00001D16                          1622      *-store the size of the operation for immediate decoding use here/below
00001D16                          1623      *-D7 equals storage of size of operation
00001D16                          1624      *- #3 is byte , #2 is word #1 is long
00001D16                          1625      ;MOVE.B  #3,D7
00001D16  14FC 0020               1626      MOVE.B  #' ',(A2)+
00001D1A  14FC 0020               1627      MOVE.B  #' ',(A2)+
00001D1E  14FC 0020               1628      MOVE.B  #' ',(A2)+
00001D22  14FC 0020               1629      MOVE.B  #' ',(A2)+
00001D26  14FC 0041               1630      MOVE.B  #'A',(A2)+
00001D2A  14FC 0044               1631      MOVE.B  #'D',(A2)+
00001D2E  14FC 0044               1632      MOVE.B  #'D',(A2)+
00001D32  14FC 002E               1633      MOVE.B  #'.',(A2)+
00001D36  14FC 0057               1634      MOVE.B  #'W',(A2)+
00001D3A  6000 002A               1635      BRA     eaDnDecodeAdd
00001D3E                          1636  add_L   ;add.L EA->Dn
00001D3E                          1637      
00001D3E                          1638      *-store the size of the operation for immediate decoding use here/below
00001D3E                          1639      *-D7 equals storage of size of operation
00001D3E                          1640      *- #3 is byte , #2 is word #1 is long
00001D3E                          1641      ;MOVE.B  #3,D7
00001D3E  14FC 0020               1642      MOVE.B  #' ',(A2)+
00001D42  14FC 0020               1643      MOVE.B  #' ',(A2)+
00001D46  14FC 0020               1644      MOVE.B  #' ',(A2)+
00001D4A  14FC 0020               1645      MOVE.B  #' ',(A2)+
00001D4E  14FC 0041               1646      MOVE.B  #'A',(A2)+
00001D52  14FC 0044               1647      MOVE.B  #'D',(A2)+
00001D56  14FC 0044               1648      MOVE.B  #'D',(A2)+
00001D5A  14FC 002E               1649      MOVE.B  #'.',(A2)+
00001D5E  14FC 004C               1650      MOVE.B  #'L',(A2)+
00001D62  6000 0002               1651      BRA     eaDnDecodeAdd
00001D66                          1652  eaDnDecodeAdd
00001D66                          1653      *-always allow 4 spaces
00001D66  14FC 0020               1654      MOVE.B  #' ',(A2)+
00001D6A  14FC 0020               1655      MOVE.B  #' ',(A2)+
00001D6E  14FC 0020               1656      MOVE.B  #' ',(A2)+
00001D72  14FC 0020               1657      MOVE.B  #' ',(A2)+
00001D76  4EB8 1510               1658      JSR     get_3to5_bit    decode 3_5 for EA mode 
00001D7A  4EB8 14F8               1659      JSR     get_0to2_bit    decode 0_2 foe EA register
00001D7E  14FC 002C               1660              MOVE.B  #',',(A2)+
00001D82  123C 0000               1661              MOVE.B  #0,D1           always Dn format
00001D86  4DF8 12FA               1662              LEA     modeTable,A6
00001D8A  4EB6 1000               1663              JSR     (A6,D1)
00001D8E  4EB8 1544               1664              JSR     get_9to11_bit decode 9_11 for Dn register
00001D92  6000 1A42               1665              BRA printcode  
00001D96                          1666  add_B_EA   ;add.B Dn->EA
00001D96                          1667      
00001D96                          1668      *-store the size of the operation for immediate decoding use here/below
00001D96                          1669      *-D7 equals storage of size of operation
00001D96                          1670      *- #3 is byte , #2 is word #1 is long
00001D96                          1671      ;MOVE.B  #3,D7
00001D96  14FC 0020               1672      MOVE.B  #' ',(A2)+
00001D9A  14FC 0020               1673      MOVE.B  #' ',(A2)+
00001D9E  14FC 0020               1674      MOVE.B  #' ',(A2)+
00001DA2  14FC 0020               1675      MOVE.B  #' ',(A2)+
00001DA6  14FC 0041               1676      MOVE.B  #'A',(A2)+
00001DAA  14FC 0044               1677      MOVE.B  #'D',(A2)+
00001DAE  14FC 0044               1678      MOVE.B  #'D',(A2)+
00001DB2  14FC 002E               1679      MOVE.B  #'.',(A2)+
00001DB6  14FC 0042               1680      MOVE.B  #'B',(A2)+
00001DBA  6000 0052               1681      BRA     DneaDecodeAdd    
00001DBE                          1682  
00001DBE                          1683  add_W_EA   ;add.W Dn->EA
00001DBE                          1684      
00001DBE                          1685      *-store the size of the operation for immediate decoding use here/below
00001DBE                          1686      *-D7 equals storage of size of operation
00001DBE                          1687      *- #3 is byte , #2 is word #1 is long
00001DBE                          1688      ;MOVE.B  #3,D7
00001DBE  14FC 0020               1689      MOVE.B  #' ',(A2)+
00001DC2  14FC 0020               1690      MOVE.B  #' ',(A2)+
00001DC6  14FC 0020               1691      MOVE.B  #' ',(A2)+
00001DCA  14FC 0020               1692      MOVE.B  #' ',(A2)+
00001DCE  14FC 0041               1693      MOVE.B  #'A',(A2)+
00001DD2  14FC 0044               1694      MOVE.B  #'D',(A2)+
00001DD6  14FC 0044               1695      MOVE.B  #'D',(A2)+
00001DDA  14FC 002E               1696      MOVE.B  #'.',(A2)+
00001DDE  14FC 0057               1697      MOVE.B  #'W',(A2)+
00001DE2  6000 002A               1698      BRA     DneaDecodeAdd    
00001DE6                          1699  add_L_EA   ;add.L Dn->EA
00001DE6                          1700      
00001DE6                          1701      *-store the size of the operation for immediate decoding use here/below
00001DE6                          1702      *-D7 equals storage of size of operation
00001DE6                          1703      *- #3 is byte , #2 is word #1 is long
00001DE6                          1704      ;MOVE.B  #3,D7
00001DE6  14FC 0020               1705      MOVE.B  #' ',(A2)+
00001DEA  14FC 0020               1706      MOVE.B  #' ',(A2)+
00001DEE  14FC 0020               1707      MOVE.B  #' ',(A2)+
00001DF2  14FC 0020               1708      MOVE.B  #' ',(A2)+
00001DF6  14FC 0041               1709      MOVE.B  #'A',(A2)+
00001DFA  14FC 0044               1710      MOVE.B  #'D',(A2)+
00001DFE  14FC 0044               1711      MOVE.B  #'D',(A2)+
00001E02  14FC 002E               1712      MOVE.B  #'.',(A2)+
00001E06  14FC 004C               1713      MOVE.B  #'L',(A2)+
00001E0A  6000 0002               1714      BRA     DneaDecodeAdd    
00001E0E                          1715  DneaDecodeAdd    
00001E0E                          1716      *-always allow 4 spaces
00001E0E  14FC 0020               1717      MOVE.B  #' ',(A2)+
00001E12  14FC 0020               1718      MOVE.B  #' ',(A2)+
00001E16  14FC 0020               1719      MOVE.B  #' ',(A2)+
00001E1A  14FC 0020               1720      MOVE.B  #' ',(A2)+
00001E1E  123C 0000               1721              MOVE.B  #0,D1           always Dn format
00001E22  4DF8 12FA               1722              LEA     modeTable,A6
00001E26  4EB6 1000               1723              JSR     (A6,D1)
00001E2A  4EB8 1544               1724              JSR     get_9to11_bit decode 9_11 for Dn register
00001E2E  14FC 002C               1725              MOVE.B  #',',(A2)+
00001E32  4EB8 1510               1726      JSR     get_3to5_bit    decode 3_5 for EA mode 
00001E36  4EB8 14F8               1727      JSR     get_0to2_bit    decode 0_2 foe EA register
00001E3A  6000 199A               1728              BRA printcode  
00001E3E                          1729  adda_W  ;ADDA.W
00001E3E                          1730      *-maybe error checking
00001E3E                          1731      *-we know its ADDA.W so print it to our buffer
00001E3E                          1732      *-ex ADDA.W D2,D7
00001E3E                          1733      
00001E3E  14FC 0020               1734      MOVE.B  #' ',(A2)+
00001E42  14FC 0020               1735      MOVE.B  #' ',(A2)+
00001E46  14FC 0020               1736      MOVE.B  #' ',(A2)+
00001E4A  14FC 0020               1737      MOVE.B  #' ',(A2)+
00001E4E  14FC 0041               1738      MOVE.B  #'A',(A2)+
00001E52  14FC 0044               1739      MOVE.B  #'D',(A2)+
00001E56  14FC 0044               1740      MOVE.B  #'D',(A2)+
00001E5A  14FC 0041               1741      MOVE.B  #'A',(A2)+
00001E5E  14FC 002E               1742      MOVE.B  #'.',(A2)+
00001E62  14FC 0057               1743      MOVE.B  #'W',(A2)+
00001E66                          1744      *-always allow 4 spaces
00001E66  14FC 0020               1745      MOVE.B  #' ',(A2)+
00001E6A  14FC 0020               1746      MOVE.B  #' ',(A2)+
00001E6E  14FC 0020               1747      MOVE.B  #' ',(A2)+
00001E72  14FC 0020               1748      MOVE.B  #' ',(A2)+
00001E76  6000 003E               1749      BRA     decodeADDA
00001E7A                          1750  adda_L  ;ADDA.L
00001E7A                          1751      *-maybe error checking
00001E7A                          1752      *-we know its ADDA.W so print it to our buffer
00001E7A                          1753      *-ex ADDA.W D2,D7
00001E7A                          1754      
00001E7A  14FC 0020               1755      MOVE.B  #' ',(A2)+
00001E7E  14FC 0020               1756      MOVE.B  #' ',(A2)+
00001E82  14FC 0020               1757      MOVE.B  #' ',(A2)+
00001E86  14FC 0020               1758      MOVE.B  #' ',(A2)+
00001E8A  14FC 0041               1759      MOVE.B  #'A',(A2)+
00001E8E  14FC 0044               1760      MOVE.B  #'D',(A2)+
00001E92  14FC 0044               1761      MOVE.B  #'D',(A2)+
00001E96  14FC 0041               1762      MOVE.B  #'A',(A2)+
00001E9A  14FC 002E               1763      MOVE.B  #'.',(A2)+
00001E9E  14FC 004C               1764      MOVE.B  #'L',(A2)+
00001EA2                          1765      *-always allow 4 spaces
00001EA2  14FC 0020               1766      MOVE.B  #' ',(A2)+
00001EA6  14FC 0020               1767      MOVE.B  #' ',(A2)+
00001EAA  14FC 0020               1768      MOVE.B  #' ',(A2)+
00001EAE  14FC 0020               1769      MOVE.B  #' ',(A2)+
00001EB2  6000 0002               1770      BRA     decodeADDA
00001EB6                          1771  decodeADDA
00001EB6  4EB8 1510               1772      JSR     get_3to5_bit
00001EBA  4EB8 14F8               1773      JSR     get_0to2_bit
00001EBE  B43C 0007               1774              CMP.B   #7,D2
00001EC2  6700 001C               1775              BEQ     immAb1101
00001EC6                          1776  desDecode1101       
00001EC6  14FC 002C               1777          MOVE.B  #',',(A2)+
00001ECA  4241                    1778              CLR     D1
00001ECC  123C 0008               1779              MOVE.B  #8,D1           always An format
00001ED0  4DF8 12FA               1780              LEA     modeTable,A6
00001ED4  4EB6 1000               1781              JSR     (A6,D1)
00001ED8  4EB8 1544               1782              JSR     get_9to11_bit decode 9_11 for Dn register
00001EDC  6000 18F8               1783              BRA     printCode
00001EE0                          1784  immAb1101
00001EE0  4DF8 1158               1785              LEA     immAbTable, A6
00001EE4  C2FC 0008               1786              MULU    #8,D1
00001EE8  4EB6 1000               1787              JSR     (A6,D1)
00001EEC  B27C 0020               1788              CMP     #32,D1      if immediate data
00001EF0  6700 0004               1789              BEQ     moveIntPointerWord1101
00001EF4  66D0                    1790              BNE     desDecode1101 
00001EF6                          1791  moveIntPointerWord1101 
00001EF6  4EB8 1198               1792              JSR     moveIntPointerWord 
00001EFA  60CA                    1793              BRA     desDecode1101   
00001EFC                          1794  
00001EFC                          1795  
00001EFC                          1796  
00001EFC                          1797  
00001EFC                          1798  
00001EFC                          1799  -------------------- end include --------------------
00001EFC                          1800              INCLUDE 'op1001.x68'    SUB, SUBA
00001EFC                          1801  op1001
00001EFC                          1802  
00001EFC                          1803      
00001EFC                          1804          ; we need to determine what its size is (B,W,L) putting the data in D6
00001EFC  4EB8 1618               1805      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001F00                          1806      ; we use to decode and branch
00001F00                          1807      *-now D3 contains the OPMODE FIELD telling us wether this is
00001F00                          1808      *-a LONG or a WORD
00001F00                          1809      
00001F00                          1810      *-now we need to decipher if its any of the subs
00001F00  B63C 0000               1811      CMP.B   #hex_0,D3 is this SUB.B
00001F04  6700 0002               1812      BEQ sub_B   ;<EA> -> Dn
00001F08                          1813  
00001F08                          1814  
00001F08                          1815  sub_B
00001F08                          1816      ;EA ->Dn
00001F08                          1817      
00001F08                          1818          *-store the size of the operation for immediate decoding use here/below
00001F08                          1819      *-D7 equals storage of size of operation
00001F08                          1820      *- #3 is byte , #2 is word #1 is long
00001F08                          1821      ;MOVE.B  #3,D7
00001F08                          1822      
00001F08                          1823  
00001F08  14FC 0020               1824      MOVE.B  #' ',(A2)+
00001F0C  14FC 0020               1825      MOVE.B  #' ',(A2)+
00001F10  14FC 0020               1826      MOVE.B  #' ',(A2)+
00001F14  14FC 0020               1827      MOVE.B  #' ',(A2)+
00001F18  14FC 0053               1828      MOVE.B  #'S',(A2)+
00001F1C  14FC 0055               1829      MOVE.B  #'U',(A2)+
00001F20  14FC 0042               1830      MOVE.B  #'B',(A2)+
00001F24  14FC 002E               1831      MOVE.B  #'.',(A2)+
00001F28  14FC 0042               1832      MOVE.B  #'B',(A2)+
00001F2C                          1833      *-always allow 4 spaces
00001F2C  14FC 0020               1834      MOVE.B  #' ',(A2)+
00001F30  14FC 0020               1835      MOVE.B  #' ',(A2)+
00001F34                          1836  
00001F34  14FC 0020               1837      MOVE.B  #' ',(A2)+
00001F38                          1838      
00001F38                          1839          *-deCDOE EA (Dn,Dn
00001F38                          1840          * MachineCode: 0001 **** **** **BI T***
00001F38                          1841      *-insert immediate subressing here
00001F38  4242                    1842              CLR     D2
00001F3A  4241                    1843              CLR     D1
00001F3C  1406                    1844              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001F3E  E50A                    1845              LSL.B   #2,D2       **** **** BIT* **00
00001F40  EA0A                    1846              LSR.B   #5,D2       **** **** 0000 0BIT
00001F42  C4FC 0008               1847              MULU    #8,D2       value adjusted for jumping
00001F46  4DF8 12FA               1848              LEA     modeTable,A6 Load the table into A6
00001F4A  4EB6 2000               1849              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001F4E                          1850  
00001F4E                          1851  
00001F4E                          1852   * MachineCode: 0001 **** **** **** *BIT
00001F4E                          1853              
00001F4E  1206                    1854              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001F50  EB09                    1855              LSL.B   #5,D1       **** **** BIT0 0000
00001F52  EA09                    1856              LSR.B   #5,D1       **** **** 0000 0BIT      
00001F54  C2FC 0008               1857              MULU    #8,D1       value adjusted for jumping
00001F58  4FF8 13A8               1858              LEA     regNumTable ,A7 Load the table into A7
00001F5C  4EB7 1000               1859              JSR     (A7,D1)     Jump to subroutine of value at D1
00001F60  B23C 0020               1860              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001F64                          1861              ;BEQ.W   immediateData   ;branch to immediateData
00001F64  14FC 002C               1862              MOVE.B  #',',(A2)+
00001F68  14FC 0044               1863              MOVE.B  #'D',(A2)+
00001F6C                          1864              
00001F6C                          1865    *------------------------------------------------------------
00001F6C  4241                    1866              CLR     D1
00001F6E  3206                    1867              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001F70  E949                    1868              LSL.W   #4,D1       BIT* **** **** 0000
00001F72  E049                    1869              LSR.W   #8,D1       0000 0000 BIT* ****
00001F74  EA49                    1870              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001F76  C2FC 0008               1871              MULU    #8,D1       value adjusted for jumping
00001F7A  4FF8 1418               1872              LEA     numTable ,A7 Load the table into A7
00001F7E  4EB7 1000               1873              JSR     (A7,D1)     Jump to subroutine of value at D1   
00001F82  6000 1852               1874              BRA printcode  
00001F86                          1875      
00001F86                          1876      
00001F86                          1877       
00001F86                          1878  sub_W   ;sub.B EA->Dn
00001F86                          1879      
00001F86                          1880      *-store the size of the operation for immediate decoding use here/below
00001F86                          1881      *-D7 equals storage of size of operation
00001F86                          1882      *- #3 is byte , #2 is word #1 is long
00001F86                          1883      ;MOVE.B  #3,D7
00001F86                          1884      
00001F86                          1885  
00001F86  14FC 0020               1886      MOVE.B  #' ',(A2)+
00001F8A  14FC 0020               1887      MOVE.B  #' ',(A2)+
00001F8E  14FC 0020               1888      MOVE.B  #' ',(A2)+
00001F92  14FC 0020               1889      MOVE.B  #' ',(A2)+
00001F96  14FC 0041               1890      MOVE.B  #'A',(A2)+
00001F9A  14FC 0044               1891      MOVE.B  #'D',(A2)+
00001F9E  14FC 0044               1892      MOVE.B  #'D',(A2)+
00001FA2  14FC 002E               1893      MOVE.B  #'.',(A2)+
00001FA6  14FC 0057               1894      MOVE.B  #'W',(A2)+
00001FAA                          1895      *-always allow 4 spaces
00001FAA  14FC 0020               1896      MOVE.B  #' ',(A2)+
00001FAE  14FC 0020               1897      MOVE.B  #' ',(A2)+
00001FB2  14FC 0020               1898      MOVE.B  #' ',(A2)+
00001FB6                          1899      
00001FB6                          1900      *-deCDOE EA (Dn,Dn
00001FB6                          1901          * MachineCode: 0001 **** **** **BI T***
00001FB6                          1902      *-insert immediate subressing here
00001FB6  4242                    1903              CLR     D2
00001FB8  4241                    1904              CLR     D1
00001FBA  1406                    1905              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001FBC  E50A                    1906              LSL.B   #2,D2       **** **** BIT* **00
00001FBE  EA0A                    1907              LSR.B   #5,D2       **** **** 0000 0BIT
00001FC0  C4FC 0008               1908              MULU    #8,D2       value adjusted for jumping
00001FC4  4DF8 12FA               1909              LEA     modeTable,A6 Load the table into A6
00001FC8  4EB6 2000               1910              JSR     (A6,D2)     Jump to subroutine of value at D0   
00001FCC                          1911  
00001FCC                          1912  
00001FCC                          1913   * MachineCode: 0001 **** **** **** *BIT
00001FCC                          1914              
00001FCC  1206                    1915              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001FCE  EB09                    1916              LSL.B   #5,D1       **** **** BIT0 0000
00001FD0  EA09                    1917              LSR.B   #5,D1       **** **** 0000 0BIT      
00001FD2  C2FC 0008               1918              MULU    #8,D1       value adjusted for jumping
00001FD6  4FF8 13A8               1919              LEA     regNumTable ,A7 Load the table into A7
00001FDA  4EB7 1000               1920              JSR     (A7,D1)     Jump to subroutine of value at D1
00001FDE  B23C 0020               1921              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00001FE2                          1922              ;BEQ.W   immediateData   ;branch to immediateData
00001FE2  14FC 002C               1923              MOVE.B  #',',(A2)+
00001FE6  14FC 0044               1924              MOVE.B  #'D',(A2)+
00001FEA                          1925              
00001FEA                          1926                *------------------------------------------------------------
00001FEA  4241                    1927              CLR     D1
00001FEC  3206                    1928              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00001FEE  E949                    1929              LSL.W   #4,D1       BIT* **** **** 0000
00001FF0  E049                    1930              LSR.W   #8,D1       0000 0000 BIT* ****
00001FF2  EA49                    1931              LSR.W   #5,D1       0000 0000 0000 0BIT     
00001FF4  C2FC 0008               1932              MULU    #8,D1       value adjusted for jumping
00001FF8  4FF8 1418               1933              LEA     numTable ,A7 Load the table into A7
00001FFC  4EB7 1000               1934              JSR     (A7,D1)     Jump to subroutine of value at D1   
00002000  6000 17D4               1935              BRA printcode  
00002004                          1936     
00002004                          1937  sub_L   ;sub.B EA->Dn
00002004                          1938      
00002004                          1939      *-store the size of the operation for immediate decoding use here/below
00002004                          1940      *-D7 equals storage of size of operation
00002004                          1941      *- #3 is byte , #2 is word #1 is long
00002004                          1942      ;MOVE.B  #3,D7
00002004                          1943      
00002004                          1944  
00002004  14FC 0020               1945      MOVE.B  #' ',(A2)+
00002008  14FC 0020               1946      MOVE.B  #' ',(A2)+
0000200C  14FC 0020               1947      MOVE.B  #' ',(A2)+
00002010  14FC 0020               1948      MOVE.B  #' ',(A2)+
00002014  14FC 0041               1949      MOVE.B  #'A',(A2)+
00002018  14FC 0044               1950      MOVE.B  #'D',(A2)+
0000201C  14FC 0044               1951      MOVE.B  #'D',(A2)+
00002020  14FC 002E               1952      MOVE.B  #'.',(A2)+
00002024  14FC 004C               1953      MOVE.B  #'L',(A2)+
00002028                          1954      *-always allow 4 spaces
00002028  14FC 0020               1955      MOVE.B  #' ',(A2)+
0000202C  14FC 0020               1956      MOVE.B  #' ',(A2)+
00002030  14FC 0020               1957      MOVE.B  #' ',(A2)+
00002034                          1958      
00002034                          1959      *-deCDOE EA (Dn,Dn
00002034                          1960          * MachineCode: 0001 **** **** **BI T***
00002034                          1961      *-insert immediate subressing here
00002034  4242                    1962              CLR     D2
00002036  4241                    1963              CLR     D1
00002038  1406                    1964              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000203A  E50A                    1965              LSL.B   #2,D2       **** **** BIT* **00
0000203C  EA0A                    1966              LSR.B   #5,D2       **** **** 0000 0BIT
0000203E  C4FC 0008               1967              MULU    #8,D2       value adjusted for jumping
00002042  4DF8 12FA               1968              LEA     modeTable,A6 Load the table into A6
00002046  4EB6 2000               1969              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000204A                          1970  
0000204A                          1971  
0000204A                          1972   * MachineCode: 0001 **** **** **** *BIT
0000204A                          1973              
0000204A  1206                    1974              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000204C  EB09                    1975              LSL.B   #5,D1       **** **** BIT0 0000
0000204E  EA09                    1976              LSR.B   #5,D1       **** **** 0000 0BIT      
00002050  C2FC 0008               1977              MULU    #8,D1       value adjusted for jumping
00002054  4FF8 13A8               1978              LEA     regNumTable ,A7 Load the table into A7
00002058  4EB7 1000               1979              JSR     (A7,D1)     Jump to subroutine of value at D1
0000205C  B23C 0020               1980              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00002060                          1981              ;BEQ.W   immediateData   ;branch to immediateData
00002060  14FC 002C               1982              MOVE.B  #',',(A2)+
00002064  14FC 0044               1983              MOVE.B  #'D',(A2)+
00002068                          1984              
00002068                          1985                *------------------------------------------------------------
00002068  4241                    1986              CLR     D1
0000206A  3206                    1987              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000206C  E949                    1988              LSL.W   #4,D1       BIT* **** **** 0000
0000206E  E049                    1989              LSR.W   #8,D1       0000 0000 BIT* ****
00002070  EA49                    1990              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002072  C2FC 0008               1991              MULU    #8,D1       value adjusted for jumping
00002076  4FF8 1418               1992              LEA     numTable ,A7 Load the table into A7
0000207A  4EB7 1000               1993              JSR     (A7,D1)     Jump to subroutine of value at D1   
0000207E  6000 1756               1994              BRA printcode  
00002082                          1995      
00002082                          1996  suba_W  ;subA.W
00002082                          1997      *-maybe error checking
00002082                          1998      *-we know its subA.W so print it to our buffer
00002082                          1999      *-ex subA.W D2,D7
00002082                          2000      
00002082  14FC 0020               2001      MOVE.B  #' ',(A2)+
00002086  14FC 0020               2002      MOVE.B  #' ',(A2)+
0000208A  14FC 0020               2003      MOVE.B  #' ',(A2)+
0000208E  14FC 0020               2004      MOVE.B  #' ',(A2)+
00002092  14FC 0053               2005      MOVE.B  #'S',(A2)+
00002096  14FC 0055               2006      MOVE.B  #'U',(A2)+
0000209A  14FC 0042               2007      MOVE.B  #'B',(A2)+
0000209E  14FC 0041               2008      MOVE.B  #'A',(A2)+
000020A2  14FC 002E               2009      MOVE.B  #'.',(A2)+
000020A6  14FC 0057               2010      MOVE.B  #'W',(A2)+
000020AA                          2011      *-always allow 4 spaces
000020AA  14FC 0020               2012      MOVE.B  #' ',(A2)+
000020AE  14FC 0020               2013      MOVE.B  #' ',(A2)+
000020B2  14FC 0020               2014      MOVE.B  #' ',(A2)+
000020B6                          2015      
000020B6                          2016      * MachineCode: 0001 **** **** **BI T***
000020B6                          2017      *-insert immediate subressing here
000020B6  4242                    2018              CLR     D2
000020B8  4241                    2019              CLR     D1
000020BA  1406                    2020              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000020BC  E50A                    2021              LSL.B   #2,D2       **** **** BIT* **00
000020BE  EA0A                    2022              LSR.B   #5,D2       **** **** 0000 0BIT
000020C0  C4FC 0008               2023              MULU    #8,D2       value adjusted for jumping
000020C4  4DF8 12FA               2024              LEA     modeTable,A6 Load the table into A6
000020C8  4EB6 2000               2025              JSR     (A6,D2)     Jump to subroutine of value at D0   
000020CC                          2026  
000020CC                          2027  
000020CC                          2028   * MachineCode: 0001 **** **** **** *BIT
000020CC                          2029              
000020CC  1206                    2030              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000020CE  EB09                    2031              LSL.B   #5,D1       **** **** BIT0 0000
000020D0  EA09                    2032              LSR.B   #5,D1       **** **** 0000 0BIT      
000020D2  C2FC 0008               2033              MULU    #8,D1       value adjusted for jumping
000020D6  4FF8 13A8               2034              LEA     regNumTable ,A7 Load the table into A7
000020DA  4EB7 1000               2035              JSR     (A7,D1)     Jump to subroutine of value at D1
000020DE  B23C 0020               2036              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000020E2                          2037              ;BEQ.W   immediateData   ;branch to immediateData
000020E2                          2038      
000020E2  14FC 002C               2039          MOVE.B  #',',(A2)+
000020E6  14FC 0041               2040          MOVE.B  #'A',(A2)+
000020EA  4241                    2041              CLR     D1
000020EC  3206                    2042              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000020EE  E949                    2043              LSL.W   #4,D1       BIT* **** **** 0000
000020F0  E049                    2044              LSR.W   #8,D1       0000 0000 BIT* ****
000020F2  EA49                    2045              LSR.W   #5,D1       0000 0000 0000 0BIT     
000020F4  C2FC 0008               2046              MULU    #8,D1       value adjusted for jumping
000020F8  4FF8 1418               2047              LEA     numTable ,A7 Load the table into A7
000020FC  4EB7 1000               2048              JSR     (A7,D1)     Jump to subroutine of value at D1    
00002100                          2049          
00002100                          2050      
00002100  6000 16D4               2051          BRA printCode
00002104                          2052          
00002104                          2053          
00002104                          2054          
00002104                          2055  
00002104                          2056  suba_L  ;subA.L
00002104                          2057      *-maybe error checking
00002104                          2058      *-we know its subA.L so print it to our buffer
00002104                          2059      *-ex subA.L D2,D7
00002104                          2060      
00002104  14FC 0020               2061      MOVE.B  #' ',(A2)+
00002108  14FC 0020               2062      MOVE.B  #' ',(A2)+
0000210C  14FC 0020               2063      MOVE.B  #' ',(A2)+
00002110  14FC 0020               2064      MOVE.B  #' ',(A2)+
00002114  14FC 0053               2065          MOVE.B  #'S',(A2)+
00002118  14FC 0055               2066          MOVE.B  #'U',(A2)+
0000211C  14FC 0042               2067          MOVE.B  #'B',(A2)+
00002120  14FC 0041               2068          MOVE.B  #'A',(A2)+
00002124  14FC 002E               2069          MOVE.B  #'.',(A2)+
00002128  14FC 004C               2070          MOVE.B  #'L',(A2)+
0000212C                          2071      *-always allow 4 spaces
0000212C  14FC 0020               2072          MOVE.B  #' ',(A2)+
00002130  14FC 0020               2073          MOVE.B  #' ',(A2)+
00002134  14FC 0020               2074          MOVE.B  #' ',(A2)+      
00002138                          2075      
00002138                          2076      * MachineCode: 0001 **** **** **BI T***
00002138                          2077      *-insert immediate subressing here
00002138  4242                    2078              CLR     D2
0000213A  4241                    2079              CLR     D1
0000213C  1406                    2080              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000213E  E50A                    2081              LSL.B   #2,D2       **** **** BIT* **00
00002140  EA0A                    2082              LSR.B   #5,D2       **** **** 0000 0BIT
00002142  C4FC 0008               2083              MULU    #8,D2       value adjusted for jumping
00002146  4DF8 12FA               2084              LEA     modeTable,A6 Load the table into A6
0000214A  4EB6 2000               2085              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000214E                          2086  
0000214E                          2087  
0000214E                          2088   * MachineCode: 0001 **** **** **** *BIT
0000214E                          2089              
0000214E  1206                    2090              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002150  EB09                    2091              LSL.B   #5,D1       **** **** BIT0 0000
00002152  EA09                    2092              LSR.B   #5,D1       **** **** 0000 0BIT      
00002154  C2FC 0008               2093              MULU    #8,D1       value adjusted for jumping
00002158  4FF8 13A8               2094              LEA     regNumTable ,A7 Load the table into A7
0000215C  4EB7 1000               2095              JSR     (A7,D1)     Jump to subroutine of value at D1
00002160  B23C 0020               2096              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00002164                          2097              ;BEQ.W   immediateData   ;branch to immediateData
00002164                          2098      
00002164  14FC 002C               2099              MOVE.B  #',',(A2)+
00002168  14FC 0041               2100              MOVE.B  #'A',(A2)+
0000216C  4241                    2101              CLR     D1
0000216E  3206                    2102              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00002170  E949                    2103              LSL.W   #4,D1       BIT* **** **** 0000
00002172  E049                    2104              LSR.W   #8,D1       0000 0000 BIT* ****
00002174  EA49                    2105              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002176  C2FC 0008               2106              MULU    #8,D1       value adjusted for jumping
0000217A  4FF8 1418               2107              LEA     numTable ,A7 Load the table into A7
0000217E  4EB7 1000               2108              JSR     (A7,D1)     Jump to subroutine of value at D1    
00002182                          2109          
00002182                          2110      
00002182  6000 1652               2111          BRA printCode
00002186                          2112  
00002186                          2113  
00002186                          2114      
00002186                          2115  sub_B_EA   ;sub.B Dn -> EA
00002186                          2116      
00002186                          2117      *-store the size of the operation for immediate decoding use here/below
00002186                          2118      *-D7 equals storage of size of operation
00002186                          2119      *- #3 is byte , #2 is word #1 is long
00002186                          2120      ;MOVE.B  #3,D7
00002186                          2121      
00002186                          2122  
00002186  14FC 0020               2123      MOVE.B  #' ',(A2)+
0000218A  14FC 0020               2124      MOVE.B  #' ',(A2)+
0000218E  14FC 0020               2125      MOVE.B  #' ',(A2)+
00002192  14FC 0020               2126      MOVE.B  #' ',(A2)+
00002196  14FC 0053               2127      MOVE.B  #'S',(A2)+
0000219A  14FC 0055               2128      MOVE.B  #'U',(A2)+
0000219E  14FC 0042               2129      MOVE.B  #'B',(A2)+
000021A2  14FC 002E               2130      MOVE.B  #'.',(A2)+
000021A6  14FC 0042               2131      MOVE.B  #'B',(A2)+
000021AA                          2132      *-always allow 4 spaces
000021AA  14FC 0020               2133      MOVE.B  #' ',(A2)+
000021AE  14FC 0020               2134      MOVE.B  #' ',(A2)+
000021B2  14FC 0020               2135      MOVE.B  #' ',(A2)+
000021B6                          2136      
000021B6                          2137      *-deCDOE EA (Dn,Dn
000021B6                          2138          * MachineCode: 0001 **** **** **BI T***
000021B6                          2139      *-insert immediate subressing here
000021B6  4242                    2140              CLR     D2
000021B8  4241                    2141              CLR     D1
000021BA  1406                    2142              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000021BC  E50A                    2143              LSL.B   #2,D2       **** **** BIT* **00
000021BE  EA0A                    2144              LSR.B   #5,D2       **** **** 0000 0BIT
000021C0  C4FC 0008               2145              MULU    #8,D2       value adjusted for jumping
000021C4  4DF8 12FA               2146              LEA     modeTable,A6 Load the table into A6
000021C8  4EB6 2000               2147              JSR     (A6,D2)     Jump to subroutine of value at D0   
000021CC                          2148  
000021CC                          2149  
000021CC                          2150   * MachineCode: 0001 **** **** **** *BIT
000021CC                          2151              
000021CC  1206                    2152              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000021CE  EB09                    2153              LSL.B   #5,D1       **** **** BIT0 0000
000021D0  EA09                    2154              LSR.B   #5,D1       **** **** 0000 0BIT      
000021D2  C2FC 0008               2155              MULU    #8,D1       value adjusted for jumping
000021D6  4FF8 13A8               2156              LEA     regNumTable ,A7 Load the table into A7
000021DA  4EB7 1000               2157              JSR     (A7,D1)     Jump to subroutine of value at D1
000021DE  B23C 0020               2158              CMP.B   #32,D1         ; #imm => #XX 3 spaces
000021E2                          2159              ;BEQ.W   immediateData   ;branch to immediateData
000021E2  14FC 002C               2160              MOVE.B  #',',(A2)+
000021E6                          2161   ;           MOVE.B  #'D',(A2)+
000021E6                          2162              
000021E6  4242                    2163              CLR     D2
000021E8  4241                    2164              CLR     D1
000021EA  3406                    2165              MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
000021EC  EF4A                    2166              LSL.W   #7,D2       BIT* **** **** 0000
000021EE  E04A                    2167              LSR.W   #8,D2       0000 0000 BIT* ****
000021F0  EA4A                    2168              LSR.W   #5,D2       0000 0000 0000 0BIT 
000021F2  C4FC 0008               2169              MULU    #8,D2       value adjusted for jumping
000021F6  4DF8 12FA               2170              LEA     modeTable,A6 Load the table into A6
000021FA  4EB6 2000               2171              JSR     (A6,D2)     Jump to subroutine of value at D2
000021FE                          2172             
000021FE  3206                    2173              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00002200  E949                    2174              LSL.W   #4,D1       BIT* **** **** 0000
00002202  E049                    2175              LSR.W   #8,D1       0000 0000 BIT* ****
00002204  EA49                    2176              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002206  C2FC 0008               2177              MULU    #8,D1       value adjusted for jumping
0000220A  4FF8 13A8               2178              LEA     regNumTable ,A7 Load the table into A7
0000220E  4EB7 1000               2179              JSR     (A7,D1)     Jump to subroutine of value at D1   
00002212  6000 15C2               2180              BRA printcode  
00002216                          2181              
00002216                          2182              
00002216                          2183  
00002216                          2184     
00002216                          2185  sub_W_EA   ;sub.B Dn -> EA
00002216                          2186      
00002216                          2187      *-store the size of the operation for immediate decoding use here/below
00002216                          2188      *-D7 equals storage of size of operation
00002216                          2189      *- #3 is byte , #2 is word #1 is long
00002216                          2190      ;MOVE.B  #3,D7
00002216  1E3C 0001               2191      MOVE.B  #1,D7
0000221A                          2192      
0000221A                          2193  
0000221A  14FC 0020               2194      MOVE.B  #' ',(A2)+
0000221E  14FC 0020               2195      MOVE.B  #' ',(A2)+
00002222  14FC 0020               2196      MOVE.B  #' ',(A2)+
00002226  14FC 0020               2197      MOVE.B  #' ',(A2)+
0000222A  14FC 0053               2198      MOVE.B  #'S',(A2)+
0000222E  14FC 0055               2199      MOVE.B  #'U',(A2)+
00002232  14FC 0042               2200      MOVE.B  #'B',(A2)+
00002236  14FC 002E               2201      MOVE.B  #'.',(A2)+
0000223A  14FC 0057               2202      MOVE.B  #'W',(A2)+
0000223E                          2203      *-always allow 4 spaces
0000223E  14FC 0020               2204      MOVE.B  #' ',(A2)+
00002242  14FC 0020               2205      MOVE.B  #' ',(A2)+
00002246  14FC 0020               2206      MOVE.B  #' ',(A2)+
0000224A                          2207      
0000224A                          2208      
0000224A                          2209      
0000224A  14FC 0044               2210          MOVE.B  #'D',(A2)+
0000224E                          2211             
0000224E  3206                    2212              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00002250  E949                    2213              LSL.W   #4,D1       BIT* **** **** 0000
00002252  E049                    2214              LSR.W   #8,D1       0000 0000 BIT* ****
00002254  EA49                    2215              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002256  C2FC 0008               2216              MULU    #8,D1       value adjusted for jumping
0000225A  4FF8 1418               2217              LEA     NumTable ,A7 Load the table into A7
0000225E  4EB7 1000               2218              JSR     (A7,D1)     Jump to subroutine of value at D1   
00002262                          2219              
00002262                          2220              
00002262  14FC 002C               2221              MOVE.B  #',',(A2)+
00002266                          2222              *-INSERT IMMEDIATE DATA HERE
00002266                          2223      *-deCDOE EA (Dn,Dn
00002266                          2224          * MachineCode: 0001 **** **** **BI T***
00002266                          2225   *Only next last 3 bits which is stored at D0 => Source subress mode
00002266                          2226      *-insert immediate subressing here
00002266  4242                    2227              CLR     D2
00002268  4241                    2228              CLR     D1
0000226A  1406                    2229              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000226C  E50A                    2230              LSL.B   #2,D2       **** **** BIT* **00
0000226E  EA0A                    2231              LSR.B   #5,D2       **** **** 0000 0BIT
00002270  C4FC 0008               2232              MULU    #8,D2       value adjusted for jumping
00002274  4DF8 12FA               2233              LEA     modeTable,A6 Load the table into A6
00002278  4EB6 2000               2234              JSR     (A6,D2)     Jump to subroutine of value at D0   
0000227C                          2235  
0000227C                          2236  
0000227C                          2237   * MachineCode: 0001 **** **** **** *BIT
0000227C                          2238              
0000227C  1206                    2239              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000227E  EB09                    2240              LSL.B   #5,D1       **** **** BIT0 0000
00002280  EA09                    2241              LSR.B   #5,D1       **** **** 0000 0BIT      
00002282  C2FC 0008               2242              MULU    #8,D1       value adjusted for jumping
00002286  4FF8 13A8               2243              LEA     regNumTable ,A7 Load the table into A7
0000228A  4EB7 1000               2244              JSR     (A7,D1)     Jump to subroutine of value at D1
0000228E  B23C 0020               2245              CMP.B   #32,D1         ; #imm => #XX 3 spaces
00002292                          2246              ;BEQ.W   immediateData   ;branch to immediateData
00002292                          2247  
00002292                          2248  
00002292  6000 1542               2249              BRA printcode  
00002296                          2250              
00002296                          2251  sub_L_EA   ;sub.L Dn -> EA
00002296  14FC 0020               2252      MOVE.B  #' ',(A2)+
0000229A  14FC 0020               2253      MOVE.B  #' ',(A2)+
0000229E  14FC 0020               2254      MOVE.B  #' ',(A2)+
000022A2  14FC 0020               2255      MOVE.B  #' ',(A2)+
000022A6  14FC 0053               2256      MOVE.B  #'S',(A2)+
000022AA  14FC 0055               2257      MOVE.B  #'U',(A2)+
000022AE  14FC 0042               2258      MOVE.B  #'B',(A2)+
000022B2  14FC 002E               2259      MOVE.B  #'.',(A2)+
000022B6  14FC 004C               2260      MOVE.B  #'L',(A2)+
000022BA                          2261      *-always allow 4 spaces
000022BA  14FC 0020               2262      MOVE.B  #' ',(A2)+
000022BE  14FC 0020               2263      MOVE.B  #' ',(A2)+
000022C2  14FC 0020               2264      MOVE.B  #' ',(A2)+
000022C6                          2265      
000022C6                          2266      
000022C6                          2267      
000022C6  14FC 0044               2268          MOVE.B  #'D',(A2)+
000022CA                          2269             
000022CA  3206                    2270              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000022CC  E949                    2271              LSL.W   #4,D1       BIT* **** **** 0000
000022CE  E049                    2272              LSR.W   #8,D1       0000 0000 BIT* ****
000022D0  EA49                    2273              LSR.W   #5,D1       0000 0000 0000 0BIT     
000022D2  C2FC 0008               2274              MULU    #8,D1       value adjusted for jumping
000022D6  4FF8 1418               2275              LEA     NumTable ,A7 Load the table into A7
000022DA  4EB7 1000               2276              JSR     (A7,D1)     Jump to subroutine of value at D1   
000022DE                          2277              
000022DE                          2278              
000022DE  14FC 002C               2279              MOVE.B  #',',(A2)+
000022E2                          2280              *-INSERT IMMEDIATE DATA HERE
000022E2                          2281      *-deCDOE EA (Dn,Dn
000022E2                          2282          * MachineCode: 0001 **** **** **BI T***
000022E2                          2283   *Only next last 3 bits which is stored at D0 => Source subress mode
000022E2                          2284      *-insert immediate subressing here
000022E2  4242                    2285              CLR     D2
000022E4  4241                    2286              CLR     D1
000022E6  1406                    2287              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000022E8  E50A                    2288              LSL.B   #2,D2       **** **** BIT* **00
000022EA  EA0A                    2289              LSR.B   #5,D2       **** **** 0000 0BIT
000022EC  C4FC 0008               2290              MULU    #8,D2       value adjusted for jumping
000022F0  4DF8 12FA               2291              LEA     modeTable,A6 Load the table into A6
000022F4  4EB6 2000               2292              JSR     (A6,D2)     Jump to subroutine of value at D0   
000022F8                          2293  
000022F8                          2294  
000022F8                          2295   * MachineCode: 0001 **** **** **** *BIT
000022F8                          2296              
000022F8  1206                    2297              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000022FA  EB09                    2298              LSL.B   #5,D1       **** **** BIT0 0000
000022FC  EA09                    2299              LSR.B   #5,D1       **** **** 0000 0BIT      
000022FE  C2FC 0008               2300              MULU    #8,D1       value adjusted for jumping
00002302  4FF8 13A8               2301              LEA     regNumTable ,A7 Load the table into A7
00002306  4EB7 1000               2302              JSR     (A7,D1)     Jump to subroutine of value at D1
0000230A                          2303              
0000230A                          2304              *-ERROR HERE NOT SURE WHY AFTER sub.L D2,(A2)+ it goines into this lower loop D1 = 20 no matchs
0000230A                          2305  
0000230A                          2306  
0000230A  6000 14CA               2307              BRA printcode  
0000230E                          2308  
0000230E                          2309  
0000230E                          2310  
0000230E                          2311  
0000230E                          2312  
0000230E                          2313  -------------------- end include --------------------
0000230E                          2314              INCLUDE 'op1000.x68'    DIVU
0000230E                          2315  op1000 *-DIVU.W OR
0000230E                          2316  
0000230E  4EB8 1618               2317          JSR WordOrLong
00002312  14FC 0020               2318          MOVE.B  #' ',(A2)+
00002316  14FC 0020               2319          MOVE.B  #' ',(A2)+
0000231A  14FC 0020               2320          MOVE.B  #' ',(A2)+
0000231E  14FC 0020               2321          MOVE.B  #' ',(A2)+
00002322  B63C 0001               2322          CMP.B   #$01,D3
00002326  6700 0096               2323          BEQ     or_W    EA,Dn
0000232A                          2324          
0000232A  B63C 0002               2325          CMP.B   #$02,D3
0000232E  6700 00B8               2326          BEQ     or_L    EA,Dn
00002332                          2327          
00002332  B63C 0000               2328          CMP.B   #$00,D3
00002336  6700 0022               2329          BEQ     or_B    EA,Dn
0000233A                          2330          
0000233A  B63C 0004               2331          CMP.B   #$04,D3
0000233E  6700 011A               2332          BEQ     or_B_EA Dn,EA
00002342                          2333          
00002342  B63C 0005               2334          CMP.B   #$05,D3
00002346  6700 013C               2335          BEQ     or_W_EA Dn,EA
0000234A                          2336          
0000234A  B63C 0006               2337          CMP.B   #$06,D3
0000234E  6700 015E               2338          BEQ     or_L_EA Dn,EA
00002352                          2339                  
00002352  B63C 0003               2340          CMP.B   #$03,D3
00002356  6700 002C               2341          BEQ     divu_W
0000235A                          2342  or_B
0000235A  14FC 004F               2343      MOVE.B  #'O',(A2)+
0000235E  14FC 0052               2344      MOVE.B  #'R',(A2)+
00002362  14FC 002E               2345      MOVE.B  #'.',(A2)+
00002366  14FC 0042               2346      MOVE.B  #'B',(A2)+
0000236A  14FC 0020               2347      MOVE.B  #' ',(A2)+
0000236E  14FC 0020               2348      MOVE.B  #' ',(A2)+
00002372  14FC 0020               2349      MOVE.B  #' ',(A2)+
00002376  14FC 0020               2350      MOVE.B  #' ',(A2)+
0000237A  4247                    2351      CLR     D7
0000237C  1E3C 0000               2352      MOVE.B  #0,D7
00002380  6000 0090               2353      BRA     decode1000_EA
00002384                          2354  divu_W
00002384                          2355              ;do something effective            
00002384  4243                    2356              CLR     D3          ;clear D3
00002386  3606                    2357              MOVE.W  D6,D3       ;copy data to D3
00002388                          2358              
00002388  14FC 0044               2359              MOVE.B  #'D',(A2)+  ;print D
0000238C  14FC 0049               2360              MOVE.B  #'I',(A2)+  ;print I
00002390  14FC 0056               2361              MOVE.B  #'V',(A2)+  ;print V
00002394  14FC 0055               2362              MOVE.B  #'U',(A2)+  ;print U
00002398  14FC 002E               2363              MOVE.B  #'.',(A2)+  ;ptint .
0000239C  14FC 0057               2364              MOVE.B  #'W',(A2)+  ;print W
000023A0  14FC 0020               2365              MOVE.B  #' ',(A2)+  ;print some spaces
000023A4  14FC 0020               2366              MOVE.B  #' ',(A2)+
000023A8  14FC 0020               2367              MOVE.B  #' ',(A2)+
000023AC  14FC 0020               2368              MOVE.B  #' ',(A2)+
000023B0  1A3C 000A               2369              MOVE.B  #10,D5      ;counter for output
000023B4  4247                    2370              CLR     D7
000023B6  1E3C 0001               2371              MOVE.B  #1,D7
000023BA  6000 0056               2372              BRA     decode1000_EA
000023BE                          2373  or_W
000023BE  14FC 004F               2374      MOVE.B  #'O',(A2)+
000023C2  14FC 0052               2375      MOVE.B  #'R',(A2)+
000023C6  14FC 002E               2376      MOVE.B  #'.',(A2)+
000023CA  14FC 0057               2377      MOVE.B  #'W',(A2)+
000023CE  14FC 0020               2378      MOVE.B  #' ',(A2)+
000023D2  14FC 0020               2379      MOVE.B  #' ',(A2)+
000023D6  14FC 0020               2380      MOVE.B  #' ',(A2)+
000023DA  14FC 0020               2381      MOVE.B  #' ',(A2)+
000023DE  4247                    2382      CLR     D7
000023E0  1E3C 0001               2383      MOVE.B  #1,D7 
000023E4  6000 002C               2384      BRA     decode1000_EA
000023E8                          2385  or_L
000023E8  14FC 004F               2386      MOVE.B  #'O',(A2)+
000023EC  14FC 0052               2387      MOVE.B  #'R',(A2)+
000023F0  14FC 002E               2388      MOVE.B  #'.',(A2)+
000023F4  14FC 004C               2389      MOVE.B  #'L',(A2)+
000023F8  14FC 0020               2390      MOVE.B  #' ',(A2)+
000023FC  14FC 0020               2391      MOVE.B  #' ',(A2)+
00002400  14FC 0020               2392      MOVE.B  #' ',(A2)+
00002404  14FC 0020               2393      MOVE.B  #' ',(A2)+
00002408  4247                    2394      CLR     D7
0000240A  1E3C 0002               2395      MOVE.B  #2,D7
0000240E  6000 0002               2396      BRA     decode1000_EA
00002412                          2397  decode1000_EA
00002412  4EB8 1510               2398              JSR     get_3to5_bit    EA mode
00002416  4EB8 14F8               2399              JSR     get_0to2_bit    EA register
0000241A  B43C 0007               2400              CMP.B   #7,D2
0000241E  6700 001C               2401              BEQ     immAb1000_Dn
00002422                          2402  decod1000_Dn   
00002422  14FC 002C               2403              MOVE.B  #',',(A2)+  comma between operands
00002426  4241                    2404              CLR     D1
00002428  4DF8 12FA               2405              LEA     modeTable,A6
0000242C  123C 0000               2406              MOVE.B  #0,D1           Always Dn format
00002430  4EB6 1000               2407              JSR     (A6,D1)
00002434  4EB8 1544               2408              JSR     get_9to11_bit   Register Value for Dn
00002438  6000 139C               2409              BRA     printCode
0000243C                          2410  immAb1000_Dn
0000243C  4DF8 1158               2411              LEA     immAbTable, A6
00002440  B27C 0004               2412              CMP     #4,D1       check #immediate
00002444  6700 0010               2413              BEQ     sizeAdjust1000_Dn
00002448  6600 0002               2414              BNE     immAb1000_Dn_jump
0000244C                          2415  immAb1000_Dn_jump
0000244C  C2FC 0008               2416              MULU    #8,D1
00002450  4EB6 1000               2417              JSR     (A6,D1)
00002454  60CC                    2418              BRA     decod1000_Dn
00002456                          2419  sizeAdjust1000_Dn
00002456  9207                    2420              SUB.B   D7,D1       D1 - D7
00002458  60F2                    2421              BRA     immAb1000_Dn_jump
0000245A                          2422  
0000245A                          2423  or_B_EA
0000245A                          2424      
0000245A  14FC 004F               2425      MOVE.B  #'O',(A2)+
0000245E  14FC 0052               2426      MOVE.B  #'R',(A2)+
00002462  14FC 002E               2427      MOVE.B  #'.',(A2)+
00002466  14FC 0042               2428      MOVE.B  #'B',(A2)+
0000246A  14FC 0020               2429      MOVE.B  #' ',(A2)+
0000246E  14FC 0020               2430      MOVE.B  #' ',(A2)+
00002472  14FC 0020               2431      MOVE.B  #' ',(A2)+
00002476  14FC 0020               2432      MOVE.B  #' ',(A2)+
0000247A  4247                    2433      CLR     D7
0000247C  1E3C 0000               2434      MOVE.B  #0,D7
00002480  6000 0056               2435      BRA     EAdecode1000_Dn
00002484                          2436  or_W_EA
00002484  14FC 004F               2437      MOVE.B  #'O',(A2)+
00002488  14FC 0052               2438      MOVE.B  #'R',(A2)+
0000248C  14FC 002E               2439      MOVE.B  #'.',(A2)+
00002490  14FC 0057               2440      MOVE.B  #'W',(A2)+
00002494  14FC 0020               2441      MOVE.B  #' ',(A2)+
00002498  14FC 0020               2442      MOVE.B  #' ',(A2)+
0000249C  14FC 0020               2443      MOVE.B  #' ',(A2)+
000024A0  14FC 0020               2444      MOVE.B  #' ',(A2)+
000024A4  4247                    2445      CLR     D7
000024A6  1E3C 0001               2446      MOVE.B  #1,D7
000024AA  6000 002C               2447      BRA     EAdecode1000_Dn    
000024AE                          2448  or_L_EA
000024AE  14FC 004F               2449      MOVE.B  #'O',(A2)+
000024B2  14FC 0052               2450      MOVE.B  #'R',(A2)+
000024B6  14FC 002E               2451      MOVE.B  #'.',(A2)+
000024BA  14FC 004C               2452      MOVE.B  #'L',(A2)+
000024BE  14FC 0020               2453      MOVE.B  #' ',(A2)+
000024C2  14FC 0020               2454      MOVE.B  #' ',(A2)+
000024C6  14FC 0020               2455      MOVE.B  #' ',(A2)+
000024CA  14FC 0020               2456      MOVE.B  #' ',(A2)+
000024CE  4247                    2457      CLR     D7
000024D0  1E3C 0002               2458      MOVE.B  #2,D7
000024D4  6000 0002               2459      BRA     EAdecode1000_Dn    
000024D8                          2460  EAdecode1000_Dn   
000024D8  4241                    2461              CLR     D1
000024DA  4DF8 12FA               2462              LEA     modeTable,A6
000024DE  123C 0000               2463              MOVE.B  #0,D1           Always Dn format
000024E2  4EB6 1000               2464              JSR     (A6,D1)
000024E6  4EB8 1544               2465              JSR     get_9to11_bit   Register Value for Dn
000024EA  14FC 002C               2466              MOVE.B  #',',(A2)+  comma between operands   
000024EE                          2467  EAdecode1000_EA
000024EE  4EB8 1510               2468              JSR     get_3to5_bit    EA mode
000024F2  4EB8 14F8               2469              JSR     get_0to2_bit    EA register
000024F6  B43C 0007               2470              CMP.B   #7,D2
000024FA  6700 0006               2471              BEQ     EAimmAb1000_Dn
000024FE  6000 12D6               2472              BRA     printCode
00002502                          2473  EAimmAb1000_Dn
00002502  4DF8 1158               2474              LEA     immAbTable, A6
00002506  B27C 0004               2475              CMP     #4,D1       check #immediate
0000250A  6700 0012               2476              BEQ     EAsizeAdjust1000_Dn
0000250E  6600 0002               2477              BNE     EAimmAb1000_Dn_jump
00002512                          2478  EAimmAb1000_Dn_jump
00002512  C2FC 0008               2479              MULU    #8,D1
00002516  4EB6 1000               2480              JSR     (A6,D1)
0000251A  6000 12BA               2481              BRA     printCode
0000251E                          2482  EAsizeAdjust1000_Dn
0000251E  9207                    2483              SUB.B   D7,D1       D1 - D7
00002520  60F0                    2484              BRA     EAimmAb1000_Dn_jump
00002522                          2485     
00002522                          2486  
00002522                          2487  
00002522                          2488  -------------------- end include --------------------
00002522                          2489              INCLUDE 'op0111.x68'    MOVEQ
00002522                          2490  op0111
00002522                          2491      *- MOVE Q
00002522  4243                    2492              CLR     D3          ;clear D3
00002524  1606                    2493              MOVE.B  D6,D3       ;copy data to D3
00002526                          2494              ;MOVE.L  #2,D7       ;size of data is long
00002526                          2495        
00002526                          2496  
00002526  14FC 0020               2497              MOVE.B  #' ',(A2)+  ;print some spaces
0000252A  14FC 0020               2498              MOVE.B  #' ',(A2)+
0000252E  14FC 0020               2499              MOVE.B  #' ',(A2)+
00002532  14FC 0020               2500              MOVE.B  #' ',(A2)+
00002536  14FC 004D               2501              MOVE.B  #'M',(A2)+  ;print M
0000253A  14FC 004F               2502              MOVE.B  #'O',(A2)+  ;print O
0000253E  14FC 0056               2503              MOVE.B  #'V',(A2)+  ;print V
00002542  14FC 0045               2504              MOVE.B  #'E',(A2)+  ;print E
00002546  14FC 0051               2505              MOVE.B  #'Q',(A2)+  ;ptint Q
0000254A  14FC 0020               2506              MOVE.B  #' ',(A2)+  ;
0000254E  14FC 0020               2507              MOVE.B  #' ',(A2)+  ;print some spaces
00002552  14FC 0020               2508              MOVE.B  #' ',(A2)+
00002556  14FC 0023               2509              MOVE.B  #'#',(A2)+  ;print #
0000255A  14FC 0024               2510              MOVE.B  #'$',(A2)+  ;print 
0000255E                          2511              *-REMEMBER MOVEQ TAKES ONLY A BTYE OF DATA
0000255E                          2512              
0000255E                          2513              ;MOVE.B  #12,D5      ;counter for output
0000255E  E80B                    2514              LSR.B   #4,D3       *-get bit 4 to 7 and jump with it DATA
00002560  C6FC 0008               2515              MULU.W  #8,D3       ;gotta get ready to jump
00002564  4DF8 1418               2516              LEA     numTable,A6 ;load table
00002568  4EB6 3000               2517              JSR     (A6,D3)     ;branch to grab number
0000256C                          2518  
0000256C  4243                    2519              CLR     D3          ;clear D3
0000256E  1606                    2520              MOVE.B  D6,D3       ;copy data to D3
00002570  E90B                    2521              LSL.B   #4,D3       ;get the biut 0 - 3 with it DATA to print BYTE SIZE
00002572  E80B                    2522              LSR.B   #4,D3
00002574  C6FC 0008               2523              MULU.W  #8,D3       ;gotta get ready to jump
00002578  4DF8 1418               2524              LEA     numTable,A6 ;load table
0000257C  4EB6 3000               2525              JSR     (A6,D3)     ;branch to grab number
00002580                          2526              
00002580  14FC 002C               2527              MOVE.B  #',',(A2)+  ;print ,
00002584  14FC 0044               2528              MOVE.B  #'D',(A2)+  ;print D for data register and prepare to get Dn
00002588                          2529    *------------------------------------------------------------
00002588  4241                    2530              CLR     D1
0000258A  3206                    2531              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000258C  E949                    2532              LSL.W   #4,D1       BIT* **** **** 0000
0000258E  E049                    2533              LSR.W   #8,D1       0000 0000 BIT* ****
00002590  EA49                    2534              LSR.W   #5,D1       0000 0000 0000 0BIT     
00002592  C2FC 0008               2535              MULU    #8,D1       value adjusted for jumping
00002596  4FF8 1418               2536              LEA     numTable ,A7 Load the table into A7
0000259A  4EB7 1000               2537              JSR     (A7,D1)     Jump to subroutine of value at D1  
0000259E                          2538              
0000259E  6000 1236               2539              BRA     printCode
000025A2                          2540  
000025A2                          2541  -------------------- end include --------------------
000025A2                          2542              
000025A2                          2543              INCLUDE 'op0000.x68'    ADDI
000025A2                          2544  
000025A2                          2545  
000025A2                          2546  op0000  ;ADDI
000025A2                          2547  
000025A2                          2548      **----------------------------------------
000025A2                          2549      *decode what type of opcode/size it is
000025A2                          2550      *- using decode0000 there will only be a couple static options in D3 to compare
000025A2                          2551      *-D3:
000025A2                          2552      *-#$18 -> ANDI.B
000025A2                          2553      *-#$19 ->ANDI.W
000025A2                          2554      *-#$1A -> ANDI.L
000025A2  4EB9 000028A4           2555      JSR decode0000
000025A8                          2556      
000025A8  B63C 0018               2557      CMP.B   #$18,D3     ;see if it's a ADDI.B
000025AC  6700 0030               2558      BEQ     addi_B
000025B0  B63C 0019               2559      CMP.B   #$19,D3     ;see if it's a ADDI.W
000025B4  6700 00A0               2560      BEQ     addi_W
000025B8  B63C 001A               2561      CMP.B   #$1A,D3     ;see if it's a ADDI.L
000025BC  6700 0110               2562      BEQ     addi_L 
000025C0                          2563      
000025C0  B63C 0010               2564      CMP.B   #$10,D3 SUBI.B  #$66,(A2)+
000025C4  6700 0180               2565      BEQ     subi_B_
000025C8                          2566      
000025C8  B63C 0011               2567      CMP.B   #$11,D3 SUBI.W  #$66,(A2)+
000025CC  6700 01EE               2568      BEQ     subi_W_
000025D0                          2569      
000025D0  B63C 0012               2570      CMP.B   #$12,D3 SUBI.L  #$66,(A2)+
000025D4  6700 025C               2571      BEQ     subi_L_
000025D8                          2572      
000025D8                          2573      
000025D8  4EB9 000037EC           2574      JSR finish
000025DE                          2575  
000025DE                          2576  
000025DE                          2577  addi_B
000025DE  1606                    2578      MOVE.B  D6, D3 [ 0000 0000 [USES] [USES] ] D6 ->d3
000025E0                          2579      *- GET the register Value [ 0000 0XXX ]
000025E0                          2580      *-immediate data not allowed here
000025E0                          2581  
000025E0                          2582      *-Because we know this is ADDi.B we know that out data following this opcode
000025E0                          2583      *-is of size B, so we can now grab that data, look at it and print it out
000025E0                          2584      
000025E0                          2585      *temporary store out data in memory
000025E0                          2586      
000025E0                          2587      *-MOVE machine code into temp D2
000025E0  3406                    2588      MOVE.W  D6,D2
000025E2                          2589      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
000025E2  3C1C                    2590      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
000025E4                          2591      ;MOVE.W  D6,D3   Move the data back into D3 to play with
000025E4                          2592      
000025E4                          2593      *-MOVE the word/bytte data at D4 into D3
000025E4                          2594      ;MOVE.W  D4,D3
000025E4                          2595      
000025E4                          2596      *-PRINT
000025E4  14FC 0020               2597      MOVE.B  #' ',(A2)+  ;print 
000025E8  14FC 0020               2598      MOVE.B  #' ',(A2)+  ;print 
000025EC  14FC 0020               2599      MOVE.B  #' ',(A2)+  ;print 
000025F0  14FC 0020               2600      MOVE.B  #' ',(A2)+  ;print   
000025F4  14FC 0041               2601      MOVE.B  #'A',(A2)+  ;print A
000025F8  14FC 0044               2602      MOVE.B  #'D',(A2)+  ;print D
000025FC  14FC 0044               2603      MOVE.B  #'D',(A2)+  ;print 
00002600  14FC 0049               2604      MOVE.B  #'I',(A2)+  ;print 
00002604  14FC 002E               2605      MOVE.B  #'.',(A2)+  ;print 
00002608  14FC 0042               2606      MOVE.B  #'B',(A2)+  ;print 
0000260C  14FC 0020               2607      MOVE.B  #' ',(A2)+  ;print 
00002610  14FC 0020               2608      MOVE.B  #' ',(A2)+  ;print     
00002614  14FC 0023               2609      MOVE.B  #'#',(A2)+  ;print 
00002618  14FC 0024               2610      MOVE.B  #'$',(A2)+  ;print 
0000261C                          2611  
0000261C                          2612      
0000261C  4EB8 10FE               2613      JSR print_word
00002620  3C02                    2614      MOVE.W  D2,D6
00002622  14FC 002C               2615      MOVE.B  #',',(A2)+
00002626                          2616      
00002626                          2617      ;MOVE.W  A5,D6
00002626                          2618      
00002626                          2619      * MachineCode: 0001 **** **** **BI T***
00002626  4242                    2620              CLR     D2
00002628  4241                    2621              CLR     D1
0000262A  1406                    2622              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000262C  E50A                    2623              LSL.B   #2,D2       **** **** BIT* **00
0000262E  EA0A                    2624              LSR.B   #5,D2       **** **** 0000 0BIT
00002630  1002                    2625              MOVE.B  D2,D0
00002632  C0FC 0008               2626              MULU    #8,D0       value adjusted for jumping
00002636  4DF8 12FA               2627              LEA     modeTable,A6 Load the table into A6
0000263A  4EB6 0000               2628              JSR     (A6,D0)     Jump to subroutine of value at D0
0000263E                          2629              
0000263E                          2630              
0000263E                          2631              
0000263E                          2632              *------------------------------------------------------------
0000263E                          2633              
0000263E  1206                    2634              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002640  EB09                    2635              LSL.B   #5,D1       **** **** BIT0 0000
00002642  EA09                    2636              LSR.B   #5,D1       **** **** 0000 0BIT
00002644  1001                    2637              MOVE.B  D1,D0      
00002646  C0FC 0008               2638              MULU    #8,D0       value adjusted for jumping
0000264A  4DF8 13A8               2639              LEA     regNumTable ,A6 Load the table into A6
0000264E  4EB6 0000               2640              JSR     (A6,D0)     Jump to subroutine of value at D1
00002652                          2641              
00002652  6000 1182               2642      BRA printCode
00002656                          2643      
00002656                          2644  
00002656                          2645  addi_W
00002656                          2646  
00002656  1606                    2647      MOVE.B  D6, D3 [ 0000 0000 [USES] [USES] ] D6 ->d3
00002658                          2648      *- GET the register Value [ 0000 0XXX ]
00002658                          2649  
00002658                          2650      
00002658                          2651      *-immediate data not allowed here
00002658                          2652  
00002658                          2653      *-Because we know this is ADDi.B we know that out data following this opcode
00002658                          2654      *-is of size B, so we can now grab that data, look at it and print it out
00002658                          2655      
00002658  3406                    2656      MOVE.W  D6,D2
0000265A                          2657      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
0000265A  3C1C                    2658      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
0000265C                          2659      ;MOVE.W  D6,D3   Move the data back into D3 to play with
0000265C                          2660      
0000265C                          2661      
0000265C                          2662      *-PRINT
0000265C  14FC 0020               2663      MOVE.B  #' ',(A2)+  ;print 
00002660  14FC 0020               2664      MOVE.B  #' ',(A2)+  ;print 
00002664  14FC 0020               2665      MOVE.B  #' ',(A2)+  ;print 
00002668  14FC 0020               2666      MOVE.B  #' ',(A2)+  ;print   
0000266C  14FC 0041               2667      MOVE.B  #'A',(A2)+  ;print A
00002670  14FC 0044               2668      MOVE.B  #'D',(A2)+  ;print D
00002674  14FC 0044               2669      MOVE.B  #'D',(A2)+  ;print 
00002678  14FC 0049               2670      MOVE.B  #'I',(A2)+  ;print 
0000267C  14FC 002E               2671      MOVE.B  #'.',(A2)+  ;print 
00002680  14FC 0057               2672      MOVE.B  #'W',(A2)+  ;print 
00002684  14FC 0020               2673      MOVE.B  #' ',(A2)+  ;print 
00002688  14FC 0020               2674      MOVE.B  #' ',(A2)+  ;print 
0000268C  14FC 0023               2675      MOVE.B  #'#',(A2)+  ;print 
00002690  14FC 0024               2676      MOVE.B  #'$',(A2)+  ;print 
00002694                          2677  
00002694                          2678      
00002694  4EB8 10FE               2679      JSR print_word
00002698  3C02                    2680      MOVE.W  D2,D6
0000269A  14FC 002C               2681      MOVE.B  #',',(A2)+
0000269E                          2682      
0000269E                          2683      * MachineCode: 0001 **** **** **BI T***
0000269E                          2684      * Only next last 3 bits which is stored at D0 => Source Address mode
0000269E  4242                    2685      CLR     D2
000026A0  4241                    2686      CLR     D1
000026A2  1406                    2687      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000026A4  E50A                    2688      LSL.B   #2,D2       **** **** BIT* **00
000026A6  EA0A                    2689      LSR.B   #5,D2       **** **** 0000 0BIT
000026A8  1002                    2690      MOVE.B  D2,D0
000026AA  C0FC 0008               2691      MULU    #8,D0       value adjusted for jumping
000026AE  4DF8 12FA               2692      LEA     modeTable,A6 Load the table into A6
000026B2  4EB6 0000               2693      JSR     (A6,D0)     Jump to subroutine of value at D0   
000026B6                          2694      *------------------------------------------------------------
000026B6                          2695      * MachineCode: 0001 **** **** **** *BIT
000026B6                          2696      * Only last 3 bits which is stored at D0 => Source Register
000026B6                          2697              
000026B6  1206                    2698      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000026B8  EB09                    2699      LSL.B   #5,D1       **** **** BIT0 0000
000026BA  EA09                    2700      LSR.B   #5,D1       **** **** 0000 0BIT
000026BC  1001                    2701      MOVE.B  D1,D0      
000026BE  C0FC 0008               2702      MULU    #8,D0       value adjusted for jumping
000026C2  4DF8 13A8               2703      LEA     regNumTable ,A6 Load the table into A6
000026C6  4EB6 0000               2704      JSR     (A6,D0)     Jump to subroutine of value at D1        
000026CA  6000 110A               2705      BRA printCode
000026CE                          2706  
000026CE                          2707  addi_L
000026CE                          2708      *- D4 holds our .L abs and immi data
000026CE                          2709  
000026CE  1606                    2710      MOVE.B  D6, D3 [ 0000 0000 [USES] [USES] ] D6 ->d3
000026D0                          2711      *- GET the register Value [ 0000 0XXX ]
000026D0  EB0B                    2712      LSL.B   #5,D3
000026D2  EA0B                    2713      LSR.B   #5,D3       got it here
000026D4                          2714      
000026D4                          2715      *-immediate data not allowed here
000026D4                          2716  
000026D4                          2717      *-Because we know this is ADDi.B we know that out data following this opcode
000026D4                          2718      *-is of size B, so we can now grab that data, look at it and print it out
000026D4                          2719      
000026D4                          2720      *temporary store out data in memory
000026D4                          2721      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
000026D4                          2722      ;MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
000026D4  261C                    2723      MOVE.L  (A4)+,D3 ;throw away just need to increment pointer here
000026D6                          2724      ;MOVE.L  D5,D3   Move the data back into D3 to play with
000026D6                          2725      
000026D6                          2726      *-PRINT
000026D6  14FC 0020               2727      MOVE.B  #' ',(A2)+  ;print 
000026DA  14FC 0020               2728      MOVE.B  #' ',(A2)+  ;print 
000026DE  14FC 0020               2729      MOVE.B  #' ',(A2)+  ;print 
000026E2  14FC 0020               2730      MOVE.B  #' ',(A2)+  ;print   
000026E6  14FC 0041               2731      MOVE.B  #'A',(A2)+  ;print A
000026EA  14FC 0044               2732      MOVE.B  #'D',(A2)+  ;print D
000026EE  14FC 0044               2733      MOVE.B  #'D',(A2)+  ;print 
000026F2  14FC 0049               2734      MOVE.B  #'I',(A2)+  ;print 
000026F6  14FC 002E               2735      MOVE.B  #'.',(A2)+  ;print 
000026FA  14FC 004C               2736      MOVE.B  #'L',(A2)+  ;print 
000026FE  14FC 0020               2737      MOVE.B  #' ',(A2)+  ;print 
00002702  14FC 0020               2738      MOVE.B  #' ',(A2)+  ;print     
00002706  14FC 0023               2739      MOVE.B  #'#',(A2)+  ;print 
0000270A  14FC 0024               2740      MOVE.B  #'$',(A2)+  ;print 
0000270E                          2741      
0000270E  4EB8 155C               2742      JSR print_long
00002712                          2743      *-STORE LONG data inside D3
00002712  14FC 002C               2744      MOVE.B  #',',(A2)+
00002716                          2745      * MachineCode: 0001 **** **** **BI T***
00002716                          2746      * Only next last 3 bits which is stored at D0 => Source Address mode
00002716  4242                    2747      CLR     D2
00002718  4241                    2748      CLR     D1
0000271A  1406                    2749      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000271C  E50A                    2750      LSL.B   #2,D2       **** **** BIT* **00
0000271E  EA0A                    2751      LSR.B   #5,D2       **** **** 0000 0BIT
00002720  1002                    2752      MOVE.B  D2,D0
00002722  C0FC 0008               2753      MULU    #8,D0       value adjusted for jumping
00002726  4DF8 12FA               2754      LEA     modeTable,A6 Load the table into A6
0000272A  4EB6 0000               2755      JSR     (A6,D0)     Jump to subroutine of value at D0
0000272E                          2756              
0000272E  1206                    2757      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002730  EB09                    2758      LSL.B   #5,D1       **** **** BIT0 0000
00002732  EA09                    2759      LSR.B   #5,D1       **** **** 0000 0BIT
00002734  1001                    2760      MOVE.B  D1,D0      
00002736  C0FC 0008               2761      MULU    #8,D0       value adjusted for jumping
0000273A  4DF8 13A8               2762      LEA     regNumTable ,A6 Load the table into A6
0000273E  4EB6 0000               2763      JSR     (A6,D0)     Jump to subroutine of value at D1
00002742  6000 1092               2764      BRA printCode
00002746                          2765  
00002746                          2766  
00002746                          2767  subi_B_
00002746  3406                    2768      MOVE.W  D6,D2
00002748                          2769      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
00002748  3C1C                    2770      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
0000274A                          2771      
0000274A  14FC 0020               2772      MOVE.B  #' ',(A2)+  ;print 
0000274E  14FC 0020               2773      MOVE.B  #' ',(A2)+  ;print 
00002752  14FC 0020               2774      MOVE.B  #' ',(A2)+  ;print 
00002756  14FC 0020               2775      MOVE.B  #' ',(A2)+  ;print   
0000275A  14FC 0053               2776      MOVE.B  #'S',(A2)+  ;print 
0000275E  14FC 0055               2777      MOVE.B  #'U',(A2)+  ;print 
00002762  14FC 0042               2778      MOVE.B  #'B',(A2)+  ;print 
00002766  14FC 0049               2779      MOVE.B  #'I',(A2)+  ;print 
0000276A  14FC 002E               2780      MOVE.B  #'.',(A2)+  ;print 
0000276E  14FC 0042               2781      MOVE.B  #'B',(A2)+  ;print 
00002772  14FC 0020               2782      MOVE.B  #' ',(A2)+  ;print 
00002776  14FC 0020               2783      MOVE.B  #' ',(A2)+  ;print 
0000277A  14FC 0023               2784      MOVE.B  #'#',(A2)+  ;print 
0000277E  14FC 0024               2785      MOVE.B  #'$',(A2)+  ;print 
00002782                          2786      
00002782  4EB8 10FE               2787      JSR print_word
00002786  3C02                    2788      MOVE.W  D2,D6
00002788  14FC 002C               2789      MOVE.B  #',',(A2)+
0000278C                          2790      
0000278C                          2791      * MachineCode: 0001 **** **** **BI T***
0000278C                          2792      * Only next last 3 bits which is stored at D0 => Source Address mode
0000278C  4242                    2793      CLR     D2
0000278E  4241                    2794      CLR     D1
00002790  1406                    2795      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002792  E50A                    2796      LSL.B   #2,D2       **** **** BIT* **00
00002794  EA0A                    2797      LSR.B   #5,D2       **** **** 0000 0BIT
00002796  1002                    2798      MOVE.B  D2,D0
00002798  C0FC 0008               2799      MULU    #8,D0       value adjusted for jumping
0000279C  4DF8 12FA               2800      LEA     modeTable,A6 Load the table into A6
000027A0  4EB6 0000               2801      JSR     (A6,D0)     Jump to subroutine of value at D0   
000027A4                          2802      *------------------------------------------------------------
000027A4                          2803      * MachineCode: 0001 **** **** **** *BIT
000027A4                          2804      * Only last 3 bits which is stored at D0 => Source Register
000027A4                          2805              
000027A4  1206                    2806      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000027A6  EB09                    2807      LSL.B   #5,D1       **** **** BIT0 0000
000027A8  EA09                    2808      LSR.B   #5,D1       **** **** 0000 0BIT
000027AA  1001                    2809      MOVE.B  D1,D0      
000027AC  C0FC 0008               2810      MULU    #8,D0       value adjusted for jumping
000027B0  4DF8 13A8               2811      LEA     regNumTable ,A6 Load the table into A6
000027B4  4EB6 0000               2812      JSR     (A6,D0)     Jump to subroutine of value at D1        
000027B8  6000 101C               2813      BRA printCode
000027BC                          2814      
000027BC                          2815  
000027BC                          2816  subi_W_
000027BC  3406                    2817      MOVE.W  D6,D2
000027BE                          2818      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
000027BE  3C1C                    2819      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
000027C0                          2820      
000027C0                          2821      
000027C0  14FC 0020               2822      MOVE.B  #' ',(A2)+  ;print 
000027C4  14FC 0020               2823      MOVE.B  #' ',(A2)+  ;print 
000027C8  14FC 0020               2824      MOVE.B  #' ',(A2)+  ;print 
000027CC  14FC 0020               2825      MOVE.B  #' ',(A2)+  ;print   
000027D0  14FC 0053               2826      MOVE.B  #'S',(A2)+  ;print 
000027D4  14FC 0055               2827      MOVE.B  #'U',(A2)+  ;print 
000027D8  14FC 0042               2828      MOVE.B  #'B',(A2)+  ;print 
000027DC  14FC 0049               2829      MOVE.B  #'I',(A2)+  ;print 
000027E0  14FC 002E               2830      MOVE.B  #'.',(A2)+  ;print 
000027E4  14FC 0057               2831      MOVE.B  #'W',(A2)+  ;print 
000027E8  14FC 0020               2832      MOVE.B  #' ',(A2)+  ;print 
000027EC  14FC 0020               2833      MOVE.B  #' ',(A2)+  ;print 
000027F0  14FC 0023               2834      MOVE.B  #'#',(A2)+  ;print 
000027F4  14FC 0024               2835      MOVE.B  #'$',(A2)+  ;print 
000027F8                          2836      
000027F8  4EB8 10FE               2837      JSR print_word
000027FC  3C02                    2838      MOVE.W  D2,D6
000027FE  14FC 002C               2839      MOVE.B  #',',(A2)+
00002802                          2840      
00002802                          2841      * MachineCode: 0001 **** **** **BI T***
00002802                          2842      * Only next last 3 bits which is stored at D0 => Source Address mode
00002802  4242                    2843      CLR     D2
00002804  4241                    2844      CLR     D1
00002806  1406                    2845      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002808  E50A                    2846      LSL.B   #2,D2       **** **** BIT* **00
0000280A  EA0A                    2847      LSR.B   #5,D2       **** **** 0000 0BIT
0000280C  1002                    2848      MOVE.B  D2,D0
0000280E  C0FC 0008               2849      MULU    #8,D0       value adjusted for jumping
00002812  4DF8 12FA               2850      LEA     modeTable,A6 Load the table into A6
00002816  4EB6 0000               2851      JSR     (A6,D0)     Jump to subroutine of value at D0   
0000281A                          2852      *------------------------------------------------------------
0000281A                          2853      * MachineCode: 0001 **** **** **** *BIT
0000281A                          2854      * Only last 3 bits which is stored at D0 => Source Register
0000281A                          2855              
0000281A  1206                    2856      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000281C  EB09                    2857      LSL.B   #5,D1       **** **** BIT0 0000
0000281E  EA09                    2858      LSR.B   #5,D1       **** **** 0000 0BIT
00002820  1001                    2859      MOVE.B  D1,D0      
00002822  C0FC 0008               2860      MULU    #8,D0       value adjusted for jumping
00002826  4DF8 13A8               2861      LEA     regNumTable ,A6 Load the table into A6
0000282A  4EB6 0000               2862      JSR     (A6,D0)     Jump to subroutine of value at D1        
0000282E  6000 0FA6               2863      BRA printCode   
00002832                          2864      
00002832                          2865  subi_L_
00002832                          2866  
00002832  261C                    2867      MOVE.L  (A4)+,D3 ;throw away just need to increment pointer here
00002834  14FC 0020               2868      MOVE.B  #' ',(A2)+  ;print 
00002838  14FC 0020               2869      MOVE.B  #' ',(A2)+  ;print 
0000283C  14FC 0020               2870      MOVE.B  #' ',(A2)+  ;print 
00002840  14FC 0020               2871      MOVE.B  #' ',(A2)+  ;print   
00002844  14FC 0053               2872      MOVE.B  #'S',(A2)+  ;print 
00002848  14FC 0055               2873      MOVE.B  #'U',(A2)+  ;print 
0000284C  14FC 0042               2874      MOVE.B  #'B',(A2)+  ;print 
00002850  14FC 0049               2875      MOVE.B  #'I',(A2)+  ;print 
00002854  14FC 002E               2876      MOVE.B  #'.',(A2)+  ;print 
00002858  14FC 004C               2877      MOVE.B  #'L',(A2)+  ;print 
0000285C  14FC 0020               2878      MOVE.B  #' ',(A2)+  ;print 
00002860  14FC 0020               2879      MOVE.B  #' ',(A2)+  ;print 
00002864  14FC 0023               2880      MOVE.B  #'#',(A2)+  ;print 
00002868  14FC 0024               2881      MOVE.B  #'$',(A2)+  ;print 
0000286C                          2882      
0000286C  4EB8 155C               2883      JSR print_long
00002870                          2884      *-STORE LONG data inside D3
00002870  14FC 002C               2885      MOVE.B  #',',(A2)+
00002874                          2886      * MachineCode: 0001 **** **** **BI T***
00002874                          2887      * Only next last 3 bits which is stored at D0 => Source Address mode
00002874  4242                    2888      CLR     D2
00002876  4241                    2889      CLR     D1
00002878  1406                    2890      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000287A  E50A                    2891      LSL.B   #2,D2       **** **** BIT* **00
0000287C  EA0A                    2892      LSR.B   #5,D2       **** **** 0000 0BIT
0000287E  1002                    2893      MOVE.B  D2,D0
00002880  C0FC 0008               2894      MULU    #8,D0       value adjusted for jumping
00002884  4DF8 12FA               2895      LEA     modeTable,A6 Load the table into A6
00002888  4EB6 0000               2896      JSR     (A6,D0)     Jump to subroutine of value at D0
0000288C                          2897              
0000288C  1206                    2898      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000288E  EB09                    2899      LSL.B   #5,D1       **** **** BIT0 0000
00002890  EA09                    2900      LSR.B   #5,D1       **** **** 0000 0BIT
00002892  1001                    2901      MOVE.B  D1,D0      
00002894  C0FC 0008               2902      MULU    #8,D0       value adjusted for jumping
00002898  4DF8 13A8               2903      LEA     regNumTable ,A6 Load the table into A6
0000289C  4EB6 0000               2904      JSR     (A6,D0)     Jump to subroutine of value at D1
000028A0  6000 0F34               2905      BRA printCode
000028A4                          2906  
000028A4                          2907  
000028A4                          2908  decode0000
000028A4                          2909      *-this will put the bits 6 - 10 however add zeros
000028A4  4283                    2910      CLR.L   D3
000028A6  3606                    2911      MOVE.W  D6,D3
000028A8  C67C 0FF0               2912      AND.W   #$0FF0,D3   shortcut of zeroing the edges without shiting around
000028AC                          2913                          ;[ 0000 1111 1111 0000]
000028AC                          2914                          ;[ ZERO KEEP KEEP ZERO ]
000028AC                          2915                          ;[ 
000028AC  EC4B                    2916      LSR.W   #6,D3   [ 0000 1111 11XX XXXX ] -> [ 0000 0000 0011 1111 ]
000028AE  C67C 00FF               2917      AND.W   #$00FF,D3   Cancel out any trailing bits 
000028B2  4E75                    2918      RTS
000028B4                          2919  
000028B4                          2920  -------------------- end include --------------------
000028B4                          2921              INCLUDE 'op0101.x68'    SUBQ,ADDQ
000028B4                          2922  op0101
000028B4                          2923  
000028B4                          2924  
000028B4  4EB8 1618               2925      JSR WordOrLong
000028B8                          2926      
000028B8                          2927      * ---------------------------------------------------------
000028B8                          2928              
000028B8  B63C 0000               2929       CMP.B   #hex_0,D3    ;see if it's a ADDQ.B
000028BC  6700 002A               2930       BEQ     addQ_B       ;branch 
000028C0  B63C 0001               2931       CMP.B   #hex_1,D3    ;see if it's a ADDQ.W
000028C4  6700 009E               2932       BEQ     addQ_W       ;branch
000028C8  B63C 0002               2933       CMP.B   #hex_2,D3    ;see if it's a ADDQ.L
000028CC  6700 0112               2934       BEQ     addQ_L       ;branch
000028D0  B63C 0004               2935       CMP.B  #hex_4,D3
000028D4  6700 0186               2936       BEQ    subQ_B
000028D8  B63C 0005               2937       CMP.B  #hex_5,D3
000028DC  6700 01FA               2938       BEQ    subQ_W
000028E0  B63C 0006               2939       CMP.B  #hex_6,D3
000028E4  6700 026E               2940       BEQ    subQ_L
000028E8                          2941       
000028E8                          2942  
000028E8                          2943  
000028E8                          2944  addQ_B:
000028E8                          2945      *-get bit 9 to 11
000028E8                          2946      *-data field
000028E8                          2947          *-PRINT
000028E8  14FC 0020               2948      MOVE.B  #' ',(A2)+  ;print 
000028EC  14FC 0020               2949      MOVE.B  #' ',(A2)+  ;print 
000028F0  14FC 0020               2950      MOVE.B  #' ',(A2)+  ;print 
000028F4  14FC 0020               2951      MOVE.B  #' ',(A2)+  ;print   
000028F8  14FC 0041               2952      MOVE.B  #'A',(A2)+  ;print
000028FC  14FC 0044               2953      MOVE.B  #'D',(A2)+  ;print 
00002900  14FC 0044               2954      MOVE.B  #'D',(A2)+  ;print 
00002904  14FC 0051               2955      MOVE.B  #'Q',(A2)+  ;print 
00002908  14FC 002E               2956      MOVE.B  #'.',(A2)+  ;print 
0000290C  14FC 0042               2957      MOVE.B  #'B',(A2)+  ;print 
00002910  14FC 0020               2958      MOVE.B  #' ',(A2)+  ;print 
00002914  14FC 0020               2959      MOVE.B  #' ',(A2)+  ;print     
00002918  14FC 0023               2960      MOVE.B  #'#',(A2)+  ;print 
0000291C                          2961  
0000291C                          2962  
0000291C  4EB9 00002BD4           2963      JSR get_bit_9_11_ADDQ
00002922                          2964  
00002922  C2FC 0008               2965      MULU    #8,D1       value adjusted for jumping
00002926  4DF8 1418               2966      LEA     NumTable ,A6 Load the table into A6
0000292A  4EB6 1000               2967      JSR     (A6,D1)     Jump to subroutine of value at D1
0000292E                          2968      
0000292E  14FC 002C               2969      MOVE.B  #',',(A2)+
00002932                          2970  
00002932  4242                    2971              CLR     D2
00002934  4241                    2972              CLR     D1
00002936  1406                    2973              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002938  E50A                    2974              LSL.B   #2,D2       **** **** BIT* **00
0000293A  EA0A                    2975              LSR.B   #5,D2       **** **** 0000 0BIT
0000293C  1002                    2976              MOVE.B  D2,D0
0000293E  C0FC 0008               2977              MULU    #8,D0       value adjusted for jumping
00002942  4DF8 12FA               2978              LEA     modeTable,A6 Load the table into A6
00002946  4EB6 0000               2979              JSR     (A6,D0)     Jump to subroutine of value at D0
0000294A                          2980              
0000294A  1206                    2981              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000294C  EB09                    2982              LSL.B   #5,D1       **** **** BIT0 0000
0000294E  EA09                    2983              LSR.B   #5,D1       **** **** 0000 0BIT
00002950  1001                    2984              MOVE.B  D1,D0      
00002952  C0FC 0008               2985              MULU    #8,D0       value adjusted for jumping
00002956  4DF8 13A8               2986              LEA     regNumTable ,A6 Load the table into A6
0000295A  4EB6 0000               2987              JSR     (A6,D0)     Jump to subroutine of value at D1
0000295E                          2988  
0000295E  4EB9 000037D6           2989          JSR printCode   
00002964                          2990  
00002964                          2991  
00002964                          2992  addQ_W:
00002964                          2993      *-get bit 9 to 11
00002964                          2994      *-data field
00002964                          2995          *-PRINT
00002964  14FC 0020               2996      MOVE.B  #' ',(A2)+  ;print 
00002968  14FC 0020               2997      MOVE.B  #' ',(A2)+  ;print 
0000296C  14FC 0020               2998      MOVE.B  #' ',(A2)+  ;print 
00002970  14FC 0020               2999      MOVE.B  #' ',(A2)+  ;print   
00002974  14FC 0041               3000      MOVE.B  #'A',(A2)+  ;print
00002978  14FC 0044               3001      MOVE.B  #'D',(A2)+  ;print 
0000297C  14FC 0044               3002      MOVE.B  #'D',(A2)+  ;print 
00002980  14FC 0051               3003      MOVE.B  #'Q',(A2)+  ;print 
00002984  14FC 002E               3004      MOVE.B  #'.',(A2)+  ;print 
00002988  14FC 0057               3005      MOVE.B  #'W',(A2)+  ;print 
0000298C  14FC 0020               3006      MOVE.B  #' ',(A2)+  ;print 
00002990  14FC 0020               3007      MOVE.B  #' ',(A2)+  ;print     
00002994  14FC 0023               3008      MOVE.B  #'#',(A2)+  ;print 
00002998                          3009  
00002998                          3010  
00002998  4EB9 00002BD4           3011      JSR get_bit_9_11_ADDQ
0000299E  C2FC 0008               3012      MULU    #8,D1       value adjusted for jumping
000029A2  4DF8 1418               3013      LEA     NumTable ,A6 Load the table into A6
000029A6  4EB6 1000               3014      JSR     (A6,D1)     Jump to subroutine of value at D1
000029AA                          3015      
000029AA  14FC 002C               3016      MOVE.B  #',',(A2)+
000029AE                          3017  
000029AE  4242                    3018              CLR     D2
000029B0  4241                    3019              CLR     D1
000029B2  1406                    3020              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000029B4  E50A                    3021              LSL.B   #2,D2       **** **** BIT* **00
000029B6  EA0A                    3022              LSR.B   #5,D2       **** **** 0000 0BIT
000029B8  1002                    3023              MOVE.B  D2,D0
000029BA  C0FC 0008               3024              MULU    #8,D0       value adjusted for jumping
000029BE  4DF8 12FA               3025              LEA     modeTable,A6 Load the table into A6
000029C2  4EB6 0000               3026              JSR     (A6,D0)     Jump to subroutine of value at D0
000029C6                          3027              
000029C6  1206                    3028              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000029C8  EB09                    3029              LSL.B   #5,D1       **** **** BIT0 0000
000029CA  EA09                    3030              LSR.B   #5,D1       **** **** 0000 0BIT
000029CC  1001                    3031              MOVE.B  D1,D0      
000029CE  C0FC 0008               3032              MULU    #8,D0       value adjusted for jumping
000029D2  4DF8 13A8               3033              LEA     regNumTable ,A6 Load the table into A6
000029D6  4EB6 0000               3034              JSR     (A6,D0)     Jump to subroutine of value at D1
000029DA                          3035  
000029DA  4EB9 000037D6           3036          JSR printCode   
000029E0                          3037  
000029E0                          3038  
000029E0                          3039  
000029E0                          3040  addQ_L:
000029E0                          3041      *-get bit 9 to 11
000029E0                          3042      *-data field
000029E0                          3043          *-PRINT
000029E0  14FC 0020               3044      MOVE.B  #' ',(A2)+  ;print 
000029E4  14FC 0020               3045      MOVE.B  #' ',(A2)+  ;print 
000029E8  14FC 0020               3046      MOVE.B  #' ',(A2)+  ;print 
000029EC  14FC 0020               3047      MOVE.B  #' ',(A2)+  ;print   
000029F0  14FC 0041               3048      MOVE.B  #'A',(A2)+  ;print
000029F4  14FC 0044               3049      MOVE.B  #'D',(A2)+  ;print 
000029F8  14FC 0044               3050      MOVE.B  #'D',(A2)+  ;print 
000029FC  14FC 0051               3051      MOVE.B  #'Q',(A2)+  ;print 
00002A00  14FC 002E               3052      MOVE.B  #'.',(A2)+  ;print 
00002A04  14FC 004C               3053      MOVE.B  #'L',(A2)+  ;print 
00002A08  14FC 0020               3054      MOVE.B  #' ',(A2)+  ;print 
00002A0C  14FC 0020               3055      MOVE.B  #' ',(A2)+  ;print     
00002A10  14FC 0023               3056      MOVE.B  #'#',(A2)+  ;print 
00002A14                          3057  
00002A14                          3058  
00002A14  4EB9 00002BD4           3059      JSR get_bit_9_11_ADDQ
00002A1A                          3060  
00002A1A  C2FC 0008               3061      MULU    #8,D1       value adjusted for jumping
00002A1E  4DF8 1418               3062      LEA     NumTable ,A6 Load the table into A6
00002A22  4EB6 1000               3063      JSR     (A6,D1)     Jump to subroutine of value at D1
00002A26                          3064      
00002A26  14FC 002C               3065      MOVE.B  #',',(A2)+
00002A2A                          3066  
00002A2A  4242                    3067              CLR     D2
00002A2C  4241                    3068              CLR     D1
00002A2E  1406                    3069              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002A30  E50A                    3070              LSL.B   #2,D2       **** **** BIT* **00
00002A32  EA0A                    3071              LSR.B   #5,D2       **** **** 0000 0BIT
00002A34  1002                    3072              MOVE.B  D2,D0
00002A36  C0FC 0008               3073              MULU    #8,D0       value adjusted for jumping
00002A3A  4DF8 12FA               3074              LEA     modeTable,A6 Load the table into A6
00002A3E  4EB6 0000               3075              JSR     (A6,D0)     Jump to subroutine of value at D0
00002A42                          3076              
00002A42  1206                    3077              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002A44  EB09                    3078              LSL.B   #5,D1       **** **** BIT0 0000
00002A46  EA09                    3079              LSR.B   #5,D1       **** **** 0000 0BIT
00002A48  1001                    3080              MOVE.B  D1,D0      
00002A4A  C0FC 0008               3081              MULU    #8,D0       value adjusted for jumping
00002A4E  4DF8 13A8               3082              LEA     regNumTable ,A6 Load the table into A6
00002A52  4EB6 0000               3083              JSR     (A6,D0)     Jump to subroutine of value at D1
00002A56                          3084  
00002A56  4EB9 000037D6           3085          JSR printCode   
00002A5C                          3086  
00002A5C                          3087  subQ_B:
00002A5C                          3088      *-get bit 9 to 11
00002A5C                          3089      *-data field
00002A5C                          3090          *-PRINT
00002A5C  14FC 0020               3091      MOVE.B  #' ',(A2)+  ;print 
00002A60  14FC 0020               3092      MOVE.B  #' ',(A2)+  ;print 
00002A64  14FC 0020               3093      MOVE.B  #' ',(A2)+  ;print 
00002A68  14FC 0020               3094      MOVE.B  #' ',(A2)+  ;print   
00002A6C  14FC 0053               3095      MOVE.B  #'S',(A2)+  ;print
00002A70  14FC 0055               3096      MOVE.B  #'U',(A2)+  ;print 
00002A74  14FC 0042               3097      MOVE.B  #'B',(A2)+  ;print 
00002A78  14FC 0051               3098      MOVE.B  #'Q',(A2)+  ;print 
00002A7C  14FC 002E               3099      MOVE.B  #'.',(A2)+  ;print 
00002A80  14FC 0042               3100      MOVE.B  #'B',(A2)+  ;print 
00002A84  14FC 0020               3101      MOVE.B  #' ',(A2)+  ;print 
00002A88  14FC 0020               3102      MOVE.B  #' ',(A2)+  ;print     
00002A8C  14FC 0023               3103      MOVE.B  #'#',(A2)+  ;print 
00002A90                          3104  
00002A90                          3105  
00002A90  4EB9 00002BD4           3106      JSR get_bit_9_11_ADDQ
00002A96  C2FC 0008               3107      MULU    #8,D1       value adjusted for jumping
00002A9A  4DF8 1418               3108      LEA     NumTable ,A6 Load the table into A6
00002A9E  4EB6 1000               3109      JSR     (A6,D1)     Jump to subroutine of value at D1
00002AA2                          3110      
00002AA2  14FC 002C               3111      MOVE.B  #',',(A2)+
00002AA6                          3112  
00002AA6  4242                    3113              CLR     D2
00002AA8  4241                    3114              CLR     D1
00002AAA  1406                    3115              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002AAC  E50A                    3116              LSL.B   #2,D2       **** **** BIT* **00
00002AAE  EA0A                    3117              LSR.B   #5,D2       **** **** 0000 0BIT
00002AB0  1002                    3118              MOVE.B  D2,D0
00002AB2  C0FC 0008               3119              MULU    #8,D0       value adjusted for jumping
00002AB6  4DF8 12FA               3120              LEA     modeTable,A6 Load the table into A6
00002ABA  4EB6 0000               3121              JSR     (A6,D0)     Jump to subroutine of value at D0
00002ABE                          3122              
00002ABE  1206                    3123              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002AC0  EB09                    3124              LSL.B   #5,D1       **** **** BIT0 0000
00002AC2  EA09                    3125              LSR.B   #5,D1       **** **** 0000 0BIT
00002AC4  1001                    3126              MOVE.B  D1,D0      
00002AC6  C0FC 0008               3127              MULU    #8,D0       value adjusted for jumping
00002ACA  4DF8 13A8               3128              LEA     regNumTable ,A6 Load the table into A6
00002ACE  4EB6 0000               3129              JSR     (A6,D0)     Jump to subroutine of value at D1
00002AD2                          3130  
00002AD2  4EB9 000037D6           3131          JSR printCode   
00002AD8                          3132  
00002AD8                          3133  
00002AD8                          3134  
00002AD8                          3135  
00002AD8                          3136  subQ_W:
00002AD8                          3137      *-get bit 9 to 11
00002AD8                          3138      *-data field
00002AD8                          3139          *-PRINT
00002AD8  14FC 0020               3140      MOVE.B  #' ',(A2)+  ;print 
00002ADC  14FC 0020               3141      MOVE.B  #' ',(A2)+  ;print 
00002AE0  14FC 0020               3142      MOVE.B  #' ',(A2)+  ;print 
00002AE4  14FC 0020               3143      MOVE.B  #' ',(A2)+  ;print   
00002AE8  14FC 0053               3144      MOVE.B  #'S',(A2)+  ;print
00002AEC  14FC 0055               3145      MOVE.B  #'U',(A2)+  ;print 
00002AF0  14FC 0042               3146      MOVE.B  #'B',(A2)+  ;print 
00002AF4  14FC 0051               3147      MOVE.B  #'Q',(A2)+  ;print 
00002AF8  14FC 002E               3148      MOVE.B  #'.',(A2)+  ;print 
00002AFC  14FC 0057               3149      MOVE.B  #'W',(A2)+  ;print 
00002B00  14FC 0020               3150      MOVE.B  #' ',(A2)+  ;print 
00002B04  14FC 0020               3151      MOVE.B  #' ',(A2)+  ;print     
00002B08  14FC 0023               3152      MOVE.B  #'#',(A2)+  ;print 
00002B0C                          3153  
00002B0C                          3154  
00002B0C  4EB9 00002BD4           3155      JSR get_bit_9_11_ADDQ
00002B12  C2FC 0008               3156      MULU    #8,D1       value adjusted for jumping
00002B16  4DF8 1418               3157      LEA     NumTable ,A6 Load the table into A6
00002B1A  4EB6 1000               3158      JSR     (A6,D1)     Jump to subroutine of value at D1
00002B1E                          3159      
00002B1E  14FC 002C               3160      MOVE.B  #',',(A2)+
00002B22                          3161  
00002B22  4242                    3162              CLR     D2
00002B24  4241                    3163              CLR     D1
00002B26  1406                    3164              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002B28  E50A                    3165              LSL.B   #2,D2       **** **** BIT* **00
00002B2A  EA0A                    3166              LSR.B   #5,D2       **** **** 0000 0BIT
00002B2C  1002                    3167              MOVE.B  D2,D0
00002B2E  C0FC 0008               3168              MULU    #8,D0       value adjusted for jumping
00002B32  4DF8 12FA               3169              LEA     modeTable,A6 Load the table into A6
00002B36  4EB6 0000               3170              JSR     (A6,D0)     Jump to subroutine of value at D0
00002B3A                          3171              
00002B3A  1206                    3172              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002B3C  EB09                    3173              LSL.B   #5,D1       **** **** BIT0 0000
00002B3E  EA09                    3174              LSR.B   #5,D1       **** **** 0000 0BIT
00002B40  1001                    3175              MOVE.B  D1,D0      
00002B42  C0FC 0008               3176              MULU    #8,D0       value adjusted for jumping
00002B46  4DF8 13A8               3177              LEA     regNumTable ,A6 Load the table into A6
00002B4A  4EB6 0000               3178              JSR     (A6,D0)     Jump to subroutine of value at D1
00002B4E                          3179  
00002B4E  4EB9 000037D6           3180          JSR printCode   
00002B54                          3181  
00002B54                          3182  
00002B54                          3183  
00002B54                          3184  subQ_L:
00002B54                          3185      *-get bit 9 to 11
00002B54                          3186      *-data field
00002B54                          3187          *-PRINT
00002B54  14FC 0020               3188      MOVE.B  #' ',(A2)+  ;print 
00002B58  14FC 0020               3189      MOVE.B  #' ',(A2)+  ;print 
00002B5C  14FC 0020               3190      MOVE.B  #' ',(A2)+  ;print 
00002B60  14FC 0020               3191      MOVE.B  #' ',(A2)+  ;print   
00002B64  14FC 0053               3192      MOVE.B  #'S',(A2)+  ;print
00002B68  14FC 0055               3193      MOVE.B  #'U',(A2)+  ;print 
00002B6C  14FC 0042               3194      MOVE.B  #'B',(A2)+  ;print 
00002B70  14FC 0051               3195      MOVE.B  #'Q',(A2)+  ;print 
00002B74  14FC 002E               3196      MOVE.B  #'.',(A2)+  ;print 
00002B78  14FC 004C               3197      MOVE.B  #'L',(A2)+  ;print 
00002B7C  14FC 0020               3198      MOVE.B  #' ',(A2)+  ;print 
00002B80  14FC 0020               3199      MOVE.B  #' ',(A2)+  ;print     
00002B84  14FC 0023               3200      MOVE.B  #'#',(A2)+  ;print 
00002B88                          3201  
00002B88                          3202  
00002B88  4EB9 00002BD4           3203      JSR get_bit_9_11_ADDQ
00002B8E  C2FC 0008               3204      MULU    #8,D1       value adjusted for jumping
00002B92  4DF8 1418               3205      LEA     NumTable ,A6 Load the table into A6
00002B96  4EB6 1000               3206      JSR     (A6,D1)     Jump to subroutine of value at D1
00002B9A                          3207      
00002B9A  14FC 002C               3208      MOVE.B  #',',(A2)+
00002B9E                          3209  
00002B9E  4242                    3210              CLR     D2
00002BA0  4241                    3211              CLR     D1
00002BA2  1406                    3212              MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002BA4  E50A                    3213              LSL.B   #2,D2       **** **** BIT* **00
00002BA6  EA0A                    3214              LSR.B   #5,D2       **** **** 0000 0BIT
00002BA8  1002                    3215              MOVE.B  D2,D0
00002BAA  C0FC 0008               3216              MULU    #8,D0       value adjusted for jumping
00002BAE  4DF8 12FA               3217              LEA     modeTable,A6 Load the table into A6
00002BB2  4EB6 0000               3218              JSR     (A6,D0)     Jump to subroutine of value at D0
00002BB6                          3219              
00002BB6  1206                    3220              MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002BB8  EB09                    3221              LSL.B   #5,D1       **** **** BIT0 0000
00002BBA  EA09                    3222              LSR.B   #5,D1       **** **** 0000 0BIT
00002BBC  1001                    3223              MOVE.B  D1,D0      
00002BBE  C0FC 0008               3224              MULU    #8,D0       value adjusted for jumping
00002BC2  4DF8 13A8               3225              LEA     regNumTable ,A6 Load the table into A6
00002BC6  4EB6 0000               3226              JSR     (A6,D0)     Jump to subroutine of value at D1
00002BCA                          3227  
00002BCA  4EB9 000037D6           3228          JSR printCode   
00002BD0                          3229  
00002BD0                          3230  
00002BD0                          3231  
00002BD0                          3232  addd_8
00002BD0  5001                    3233          add.b   #8,D1
00002BD2  4E75                    3234          RTS
00002BD4                          3235  
00002BD4                          3236  get_bit_9_11_ADDQ:
00002BD4                          3237              *-get bit 9 _11 which is immediate datae, and check if its zero
00002BD4                          3238              *-if so add 8 ZERO repersents 8 in ADDQ
00002BD4  3206                    3239              MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
00002BD6  E949                    3240              LSL.W   #4,D1       BIT* **** **** 0000
00002BD8  E049                    3241              LSR.W   #8,D1       0000 0000 BIT* ****
00002BDA  EA49                    3242              LSR.W   #5,D1       0000 0000 0000 0BIT   
00002BDC  B23C 0000               3243              CMP.B   #0,D1
00002BE0  67EE                    3244              BEQ     addd_8  
00002BE2  4E75                    3245              RTS
00002BE4                          3246  
00002BE4                          3247   
00002BE4                          3248  -------------------- end include --------------------
00002BE4                          3249              INCLUDE 'op1110.x68'    ROR,ROL,ASR,ASL,LSL,LSR
00002BE4                          3250  op1110:
00002BE4                          3251      ;ASR,LSL,ROL,ROR
00002BE4  4EB9 00003766           3252      JSR get_shift_size
00002BEA                          3253      
00002BEA                          3254      *-compare for the sphift size
00002BEA                          3255      
00002BEA                          3256      
00002BEA  4EB9 00003756           3257      JSR get_shift_normal
00002BF0                          3258      
00002BF0                          3259      *--------------------------------
00002BF0  B63C 0004               3260              CMP.B   #$04,D3     ; ASR.B Dn
00002BF4  6700 04FE               3261              BEQ     asrB_RN   
00002BF8  B63C 0000               3262              CMP.B   #$00,D3     ; ASR.B Immidiate
00002BFC  6700 055A               3263              BEQ     asrB_IN      
00002C00                          3264  
00002C00                          3265    
00002C00  B63C 000C               3266              CMP.B   #$0C,D3     ; ASR.W Dn
00002C04  6700 059C               3267              BEQ     asrW_RN          
00002C08  B63C 0008               3268              CMP.B   #$08,D3     ; ASR.W Immidiate
00002C0C  6700 05F8               3269              BEQ     asrW_IN          
00002C10                          3270  
00002C10                          3271  
00002C10  B63C 0014               3272              CMP.B   #$14,D3     ; ASR.L Dn
00002C14  6700 063A               3273              BEQ     asrL_RN            
00002C18  B63C 0010               3274              CMP.B   #$10,D3     ; ASR.L Immidiate
00002C1C  6700 0696               3275              BEQ     asrL_IN
00002C20                          3276              
00002C20                          3277              
00002C20  B63C 0025               3278              CMP.B   #$25,D3     ; LSL.B Dn
00002C24  6700 06D8               3279              BEQ     lslB_RN      
00002C28                          3280  
00002C28  B63C 0021               3281              CMP.B   #$21,D3     ; LSL.B Immidiate
00002C2C  6700 0734               3282              BEQ     lslB_IN      
00002C30                          3283  
00002C30                          3284  
00002C30  B63C 002D               3285              CMP.B   #$2D,D3     ; LSL.W Dn
00002C34  6700 0776               3286              BEQ     lslW_RN          
00002C38  B63C 0029               3287              CMP.B   #$29,D3     ; LSL.W Immidiate
00002C3C  6700 07D2               3288              BEQ     lslW_IN          
00002C40                          3289  
00002C40                          3290  
00002C40  B63C 0035               3291              CMP.B   #$35,D3     ; LSL.L Dn
00002C44  6700 0814               3292              BEQ     lslL_RN            
00002C48                          3293  
00002C48  B63C 0031               3294              CMP.B   #$31,D3     ; LSL.L Immidiate
00002C4C  6700 0870               3295              BEQ     lslL_IN
00002C50                          3296              
00002C50                          3297  
00002C50  B63C 0001               3298              CMP.B   #$01,D3 LSR.B Immidiate
00002C54  6700 0916               3299              BEQ     lsrB_IN
00002C58  B63C 0005               3300              CMP.B   #$05,D3 LSR.B   Dn
00002C5C  6700 08AA               3301              BEQ     lsrB_RN 
00002C60                          3302              
00002C60  B63C 0009               3303              CMP.B   #$09,D3 LSR.W   Immidiate
00002C64  6700 09B4               3304              BEQ     lsrW_IN
00002C68  B63C 000D               3305              CMP.B   #$0D,D3 LSR.W   DN
00002C6C  6700 0948               3306              BEQ     lsrW_RN
00002C70                          3307              
00002C70  B63C 0011               3308              CMP.B   #$11,D3 LSR.L   Immidiate
00002C74  6700 0A52               3309              BEQ     lsrL_IN 
00002C78                          3310              
00002C78  B63C 0015               3311              CMP.B   #$15,D3 LSR.L   Dn
00002C7C  6700 09E6               3312              BEQ     lsrL_RN
00002C80                          3313              
00002C80  B63C 0007               3314              CMP.B   #$07,D3     ; ROR.B Dn            
00002C84  6700 005A               3315              BEQ     rorB_RN  
00002C88  B63C 0003               3316              CMP.B   #$03,D3     ; ROR.B Immidiate
00002C8C  6700 00B6               3317              BEQ     rorB_IN      
00002C90                          3318      
00002C90  B63C 000B               3319              CMP.B   #$0B,D3     ; ROR.W Immidiate
00002C94  6700 00F8               3320              BEQ     rorW_IN            
00002C98                          3321              
00002C98  B63C 000F               3322              CMP.B   #$0F,D3     ; ROR.W Dn
00002C9C  6700 013A               3323              BEQ     rorW_RN  
00002CA0                          3324          
00002CA0                          3325          
00002CA0  B63C 0017               3326              CMP.B   #$17,D3     ; ROR.L Dn
00002CA4  6700 0196               3327              BEQ     rorL_RN            
00002CA8                          3328  
00002CA8                          3329    
00002CA8  B63C 0013               3330              CMP.B   #$13,D3     ; ROR.L Immidiate
00002CAC  6700 01F2               3331              BEQ     rorL_IN
00002CB0                          3332              
00002CB0  B63C 0027               3333              CMP.B   #$27,D3     ; ROL.B Dn
00002CB4  6700 0234               3334              BEQ     rolB_RN      
00002CB8  B63C 0023               3335              CMP.B   #$23,D3     ; ROL.B Immidiate
00002CBC  6700 0290               3336              BEQ     rolB_IN      
00002CC0                          3337  
00002CC0                          3338  
00002CC0  B63C 002F               3339              CMP.B   #$2F,D3     ; ROL.W Dn
00002CC4  6700 02D2               3340              BEQ     rolW_RN          
00002CC8  B63C 002B               3341              CMP.B   #$2B,D3     ; ROL.W Immidiate
00002CCC  6700 032E               3342              BEQ     rolW_IN        
00002CD0                          3343  
00002CD0  B63C 0037               3344              CMP.B   #$37,D3     ; ROL.L Dn
00002CD4  6700 0370               3345              BEQ     rolL_RN            
00002CD8  B63C 0033               3346              CMP.B   #$33,D3     ; ROL.L Immidiate
00002CDC  6700 03CC               3347              BEQ     rolL_IN
00002CE0                          3348                    
00002CE0                          3349  
00002CE0                          3350      
00002CE0                          3351  
00002CE0                          3352      
00002CE0                          3353  rorB_RN
00002CE0                          3354      *-ROR.B D1,D2 dataregister ea
00002CE0  14FC 0020               3355      MOVE.B  #' ',(A2)+  ;print some spaces 
00002CE4  14FC 0020               3356      MOVE.B  #' ',(A2)+
00002CE8  14FC 0020               3357      MOVE.B  #' ',(A2)+
00002CEC  14FC 0020               3358      MOVE.B  #' ',(A2)+
00002CF0  14FC 0052               3359      MOVE.B  #'R',(A2)+  ;print R
00002CF4  14FC 004F               3360      MOVE.B  #'O',(A2)+  ;print O
00002CF8  14FC 0052               3361      MOVE.B  #'R',(A2)+  ;print R
00002CFC  14FC 002E               3362      MOVE.B  #'.',(A2)+  ;print .
00002D00  14FC 0042               3363      MOVE.B  #'B',(A2)+  ;print B
00002D04  14FC 0020               3364      MOVE.B  #' ',(A2)+  ;
00002D08  14FC 0020               3365      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D0C  14FC 0020               3366      MOVE.B  #' ',(A2)+
00002D10                          3367  
00002D10  14FC 0044               3368      MOVE.B  #'D',(A2)+ 
00002D14  4EB9 0000374A           3369      JSR get_bit_9_11
00002D1A  4DF8 1418               3370      LEA numTable,A6     load numtable
00002D1E  C6FC 0008               3371      MULU    #8,D3   prepare for the jump
00002D22  4EB6 3000               3372      JSR     (A6,D3) get the register number
00002D26                          3373      
00002D26  14FC 002C               3374      MOVE.B  #',',(A2)+
00002D2A                          3375      
00002D2A  14FC 0044               3376      MOVE.B  #'D',(A2)+
00002D2E  4EB9 00003740           3377      JSR     get_bit_0_2
00002D34                          3378      
00002D34  4DF8 1418               3379      LEA     numTable,A6
00002D38  C6FC 0008               3380      MULU    #8,D3
00002D3C  4EB6 3000               3381      JSR     (A6,D3)     get the register number
00002D40                          3382      
00002D40  6000 0A94               3383      BRA printCode
00002D44                          3384      
00002D44                          3385      
00002D44                          3386  rorB_IN
00002D44                          3387      *-ROR.B #,D2 immediate addressing
00002D44  14FC 0020               3388      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D48  14FC 0020               3389      MOVE.B  #' ',(A2)+
00002D4C  14FC 0020               3390      MOVE.B  #' ',(A2)+
00002D50  14FC 0020               3391      MOVE.B  #' ',(A2)+
00002D54  14FC 0052               3392      MOVE.B  #'R',(A2)+  ;print R
00002D58  14FC 004F               3393      MOVE.B  #'O',(A2)+  ;print O
00002D5C  14FC 0052               3394      MOVE.B  #'R',(A2)+  ;print R
00002D60  14FC 002E               3395      MOVE.B  #'.',(A2)+  ;print .
00002D64  14FC 0042               3396      MOVE.B  #'B',(A2)+  ;print B
00002D68  14FC 0020               3397      MOVE.B  #' ',(A2)+  ;
00002D6C  14FC 0020               3398      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D70  14FC 0020               3399      MOVE.B  #' ',(A2)+
00002D74  14FC 0023               3400      MOVE.B  #'#',(A2)+  ;print #
00002D78                          3401      
00002D78  4EB9 0000374A           3402      JSR get_bit_9_11
00002D7E  B63C 0000               3403      CMP.B   #0,D3  *-check if value is 8
00002D82  6600 09AC               3404      BNE shift_Not_8
00002D86  14FC 0038               3405      MOVE.B  #'8',(A2)+
00002D8A  6000 0986               3406      BRA     shift_complete
00002D8E                          3407      
00002D8E                          3408  rorW_IN
00002D8E                          3409      *-immeidiate data from ROR.W
00002D8E                          3410          *-ROR.W #,D2 immediate addressing
00002D8E  14FC 0020               3411      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D92  14FC 0020               3412      MOVE.B  #' ',(A2)+
00002D96  14FC 0020               3413      MOVE.B  #' ',(A2)+
00002D9A  14FC 0020               3414      MOVE.B  #' ',(A2)+
00002D9E  14FC 0052               3415      MOVE.B  #'R',(A2)+  ;print R
00002DA2  14FC 004F               3416      MOVE.B  #'O',(A2)+  ;print O
00002DA6  14FC 0052               3417      MOVE.B  #'R',(A2)+  ;print R
00002DAA  14FC 002E               3418      MOVE.B  #'.',(A2)+  ;print .
00002DAE  14FC 0057               3419      MOVE.B  #'W',(A2)+  ;print W
00002DB2  14FC 0020               3420      MOVE.B  #' ',(A2)+  ;
00002DB6  14FC 0020               3421      MOVE.B  #' ',(A2)+  ;print some spaces 
00002DBA  14FC 0020               3422      MOVE.B  #' ',(A2)+
00002DBE  14FC 0023               3423      MOVE.B  #'#',(A2)+  ;print #
00002DC2                          3424      
00002DC2  4EB9 0000374A           3425      JSR get_bit_9_11    get the bits for the immidate data
00002DC8  B63C 0000               3426      CMP.B   #0,D3       check if its zero, meaning a move of 8
00002DCC  6600 0962               3427      BNE     shift_Not_8     not 8(zero) move to get the value and print reg number
00002DD0  14FC 0038               3428      MOVE.B  #'8',(A2)+
00002DD4  6000 093C               3429      BRA     shift_complete
00002DD8                          3430      
00002DD8                          3431  
00002DD8                          3432  rorW_RN
00002DD8                          3433      *-Register data from ROR.W
00002DD8  14FC 0020               3434      MOVE.B  #' ',(A2)+  ;print some spaces 
00002DDC  14FC 0020               3435      MOVE.B  #' ',(A2)+
00002DE0  14FC 0020               3436      MOVE.B  #' ',(A2)+
00002DE4  14FC 0020               3437      MOVE.B  #' ',(A2)+
00002DE8  14FC 0052               3438      MOVE.B  #'R',(A2)+  ;print R
00002DEC  14FC 004F               3439      MOVE.B  #'O',(A2)+  ;print O
00002DF0  14FC 0052               3440      MOVE.B  #'R',(A2)+  ;print R
00002DF4  14FC 002E               3441      MOVE.B  #'.',(A2)+  ;print .
00002DF8  14FC 0057               3442      MOVE.B  #'W',(A2)+  ;print W
00002DFC  14FC 0020               3443      MOVE.B  #' ',(A2)+  ;
00002E00  14FC 0020               3444      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E04  14FC 0020               3445      MOVE.B  #' ',(A2)+  ;print 
00002E08                          3446      
00002E08  14FC 0044               3447      MOVE.B  #'D',(A2)+
00002E0C  4EB9 0000374A           3448      JSR get_bit_9_11
00002E12                          3449      
00002E12  4DF8 1418               3450      LEA     numTable,A6
00002E16  C6FC 0008               3451      MULU    #8,D3
00002E1A  4EB6 3000               3452      JSR     (A6,D3)
00002E1E                          3453      
00002E1E  14FC 002C               3454      MOVE.B  #',',(A2)+
00002E22  14FC 0044               3455      MOVE.B  #'D',(A2)+
00002E26                          3456      
00002E26  4EB9 00003740           3457      JSR     get_bit_0_2
00002E2C                          3458      
00002E2C  4DF8 1418               3459      LEA     numTable,A6
00002E30  C6FC 0008               3460      MULU    #8,D3
00002E34  4EB6 3000               3461      JSR     (A6,D3)
00002E38                          3462      
00002E38  6000 099C               3463      BRA printCode
00002E3C                          3464      
00002E3C                          3465  rorL_RN
00002E3C                          3466      *-ROR.L #,D#
00002E3C  14FC 0020               3467      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E40  14FC 0020               3468      MOVE.B  #' ',(A2)+
00002E44  14FC 0020               3469      MOVE.B  #' ',(A2)+
00002E48  14FC 0020               3470      MOVE.B  #' ',(A2)+
00002E4C  14FC 0052               3471      MOVE.B  #'R',(A2)+  ;print R
00002E50  14FC 004F               3472      MOVE.B  #'O',(A2)+  ;print O
00002E54  14FC 0052               3473      MOVE.B  #'R',(A2)+  ;print R
00002E58  14FC 002E               3474      MOVE.B  #'.',(A2)+  ;print .
00002E5C  14FC 004C               3475      MOVE.B  #'L',(A2)+  ;print L
00002E60  14FC 0020               3476      MOVE.B  #' ',(A2)+  ;
00002E64  14FC 0020               3477      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E68  14FC 0020               3478      MOVE.B  #' ',(A2)+  ;print 
00002E6C                          3479      
00002E6C  14FC 0044               3480      MOVE.B  #'D',(A2)+
00002E70  4EB9 0000374A           3481      JSR get_bit_9_11
00002E76                          3482      
00002E76  4DF8 1418               3483      LEA     numTable,A6
00002E7A  C6FC 0008               3484      MULU    #8,D3
00002E7E  4EB6 3000               3485      JSR     (A6,D3)
00002E82                          3486      
00002E82  14FC 002C               3487      MOVE.B  #',',(A2)+
00002E86  14FC 0044               3488      MOVE.B  #'D',(A2)+
00002E8A                          3489      
00002E8A  4EB9 00003740           3490      JSR     get_bit_0_2
00002E90                          3491      
00002E90  4DF8 1418               3492      LEA     numTable,A6
00002E94  C6FC 0008               3493      MULU    #8,D3
00002E98  4EB6 3000               3494      JSR     (A6,D3)
00002E9C                          3495      
00002E9C  6000 0938               3496      BRA printCode
00002EA0                          3497      
00002EA0                          3498  rorL_IN
00002EA0                          3499      *-Immediate addressing for ROR.L    #,D2
00002EA0                          3500      
00002EA0                          3501  
00002EA0  14FC 0020               3502      MOVE.B  #' ',(A2)+  ;print some spaces 
00002EA4  14FC 0020               3503      MOVE.B  #' ',(A2)+
00002EA8  14FC 0020               3504      MOVE.B  #' ',(A2)+
00002EAC  14FC 0020               3505      MOVE.B  #' ',(A2)+
00002EB0  14FC 0052               3506      MOVE.B  #'R',(A2)+  ;print R
00002EB4  14FC 004F               3507      MOVE.B  #'O',(A2)+  ;print O
00002EB8  14FC 0052               3508      MOVE.B  #'R',(A2)+  ;print R
00002EBC  14FC 002E               3509      MOVE.B  #'.',(A2)+  ;print .
00002EC0  14FC 004C               3510      MOVE.B  #'L',(A2)+  ;print L
00002EC4  14FC 0020               3511      MOVE.B  #' ',(A2)+  ;
00002EC8  14FC 0020               3512      MOVE.B  #' ',(A2)+  ;print some spaces 
00002ECC  14FC 0020               3513      MOVE.B  #' ',(A2)+
00002ED0  14FC 0023               3514      MOVE.B  #'#',(A2)+  ;print #
00002ED4                          3515      
00002ED4  4EB9 0000374A           3516      JSR get_bit_9_11    get the bits for the immidate data
00002EDA  B63C 0000               3517      CMP.B   #0,D3       check if its zero, meaning a move of 8
00002EDE  6600 0850               3518      BNE     shift_Not_8     not 8(zero) move to get the value and print reg number
00002EE2  14FC 0038               3519      MOVE.B  #'8',(A2)+
00002EE6  6000 082A               3520      BRA     shift_complete
00002EEA                          3521      
00002EEA                          3522      
00002EEA                          3523  rolB_RN
00002EEA                          3524      *-ROL.B D1,D2 dataregister ea
00002EEA  14FC 0020               3525      MOVE.B  #' ',(A2)+  ;print some spaces 
00002EEE  14FC 0020               3526      MOVE.B  #' ',(A2)+
00002EF2  14FC 0020               3527      MOVE.B  #' ',(A2)+
00002EF6  14FC 0020               3528      MOVE.B  #' ',(A2)+
00002EFA  14FC 0052               3529      MOVE.B  #'R',(A2)+  ;print R
00002EFE  14FC 004F               3530      MOVE.B  #'O',(A2)+  ;print O
00002F02  14FC 004C               3531      MOVE.B  #'L',(A2)+  ;print L
00002F06  14FC 002E               3532      MOVE.B  #'.',(A2)+  ;print .
00002F0A  14FC 0042               3533      MOVE.B  #'B',(A2)+  ;print B
00002F0E  14FC 0020               3534      MOVE.B  #' ',(A2)+  ;
00002F12  14FC 0020               3535      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F16  14FC 0020               3536      MOVE.B  #' ',(A2)+
00002F1A                          3537  
00002F1A  14FC 0044               3538      MOVE.B  #'D',(A2)+ 
00002F1E  4EB9 0000374A           3539      JSR get_bit_9_11
00002F24  4DF8 1418               3540      LEA numTable,A6     load numtable
00002F28  C6FC 0008               3541      MULU    #8,D3   prepare for the jump
00002F2C  4EB6 3000               3542      JSR     (A6,D3) get the register number
00002F30                          3543      
00002F30  14FC 002C               3544      MOVE.B  #',',(A2)+
00002F34                          3545      
00002F34  14FC 0044               3546      MOVE.B  #'D',(A2)+
00002F38  4EB9 00003740           3547      JSR     get_bit_0_2
00002F3E                          3548      
00002F3E  4DF8 1418               3549      LEA     numTable,A6
00002F42  C6FC 0008               3550      MULU    #8,D3
00002F46  4EB6 3000               3551      JSR     (A6,D3)     get the register number
00002F4A                          3552      
00002F4A  6000 088A               3553      BRA printCode
00002F4E                          3554      
00002F4E                          3555      
00002F4E                          3556  rolB_IN
00002F4E                          3557      *-ROR.B #,D2 immediate addressing
00002F4E  14FC 0020               3558      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F52  14FC 0020               3559      MOVE.B  #' ',(A2)+
00002F56  14FC 0020               3560      MOVE.B  #' ',(A2)+
00002F5A  14FC 0020               3561      MOVE.B  #' ',(A2)+
00002F5E  14FC 0052               3562      MOVE.B  #'R',(A2)+  ;print R
00002F62  14FC 004F               3563      MOVE.B  #'O',(A2)+  ;print O
00002F66  14FC 004C               3564      MOVE.B  #'L',(A2)+  ;print L
00002F6A  14FC 002E               3565      MOVE.B  #'.',(A2)+  ;print .
00002F6E  14FC 0042               3566      MOVE.B  #'B',(A2)+  ;print B
00002F72  14FC 0020               3567      MOVE.B  #' ',(A2)+  ;
00002F76  14FC 0020               3568      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F7A  14FC 0020               3569      MOVE.B  #' ',(A2)+
00002F7E  14FC 0023               3570      MOVE.B  #'#',(A2)+  ;print #
00002F82                          3571      
00002F82  4EB9 0000374A           3572      JSR get_bit_9_11
00002F88  B63C 0000               3573      CMP.B   #0,D3  *-check if value is 8
00002F8C  6600 07A2               3574      BNE shift_Not_8
00002F90  14FC 0038               3575      MOVE.B  #'8',(A2)+
00002F94  6000 077C               3576      BRA     shift_complete
00002F98                          3577      
00002F98                          3578  
00002F98                          3579  
00002F98                          3580  rolW_RN
00002F98                          3581      *-ROL.W D1,D2 dataregister ea
00002F98  14FC 0020               3582      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F9C  14FC 0020               3583      MOVE.B  #' ',(A2)+
00002FA0  14FC 0020               3584      MOVE.B  #' ',(A2)+
00002FA4  14FC 0020               3585      MOVE.B  #' ',(A2)+
00002FA8  14FC 0052               3586      MOVE.B  #'R',(A2)+  ;print R
00002FAC  14FC 004F               3587      MOVE.B  #'O',(A2)+  ;print O
00002FB0  14FC 004C               3588      MOVE.B  #'L',(A2)+  ;print L
00002FB4  14FC 002E               3589      MOVE.B  #'.',(A2)+  ;print .
00002FB8  14FC 0057               3590      MOVE.B  #'W',(A2)+  ;print W
00002FBC  14FC 0020               3591      MOVE.B  #' ',(A2)+  ;
00002FC0  14FC 0020               3592      MOVE.B  #' ',(A2)+  ;print some spaces 
00002FC4  14FC 0020               3593      MOVE.B  #' ',(A2)+
00002FC8                          3594  
00002FC8  14FC 0044               3595      MOVE.B  #'D',(A2)+ 
00002FCC  4EB9 0000374A           3596      JSR get_bit_9_11
00002FD2  4DF8 1418               3597      LEA numTable,A6     load numtable
00002FD6  C6FC 0008               3598      MULU    #8,D3   prepare for the jump
00002FDA  4EB6 3000               3599      JSR     (A6,D3) get the register number
00002FDE                          3600      
00002FDE  14FC 002C               3601      MOVE.B  #',',(A2)+
00002FE2                          3602      
00002FE2  14FC 0044               3603      MOVE.B  #'D',(A2)+
00002FE6  4EB9 00003740           3604      JSR     get_bit_0_2
00002FEC                          3605      
00002FEC  4DF8 1418               3606      LEA     numTable,A6
00002FF0  C6FC 0008               3607      MULU    #8,D3
00002FF4  4EB6 3000               3608      JSR     (A6,D3)     get the register number
00002FF8                          3609      
00002FF8  6000 07DC               3610      BRA printCode
00002FFC                          3611      
00002FFC                          3612      
00002FFC                          3613  rolW_IN
00002FFC                          3614      *-ROR.W #,D2 immediate addressing
00002FFC  14FC 0020               3615      MOVE.B  #' ',(A2)+  ;print some spaces 
00003000  14FC 0020               3616      MOVE.B  #' ',(A2)+
00003004  14FC 0020               3617      MOVE.B  #' ',(A2)+
00003008  14FC 0020               3618      MOVE.B  #' ',(A2)+
0000300C  14FC 0052               3619      MOVE.B  #'R',(A2)+  ;print R
00003010  14FC 004F               3620      MOVE.B  #'O',(A2)+  ;print O
00003014  14FC 004C               3621      MOVE.B  #'L',(A2)+  ;print L
00003018  14FC 002E               3622      MOVE.B  #'.',(A2)+  ;print .
0000301C  14FC 0057               3623      MOVE.B  #'W',(A2)+  ;print W
00003020  14FC 0020               3624      MOVE.B  #' ',(A2)+  ;
00003024  14FC 0020               3625      MOVE.B  #' ',(A2)+  ;print some spaces 
00003028  14FC 0020               3626      MOVE.B  #' ',(A2)+
0000302C  14FC 0023               3627      MOVE.B  #'#',(A2)+  ;print #
00003030                          3628      
00003030  4EB9 0000374A           3629      JSR get_bit_9_11
00003036  B63C 0000               3630      CMP.B   #0,D3  *-check if value is 8
0000303A  6600 06F4               3631      BNE shift_Not_8
0000303E  14FC 0038               3632      MOVE.B  #'8',(A2)+
00003042  6000 06CE               3633      BRA     shift_complete
00003046                          3634  
00003046                          3635    
00003046                          3636  rolL_RN
00003046                          3637      *-ROL.L D1,D2 dataregister ea
00003046  14FC 0020               3638      MOVE.B  #' ',(A2)+  ;print some spaces 
0000304A  14FC 0020               3639      MOVE.B  #' ',(A2)+
0000304E  14FC 0020               3640      MOVE.B  #' ',(A2)+
00003052  14FC 0020               3641      MOVE.B  #' ',(A2)+
00003056  14FC 0052               3642      MOVE.B  #'R',(A2)+  ;print R
0000305A  14FC 004F               3643      MOVE.B  #'O',(A2)+  ;print O
0000305E  14FC 004C               3644      MOVE.B  #'L',(A2)+  ;print L
00003062  14FC 002E               3645      MOVE.B  #'.',(A2)+  ;print .
00003066  14FC 004C               3646      MOVE.B  #'L',(A2)+  ;print L
0000306A  14FC 0020               3647      MOVE.B  #' ',(A2)+  ;
0000306E  14FC 0020               3648      MOVE.B  #' ',(A2)+  ;print some spaces 
00003072  14FC 0020               3649      MOVE.B  #' ',(A2)+
00003076                          3650  
00003076  14FC 0044               3651      MOVE.B  #'D',(A2)+ 
0000307A  4EB9 0000374A           3652      JSR get_bit_9_11
00003080  4DF8 1418               3653      LEA numTable,A6     load numtable
00003084  C6FC 0008               3654      MULU    #8,D3   prepare for the jump
00003088  4EB6 3000               3655      JSR     (A6,D3) get the register number
0000308C                          3656      
0000308C  14FC 002C               3657      MOVE.B  #',',(A2)+
00003090                          3658      
00003090  14FC 0044               3659      MOVE.B  #'D',(A2)+
00003094  4EB9 00003740           3660      JSR     get_bit_0_2
0000309A                          3661      
0000309A  4DF8 1418               3662      LEA     numTable,A6
0000309E  C6FC 0008               3663      MULU    #8,D3
000030A2  4EB6 3000               3664      JSR     (A6,D3)     get the register number
000030A6                          3665      
000030A6  6000 072E               3666      BRA printCode
000030AA                          3667      
000030AA                          3668      
000030AA                          3669  rolL_IN
000030AA                          3670      *-ROR.B #,D2 immediate addressing
000030AA  14FC 0020               3671      MOVE.B  #' ',(A2)+  ;print some spaces 
000030AE  14FC 0020               3672      MOVE.B  #' ',(A2)+
000030B2  14FC 0020               3673      MOVE.B  #' ',(A2)+
000030B6  14FC 0020               3674      MOVE.B  #' ',(A2)+
000030BA  14FC 0052               3675      MOVE.B  #'R',(A2)+  ;print R
000030BE  14FC 004F               3676      MOVE.B  #'O',(A2)+  ;print O
000030C2  14FC 004C               3677      MOVE.B  #'L',(A2)+  ;print L
000030C6  14FC 002E               3678      MOVE.B  #'.',(A2)+  ;print .
000030CA  14FC 004C               3679      MOVE.B  #'L',(A2)+  ;print L
000030CE  14FC 0020               3680      MOVE.B  #' ',(A2)+  ;
000030D2  14FC 0020               3681      MOVE.B  #' ',(A2)+  ;print some spaces 
000030D6  14FC 0020               3682      MOVE.B  #' ',(A2)+
000030DA  14FC 0023               3683      MOVE.B  #'#',(A2)+  ;print #
000030DE                          3684      
000030DE  4EB9 0000374A           3685      JSR get_bit_9_11
000030E4  B63C 0000               3686      CMP.B   #0,D3  *-check if value is 8
000030E8  6600 0646               3687      BNE shift_Not_8
000030EC  14FC 0038               3688      MOVE.B  #'8',(A2)+
000030F0  6000 0620               3689      BRA     shift_complete
000030F4                          3690      
000030F4                          3691  
000030F4                          3692  
000030F4                          3693  asrB_RN
000030F4                          3694      *ASR.B #,Dn
000030F4                          3695      
000030F4                          3696      
000030F4  14FC 0020               3697      MOVE.B  #' ',(A2)+  ;print some spaces 
000030F8  14FC 0020               3698      MOVE.B  #' ',(A2)+
000030FC  14FC 0020               3699      MOVE.B  #' ',(A2)+
00003100  14FC 0020               3700      MOVE.B  #' ',(A2)+
00003104  14FC 0041               3701      MOVE.B  #'A',(A2)+  ;print A
00003108  14FC 0053               3702      MOVE.B  #'S',(A2)+  ;print S
0000310C  14FC 0052               3703      MOVE.B  #'R',(A2)+  ;print R
00003110  14FC 002E               3704      MOVE.B  #'.',(A2)+  ;print .
00003114  14FC 0042               3705      MOVE.B  #'B',(A2)+  ;print 
00003118  14FC 0020               3706      MOVE.B  #' ',(A2)+  ;
0000311C  14FC 0020               3707      MOVE.B  #' ',(A2)+  ;print some spaces 
00003120  14FC 0020               3708      MOVE.B  #' ',(A2)+
00003124  14FC 0044               3709      MOVE.B  #'D',(A2)+ 
00003128  4EB9 0000374A           3710      JSR     get_bit_9_11
0000312E  4DF8 1418               3711      LEA     numTable,A6
00003132  C6FC 0008               3712      MULU    #8,D3
00003136  4EB6 3000               3713      JSR     (A6,D3)
0000313A                          3714      
0000313A  14FC 002C               3715      MOVE.B  #',',(A2)+
0000313E  14FC 0044               3716      MOVE.B  #'D',(A2)+
00003142  4EB9 00003740           3717      JSR get_bit_0_2
00003148                          3718      
00003148  4DF8 1418               3719      LEA     numTable,A6
0000314C  C6FC 0008               3720      MULU    #8,D3
00003150  4EB6 3000               3721      JSR     (A6,D3)
00003154                          3722      
00003154  6000 0680               3723      BRA     printCode
00003158                          3724      
00003158                          3725      
00003158                          3726  asrB_IN
00003158                          3727      
00003158  14FC 0020               3728      MOVE.B  #' ',(A2)+  ;print some spaces 
0000315C  14FC 0020               3729      MOVE.B  #' ',(A2)+
00003160  14FC 0020               3730      MOVE.B  #' ',(A2)+
00003164  14FC 0020               3731      MOVE.B  #' ',(A2)+
00003168  14FC 0041               3732      MOVE.B  #'A',(A2)+  ;print A
0000316C  14FC 0053               3733      MOVE.B  #'S',(A2)+  ;print S
00003170  14FC 0052               3734      MOVE.B  #'R',(A2)+  ;print R
00003174  14FC 002E               3735      MOVE.B  #'.',(A2)+  ;print .
00003178  14FC 0042               3736      MOVE.B  #'B',(A2)+  ;print 
0000317C  14FC 0020               3737      MOVE.B  #' ',(A2)+  ;
00003180  14FC 0020               3738      MOVE.B  #' ',(A2)+  ;print some spaces 
00003184  14FC 0020               3739      MOVE.B  #' ',(A2)+
00003188  14FC 0023               3740      MOVE.B  #'#',(A2)+
0000318C                          3741      
0000318C  4EB9 0000374A           3742      JSR     get_bit_9_11
00003192  B63C 0000               3743      CMP.B   #0,D3
00003196  6600 0598               3744      BNE     shift_Not_8
0000319A  14FC 0038               3745      MOVE.B  #'8',(A2)+
0000319E  6000 0572               3746      BRA     shift_complete
000031A2                          3747  
000031A2                          3748  
000031A2                          3749  
000031A2                          3750  asrW_RN
000031A2                          3751      *ASR.B #,Dn
000031A2                          3752      
000031A2                          3753      
000031A2  14FC 0020               3754      MOVE.B  #' ',(A2)+  ;print some spaces 
000031A6  14FC 0020               3755      MOVE.B  #' ',(A2)+
000031AA  14FC 0020               3756      MOVE.B  #' ',(A2)+
000031AE  14FC 0020               3757      MOVE.B  #' ',(A2)+
000031B2  14FC 0041               3758      MOVE.B  #'A',(A2)+  ;print A
000031B6  14FC 0053               3759      MOVE.B  #'S',(A2)+  ;print S
000031BA  14FC 0052               3760      MOVE.B  #'R',(A2)+  ;print R
000031BE  14FC 002E               3761      MOVE.B  #'.',(A2)+  ;print .
000031C2  14FC 0057               3762      MOVE.B  #'W',(A2)+  ;print W
000031C6  14FC 0020               3763      MOVE.B  #' ',(A2)+  ;
000031CA  14FC 0020               3764      MOVE.B  #' ',(A2)+  ;print some spaces 
000031CE  14FC 0020               3765      MOVE.B  #' ',(A2)+
000031D2  14FC 0044               3766      MOVE.B  #'D',(A2)+ 
000031D6  4EB9 0000374A           3767      JSR     get_bit_9_11
000031DC  4DF8 1418               3768      LEA     numTable,A6
000031E0  C6FC 0008               3769      MULU    #8,D3
000031E4  4EB6 3000               3770      JSR     (A6,D3)
000031E8                          3771      
000031E8  14FC 002C               3772      MOVE.B  #',',(A2)+
000031EC  14FC 0044               3773      MOVE.B  #'D',(A2)+
000031F0  4EB9 00003740           3774      JSR get_bit_0_2
000031F6                          3775      
000031F6  4DF8 1418               3776      LEA     numTable,A6
000031FA  C6FC 0008               3777      MULU    #8,D3
000031FE  4EB6 3000               3778      JSR     (A6,D3)
00003202                          3779      
00003202  6000 05D2               3780      BRA     printCode
00003206                          3781      
00003206                          3782      
00003206                          3783  asrW_IN
00003206                          3784      
00003206  14FC 0020               3785      MOVE.B  #' ',(A2)+  ;print some spaces 
0000320A  14FC 0020               3786      MOVE.B  #' ',(A2)+
0000320E  14FC 0020               3787      MOVE.B  #' ',(A2)+
00003212  14FC 0020               3788      MOVE.B  #' ',(A2)+
00003216  14FC 0041               3789      MOVE.B  #'A',(A2)+  ;print A
0000321A  14FC 0053               3790      MOVE.B  #'S',(A2)+  ;print S
0000321E  14FC 0052               3791      MOVE.B  #'R',(A2)+  ;print R
00003222  14FC 002E               3792      MOVE.B  #'.',(A2)+  ;print .
00003226  14FC 0057               3793      MOVE.B  #'W',(A2)+  ;print W
0000322A  14FC 0020               3794      MOVE.B  #' ',(A2)+  ;
0000322E  14FC 0020               3795      MOVE.B  #' ',(A2)+  ;print some spaces 
00003232  14FC 0020               3796      MOVE.B  #' ',(A2)+
00003236  14FC 0023               3797      MOVE.B  #'#',(A2)+
0000323A                          3798      
0000323A  4EB9 0000374A           3799      JSR     get_bit_9_11
00003240  B63C 0000               3800      CMP.B   #0,D3
00003244  6600 04EA               3801      BNE     shift_Not_8
00003248  14FC 0038               3802      MOVE.B  #'8',(A2)+
0000324C  6000 04C4               3803      BRA     shift_complete
00003250                          3804  
00003250                          3805  
00003250                          3806  
00003250                          3807  
00003250                          3808  asrL_RN
00003250                          3809      *ASR.B #,Dn
00003250                          3810      
00003250                          3811      
00003250  14FC 0020               3812      MOVE.B  #' ',(A2)+  ;print some spaces 
00003254  14FC 0020               3813      MOVE.B  #' ',(A2)+
00003258  14FC 0020               3814      MOVE.B  #' ',(A2)+
0000325C  14FC 0020               3815      MOVE.B  #' ',(A2)+
00003260  14FC 0041               3816      MOVE.B  #'A',(A2)+  ;print A
00003264  14FC 0053               3817      MOVE.B  #'S',(A2)+  ;print S
00003268  14FC 0052               3818      MOVE.B  #'R',(A2)+  ;print R
0000326C  14FC 002E               3819      MOVE.B  #'.',(A2)+  ;print .
00003270  14FC 004C               3820      MOVE.B  #'L',(A2)+  ;print W
00003274  14FC 0020               3821      MOVE.B  #' ',(A2)+  ;
00003278  14FC 0020               3822      MOVE.B  #' ',(A2)+  ;print some spaces 
0000327C  14FC 0020               3823      MOVE.B  #' ',(A2)+
00003280  14FC 0044               3824      MOVE.B  #'D',(A2)+ 
00003284  4EB9 0000374A           3825      JSR     get_bit_9_11
0000328A  4DF8 1418               3826      LEA     numTable,A6
0000328E  C6FC 0008               3827      MULU    #8,D3
00003292  4EB6 3000               3828      JSR     (A6,D3)
00003296                          3829      
00003296  14FC 002C               3830      MOVE.B  #',',(A2)+
0000329A  14FC 0044               3831      MOVE.B  #'D',(A2)+
0000329E  4EB9 00003740           3832      JSR get_bit_0_2
000032A4                          3833      
000032A4  4DF8 1418               3834      LEA     numTable,A6
000032A8  C6FC 0008               3835      MULU    #8,D3
000032AC  4EB6 3000               3836      JSR     (A6,D3)
000032B0                          3837      
000032B0  6000 0524               3838      BRA     printCode
000032B4                          3839      
000032B4                          3840      
000032B4                          3841  asrL_IN
000032B4                          3842      
000032B4  14FC 0020               3843      MOVE.B  #' ',(A2)+  ;print some spaces 
000032B8  14FC 0020               3844      MOVE.B  #' ',(A2)+
000032BC  14FC 0020               3845      MOVE.B  #' ',(A2)+
000032C0  14FC 0020               3846      MOVE.B  #' ',(A2)+
000032C4  14FC 0041               3847      MOVE.B  #'A',(A2)+  ;print A
000032C8  14FC 0053               3848      MOVE.B  #'S',(A2)+  ;print S
000032CC  14FC 0052               3849      MOVE.B  #'R',(A2)+  ;print R
000032D0  14FC 002E               3850      MOVE.B  #'.',(A2)+  ;print .
000032D4  14FC 004C               3851      MOVE.B  #'L',(A2)+  ;print W
000032D8  14FC 0020               3852      MOVE.B  #' ',(A2)+  ;
000032DC  14FC 0020               3853      MOVE.B  #' ',(A2)+  ;print some spaces 
000032E0  14FC 0020               3854      MOVE.B  #' ',(A2)+
000032E4  14FC 0023               3855      MOVE.B  #'#',(A2)+
000032E8                          3856      
000032E8  4EB9 0000374A           3857      JSR     get_bit_9_11
000032EE  B63C 0000               3858      CMP.B   #0,D3
000032F2  6600 043C               3859      BNE     shift_Not_8
000032F6  14FC 0038               3860      MOVE.B  #'8',(A2)+
000032FA  6000 0416               3861      BRA     shift_complete
000032FE                          3862  
000032FE                          3863  
000032FE                          3864  lslB_RN
000032FE                          3865      *LSL.B #,Dn
000032FE                          3866      
000032FE                          3867      
000032FE  14FC 0020               3868      MOVE.B  #' ',(A2)+  ;print some spaces 
00003302  14FC 0020               3869      MOVE.B  #' ',(A2)+
00003306  14FC 0020               3870      MOVE.B  #' ',(A2)+
0000330A  14FC 0020               3871      MOVE.B  #' ',(A2)+
0000330E  14FC 004C               3872      MOVE.B  #'L',(A2)+  ;print L
00003312  14FC 0053               3873      MOVE.B  #'S',(A2)+  ;print S
00003316  14FC 004C               3874      MOVE.B  #'L',(A2)+  ;print L
0000331A  14FC 002E               3875      MOVE.B  #'.',(A2)+  ;print .
0000331E  14FC 0042               3876      MOVE.B  #'B',(A2)+  ;print 
00003322  14FC 0020               3877      MOVE.B  #' ',(A2)+  ;
00003326  14FC 0020               3878      MOVE.B  #' ',(A2)+  ;print some spaces 
0000332A  14FC 0020               3879      MOVE.B  #' ',(A2)+
0000332E  14FC 0044               3880      MOVE.B  #'D',(A2)+ 
00003332  4EB9 0000374A           3881      JSR     get_bit_9_11
00003338                          3882     
00003338  4DF8 1418               3883      LEA     numTable,A6
0000333C  C6FC 0008               3884      MULU    #8,D3
00003340  4EB6 3000               3885      JSR     (A6,D3)
00003344                          3886      
00003344  14FC 002C               3887      MOVE.B  #',',(A2)+
00003348  14FC 0044               3888      MOVE.B  #'D',(A2)+
0000334C  4EB9 00003740           3889      JSR get_bit_0_2
00003352                          3890      
00003352  4DF8 1418               3891      LEA     numTable,A6
00003356  C6FC 0008               3892      MULU    #8,D3
0000335A  4EB6 3000               3893      JSR     (A6,D3)
0000335E                          3894      
0000335E  6000 0476               3895      BRA     printCode
00003362                          3896      
00003362                          3897      
00003362                          3898  lslB_IN
00003362                          3899      
00003362  14FC 0020               3900      MOVE.B  #' ',(A2)+  ;print some spaces 
00003366  14FC 0020               3901      MOVE.B  #' ',(A2)+
0000336A  14FC 0020               3902      MOVE.B  #' ',(A2)+
0000336E  14FC 0020               3903      MOVE.B  #' ',(A2)+
00003372  14FC 004C               3904      MOVE.B  #'L',(A2)+  ;print L
00003376  14FC 0053               3905      MOVE.B  #'S',(A2)+  ;print S
0000337A  14FC 004C               3906      MOVE.B  #'L',(A2)+  ;print L
0000337E  14FC 002E               3907      MOVE.B  #'.',(A2)+  ;print .
00003382  14FC 0042               3908      MOVE.B  #'B',(A2)+  ;print 
00003386  14FC 0020               3909      MOVE.B  #' ',(A2)+  ;
0000338A  14FC 0020               3910      MOVE.B  #' ',(A2)+  ;print some spaces 
0000338E  14FC 0020               3911      MOVE.B  #' ',(A2)+
00003392  14FC 0023               3912      MOVE.B  #'#',(A2)+
00003396                          3913      
00003396  4EB9 0000374A           3914      JSR     get_bit_9_11
0000339C  B63C 0000               3915      CMP.B   #0,D3
000033A0  6600 038E               3916      BNE     shift_Not_8
000033A4  14FC 0038               3917      MOVE.B  #'8',(A2)+
000033A8  6000 0368               3918      BRA     shift_complete
000033AC                          3919  
000033AC                          3920  
000033AC                          3921  
000033AC                          3922  
000033AC                          3923  
000033AC                          3924  lslW_RN
000033AC                          3925      *LSL.B #,Dn
000033AC                          3926      
000033AC                          3927      
000033AC  14FC 0020               3928      MOVE.B  #' ',(A2)+  ;print some spaces 
000033B0  14FC 0020               3929      MOVE.B  #' ',(A2)+
000033B4  14FC 0020               3930      MOVE.B  #' ',(A2)+
000033B8  14FC 0020               3931      MOVE.B  #' ',(A2)+
000033BC  14FC 004C               3932      MOVE.B  #'L',(A2)+  ;print L
000033C0  14FC 0053               3933      MOVE.B  #'S',(A2)+  ;print S
000033C4  14FC 004C               3934      MOVE.B  #'L',(A2)+  ;print L
000033C8  14FC 002E               3935      MOVE.B  #'.',(A2)+  ;print .
000033CC  14FC 0057               3936      MOVE.B  #'W',(A2)+  ;print 
000033D0  14FC 0020               3937      MOVE.B  #' ',(A2)+  ;
000033D4  14FC 0020               3938      MOVE.B  #' ',(A2)+  ;print some spaces 
000033D8  14FC 0020               3939      MOVE.B  #' ',(A2)+
000033DC  14FC 0044               3940      MOVE.B  #'D',(A2)+ 
000033E0  4EB9 0000374A           3941      JSR     get_bit_9_11
000033E6                          3942     
000033E6  4DF8 1418               3943      LEA     numTable,A6
000033EA  C6FC 0008               3944      MULU    #8,D3
000033EE  4EB6 3000               3945      JSR     (A6,D3)
000033F2                          3946      
000033F2  14FC 002C               3947      MOVE.B  #',',(A2)+
000033F6  14FC 0044               3948      MOVE.B  #'D',(A2)+
000033FA  4EB9 00003740           3949      JSR get_bit_0_2
00003400                          3950      
00003400  4DF8 1418               3951      LEA     numTable,A6
00003404  C6FC 0008               3952      MULU    #8,D3
00003408  4EB6 3000               3953      JSR     (A6,D3)
0000340C                          3954      
0000340C  6000 03C8               3955      BRA     printCode
00003410                          3956      
00003410                          3957      
00003410                          3958  lslW_IN
00003410                          3959      
00003410  14FC 0020               3960      MOVE.B  #' ',(A2)+  ;print some spaces 
00003414  14FC 0020               3961      MOVE.B  #' ',(A2)+
00003418  14FC 0020               3962      MOVE.B  #' ',(A2)+
0000341C  14FC 0020               3963      MOVE.B  #' ',(A2)+
00003420  14FC 004C               3964      MOVE.B  #'L',(A2)+  ;print L
00003424  14FC 0053               3965      MOVE.B  #'S',(A2)+  ;print S
00003428  14FC 004C               3966      MOVE.B  #'L',(A2)+  ;print L
0000342C  14FC 002E               3967      MOVE.B  #'.',(A2)+  ;print .
00003430  14FC 0057               3968      MOVE.B  #'W',(A2)+  ;print 
00003434  14FC 0020               3969      MOVE.B  #' ',(A2)+  ;
00003438  14FC 0020               3970      MOVE.B  #' ',(A2)+  ;print some spaces 
0000343C  14FC 0020               3971      MOVE.B  #' ',(A2)+
00003440  14FC 0023               3972      MOVE.B  #'#',(A2)+
00003444                          3973      
00003444  4EB9 0000374A           3974      JSR     get_bit_9_11
0000344A  B63C 0000               3975      CMP.B   #0,D3
0000344E  6600 02E0               3976      BNE     shift_Not_8
00003452  14FC 0038               3977      MOVE.B  #'8',(A2)+
00003456  6000 02BA               3978      BRA     shift_complete
0000345A                          3979  
0000345A                          3980  
0000345A                          3981  
0000345A                          3982  
0000345A                          3983  
0000345A                          3984  lslL_RN
0000345A                          3985      *LSL.B #,Dn
0000345A                          3986      
0000345A                          3987      
0000345A  14FC 0020               3988      MOVE.B  #' ',(A2)+  ;print some spaces 
0000345E  14FC 0020               3989      MOVE.B  #' ',(A2)+
00003462  14FC 0020               3990      MOVE.B  #' ',(A2)+
00003466  14FC 0020               3991      MOVE.B  #' ',(A2)+
0000346A  14FC 004C               3992      MOVE.B  #'L',(A2)+  ;print L
0000346E  14FC 0053               3993      MOVE.B  #'S',(A2)+  ;print S
00003472  14FC 004C               3994      MOVE.B  #'L',(A2)+  ;print L
00003476  14FC 002E               3995      MOVE.B  #'.',(A2)+  ;print .
0000347A  14FC 004C               3996      MOVE.B  #'L',(A2)+  ;print 
0000347E  14FC 0020               3997      MOVE.B  #' ',(A2)+  ;
00003482  14FC 0020               3998      MOVE.B  #' ',(A2)+  ;print some spaces 
00003486  14FC 0020               3999      MOVE.B  #' ',(A2)+
0000348A  14FC 0044               4000      MOVE.B  #'D',(A2)+ 
0000348E  4EB9 0000374A           4001      JSR     get_bit_9_11
00003494                          4002     
00003494  4DF8 1418               4003      LEA     numTable,A6
00003498  C6FC 0008               4004      MULU    #8,D3
0000349C  4EB6 3000               4005      JSR     (A6,D3)
000034A0                          4006      
000034A0  14FC 002C               4007      MOVE.B  #',',(A2)+
000034A4  14FC 0044               4008      MOVE.B  #'D',(A2)+
000034A8  4EB9 00003740           4009      JSR get_bit_0_2
000034AE                          4010      
000034AE  4DF8 1418               4011      LEA     numTable,A6
000034B2  C6FC 0008               4012      MULU    #8,D3
000034B6  4EB6 3000               4013      JSR     (A6,D3)
000034BA                          4014      
000034BA  6000 031A               4015      BRA     printCode
000034BE                          4016      
000034BE                          4017      
000034BE                          4018  lslL_IN
000034BE                          4019      
000034BE  14FC 0020               4020      MOVE.B  #' ',(A2)+  ;print some spaces 
000034C2  14FC 0020               4021      MOVE.B  #' ',(A2)+
000034C6  14FC 0020               4022      MOVE.B  #' ',(A2)+
000034CA  14FC 0020               4023      MOVE.B  #' ',(A2)+
000034CE  14FC 004C               4024      MOVE.B  #'L',(A2)+  ;print L
000034D2  14FC 0053               4025      MOVE.B  #'S',(A2)+  ;print S
000034D6  14FC 004C               4026      MOVE.B  #'L',(A2)+  ;print L
000034DA  14FC 002E               4027      MOVE.B  #'.',(A2)+  ;print .
000034DE  14FC 004C               4028      MOVE.B  #'L',(A2)+  ;print 
000034E2  14FC 0020               4029      MOVE.B  #' ',(A2)+  ;
000034E6  14FC 0020               4030      MOVE.B  #' ',(A2)+  ;print some spaces 
000034EA  14FC 0020               4031      MOVE.B  #' ',(A2)+
000034EE  14FC 0023               4032      MOVE.B  #'#',(A2)+
000034F2                          4033      
000034F2  4EB9 0000374A           4034      JSR     get_bit_9_11
000034F8  B63C 0000               4035      CMP.B   #0,D3
000034FC  6600 0232               4036      BNE     shift_Not_8
00003500  14FC 0038               4037      MOVE.B  #'8',(A2)+
00003504  6000 020C               4038      BRA     shift_complete
00003508                          4039  
00003508                          4040  
00003508                          4041  
00003508                          4042  
00003508                          4043  lsrB_RN
00003508                          4044      
00003508  14FC 0020               4045      MOVE.B  #' ',(A2)+  ;print some spaces 
0000350C  14FC 0020               4046      MOVE.B  #' ',(A2)+
00003510  14FC 0020               4047      MOVE.B  #' ',(A2)+
00003514  14FC 0020               4048      MOVE.B  #' ',(A2)+
00003518  14FC 004C               4049      MOVE.B  #'L',(A2)+  ;print L
0000351C  14FC 0053               4050      MOVE.B  #'S',(A2)+  ;print S
00003520  14FC 0052               4051      MOVE.B  #'R',(A2)+  ;print R
00003524  14FC 002E               4052      MOVE.B  #'.',(A2)+  ;print .
00003528  14FC 0042               4053      MOVE.B  #'B',(A2)+  ;print B
0000352C  14FC 0020               4054      MOVE.B  #' ',(A2)+  ;
00003530  14FC 0020               4055      MOVE.B  #' ',(A2)+  ;print some spaces 
00003534  14FC 0020               4056      MOVE.B  #' ',(A2)+
00003538  14FC 0044               4057      MOVE.B  #'D',(A2)+ 
0000353C  4EB9 0000374A           4058      JSR     get_bit_9_11
00003542                          4059     
00003542  4DF8 1418               4060      LEA     numTable,A6
00003546  C6FC 0008               4061      MULU    #8,D3
0000354A  4EB6 3000               4062      JSR     (A6,D3)
0000354E                          4063      
0000354E  14FC 002C               4064      MOVE.B  #',',(A2)+
00003552  14FC 0044               4065      MOVE.B  #'D',(A2)+
00003556  4EB9 00003740           4066      JSR get_bit_0_2
0000355C                          4067      
0000355C  4DF8 1418               4068      LEA     numTable,A6
00003560  C6FC 0008               4069      MULU    #8,D3
00003564  4EB6 3000               4070      JSR     (A6,D3)
00003568                          4071      
00003568  6000 026C               4072      BRA     printCode
0000356C                          4073      
0000356C                          4074      
0000356C                          4075  lsrB_IN
0000356C                          4076      
0000356C  14FC 0020               4077      MOVE.B  #' ',(A2)+  ;print some spaces 
00003570  14FC 0020               4078      MOVE.B  #' ',(A2)+
00003574  14FC 0020               4079      MOVE.B  #' ',(A2)+
00003578  14FC 0020               4080      MOVE.B  #' ',(A2)+
0000357C  14FC 004C               4081      MOVE.B  #'L',(A2)+  ;print L
00003580  14FC 0053               4082      MOVE.B  #'S',(A2)+  ;print S
00003584  14FC 0052               4083      MOVE.B  #'R',(A2)+  ;print R
00003588  14FC 002E               4084      MOVE.B  #'.',(A2)+  ;print .
0000358C  14FC 0042               4085      MOVE.B  #'B',(A2)+  ;print B
00003590  14FC 0020               4086      MOVE.B  #' ',(A2)+  ;
00003594  14FC 0020               4087      MOVE.B  #' ',(A2)+  ;print some spaces 
00003598  14FC 0020               4088      MOVE.B  #' ',(A2)+
0000359C  14FC 0023               4089      MOVE.B  #'#',(A2)+
000035A0                          4090      
000035A0  4EB9 0000374A           4091      JSR     get_bit_9_11
000035A6  B63C 0000               4092      CMP.B   #0,D3
000035AA  6600 0184               4093      BNE     shift_Not_8
000035AE  14FC 0038               4094      MOVE.B  #'8',(A2)+
000035B2  6000 015E               4095      BRA     shift_complete
000035B6                          4096  
000035B6                          4097  
000035B6                          4098  
000035B6                          4099  lsrW_RN   
000035B6  14FC 0020               4100      MOVE.B  #' ',(A2)+  ;print some spaces 
000035BA  14FC 0020               4101      MOVE.B  #' ',(A2)+
000035BE  14FC 0020               4102      MOVE.B  #' ',(A2)+
000035C2  14FC 0020               4103      MOVE.B  #' ',(A2)+
000035C6  14FC 004C               4104      MOVE.B  #'L',(A2)+  ;print L
000035CA  14FC 0053               4105      MOVE.B  #'S',(A2)+  ;print S
000035CE  14FC 0052               4106      MOVE.B  #'R',(A2)+  ;print R
000035D2  14FC 002E               4107      MOVE.B  #'.',(A2)+  ;print .
000035D6  14FC 0057               4108      MOVE.B  #'W',(A2)+  ;print W
000035DA  14FC 0020               4109      MOVE.B  #' ',(A2)+  ;
000035DE  14FC 0020               4110      MOVE.B  #' ',(A2)+  ;print some spaces 
000035E2  14FC 0020               4111      MOVE.B  #' ',(A2)+
000035E6  14FC 0044               4112      MOVE.B  #'D',(A2)+ 
000035EA  4EB9 0000374A           4113      JSR     get_bit_9_11
000035F0                          4114     
000035F0  4DF8 1418               4115      LEA     numTable,A6
000035F4  C6FC 0008               4116      MULU    #8,D3
000035F8  4EB6 3000               4117      JSR     (A6,D3)
000035FC                          4118      
000035FC  14FC 002C               4119      MOVE.B  #',',(A2)+
00003600  14FC 0044               4120      MOVE.B  #'D',(A2)+
00003604  4EB9 00003740           4121      JSR get_bit_0_2
0000360A                          4122      
0000360A  4DF8 1418               4123      LEA     numTable,A6
0000360E  C6FC 0008               4124      MULU    #8,D3
00003612  4EB6 3000               4125      JSR     (A6,D3)
00003616                          4126      
00003616  6000 01BE               4127      BRA     printCode
0000361A                          4128      
0000361A                          4129      
0000361A                          4130  lsrW_IN
0000361A                          4131      
0000361A  14FC 0020               4132      MOVE.B  #' ',(A2)+  ;print some spaces 
0000361E  14FC 0020               4133      MOVE.B  #' ',(A2)+
00003622  14FC 0020               4134      MOVE.B  #' ',(A2)+
00003626  14FC 0020               4135      MOVE.B  #' ',(A2)+
0000362A  14FC 004C               4136      MOVE.B  #'L',(A2)+  ;print L
0000362E  14FC 0053               4137      MOVE.B  #'S',(A2)+  ;print S
00003632  14FC 0052               4138      MOVE.B  #'R',(A2)+  ;print R
00003636  14FC 002E               4139      MOVE.B  #'.',(A2)+  ;print .
0000363A  14FC 0057               4140      MOVE.B  #'W',(A2)+  ;print W
0000363E  14FC 0020               4141      MOVE.B  #' ',(A2)+  ;
00003642  14FC 0020               4142      MOVE.B  #' ',(A2)+  ;print some spaces 
00003646  14FC 0020               4143      MOVE.B  #' ',(A2)+
0000364A  14FC 0023               4144      MOVE.B  #'#',(A2)+
0000364E                          4145      
0000364E  4EB9 0000374A           4146      JSR     get_bit_9_11
00003654  B63C 0000               4147      CMP.B   #0,D3
00003658  6600 00D6               4148      BNE     shift_Not_8
0000365C  14FC 0038               4149      MOVE.B  #'8',(A2)+
00003660  6000 00B0               4150      BRA     shift_complete
00003664                          4151  
00003664                          4152  
00003664                          4153  lsrL_RN
00003664                          4154      
00003664  14FC 0020               4155      MOVE.B  #' ',(A2)+  ;print some spaces 
00003668  14FC 0020               4156      MOVE.B  #' ',(A2)+
0000366C  14FC 0020               4157      MOVE.B  #' ',(A2)+
00003670  14FC 0020               4158      MOVE.B  #' ',(A2)+
00003674  14FC 004C               4159      MOVE.B  #'L',(A2)+  ;print L
00003678  14FC 0053               4160      MOVE.B  #'S',(A2)+  ;print S
0000367C  14FC 0052               4161      MOVE.B  #'R',(A2)+  ;print R
00003680  14FC 002E               4162      MOVE.B  #'.',(A2)+  ;print .
00003684  14FC 004C               4163      MOVE.B  #'L',(A2)+  ;print L
00003688  14FC 0020               4164      MOVE.B  #' ',(A2)+  ;
0000368C  14FC 0020               4165      MOVE.B  #' ',(A2)+  ;print some spaces 
00003690  14FC 0020               4166      MOVE.B  #' ',(A2)+
00003694  14FC 0044               4167      MOVE.B  #'D',(A2)+ 
00003698  4EB9 0000374A           4168      JSR     get_bit_9_11
0000369E                          4169     
0000369E  4DF8 1418               4170      LEA     numTable,A6
000036A2  C6FC 0008               4171      MULU    #8,D3
000036A6  4EB6 3000               4172      JSR     (A6,D3)
000036AA                          4173      
000036AA  14FC 002C               4174      MOVE.B  #',',(A2)+
000036AE  14FC 0044               4175      MOVE.B  #'D',(A2)+
000036B2  4EB9 00003740           4176      JSR get_bit_0_2
000036B8                          4177      
000036B8  4DF8 1418               4178      LEA     numTable,A6
000036BC  C6FC 0008               4179      MULU    #8,D3
000036C0  4EB6 3000               4180      JSR     (A6,D3)
000036C4                          4181      
000036C4  6000 0110               4182      BRA     printCode
000036C8                          4183      
000036C8                          4184      
000036C8                          4185  lsrL_IN
000036C8                          4186      
000036C8  14FC 0020               4187      MOVE.B  #' ',(A2)+  ;print some spaces 
000036CC  14FC 0020               4188      MOVE.B  #' ',(A2)+
000036D0  14FC 0020               4189      MOVE.B  #' ',(A2)+
000036D4  14FC 0020               4190      MOVE.B  #' ',(A2)+
000036D8  14FC 004C               4191      MOVE.B  #'L',(A2)+  ;print L
000036DC  14FC 0053               4192      MOVE.B  #'S',(A2)+  ;print S
000036E0  14FC 0052               4193      MOVE.B  #'R',(A2)+  ;print R
000036E4  14FC 002E               4194      MOVE.B  #'.',(A2)+  ;print .
000036E8  14FC 004C               4195      MOVE.B  #'L',(A2)+  ;print L
000036EC  14FC 0020               4196      MOVE.B  #' ',(A2)+  ;
000036F0  14FC 0020               4197      MOVE.B  #' ',(A2)+  ;print some spaces 
000036F4  14FC 0020               4198      MOVE.B  #' ',(A2)+
000036F8  14FC 0023               4199      MOVE.B  #'#',(A2)+
000036FC                          4200      
000036FC  4EB9 0000374A           4201      JSR     get_bit_9_11
00003702  B63C 0000               4202      CMP.B   #0,D3
00003706  6600 0028               4203      BNE     shift_Not_8
0000370A  14FC 0038               4204      MOVE.B  #'8',(A2)+
0000370E  6000 0002               4205      BRA     shift_complete
00003712                          4206  
00003712                          4207  
00003712                          4208  
00003712                          4209  
00003712                          4210  
00003712                          4211  
00003712                          4212  
00003712                          4213  
00003712                          4214      *------------------HELPER FUNCTIONS*********************
00003712                          4215  shift_complete
00003712  14FC 002C               4216      MOVE.B  #',',(A2)+
00003716  14FC 0044               4217      MOVE.B  #'D',(A2)+
0000371A  4EB9 00003740           4218      JSR get_bit_0_2
00003720  4DF8 1418               4219      LEA numTable,A6
00003724  C6FC 0008               4220      MULU    #8,D3
00003728  4EB6 3000               4221      JSR     (A6,D3)
0000372C  6000 00A8               4222      BRA     printCode
00003730                          4223      
00003730                          4224  shift_Not_8
00003730  C6FC 0008               4225      MULU.W  #8,D3
00003734  4DF8 1418               4226      LEA numTable,A6
00003738  4EB6 3000               4227      JSR     (A6,D3)
0000373C  4EB8 3712               4228      JSR     shift_complete
00003740                          4229      
00003740                          4230  get_bit_0_2
00003740  4243                    4231      CLR     D3
00003742  1606                    4232      MOVE.B  D6,D3
00003744                          4233      ;AND.W   #$0F,D3
00003744  EB0B                    4234      LSL.B   #5,D3
00003746  EA0B                    4235      LSR.B   #5,D3
00003748  4E75                    4236      RTS
0000374A                          4237      
0000374A                          4238  get_bit_9_11
0000374A  3606                    4239      MOVE.W  D6,D3
0000374C  C67C 0F00               4240      AND.W   #$0F00,D3
00003750  E04B                    4241      LSR.W   #8,D3
00003752  E24B                    4242      LSR.W   #1,D3
00003754  4E75                    4243      RTS
00003756                          4244      
00003756                          4245  get_shift_normal:
00003756                          4246      *-get OPCODE
00003756  4243                    4247      CLR D3
00003758  3606                    4248      MOVE.W  D6,D3
0000375A  E64B                    4249      LSR.W   #3,D3 *-get bits 3 and 4 
0000375C  C67C 00FF               4250      AND.W   #$00FF,D3
00003760  E50B                    4251      LSL.B   #2,D3
00003762  E40B                    4252      LSR.B   #2,D3
00003764  4E75                    4253      RTS
00003766                          4254  
00003766                          4255  get_shift_size:
00003766                          4256  
00003766  4283                    4257      CLR.L   D3
00003768  3606                    4258      MOVE.W  D6,D3
0000376A                          4259      *-clear MSB and LSB
0000376A  C67C 0FF0               4260      AND.W   #$0FF0,D3
0000376E  EC4B                    4261      LSR.W   #6,D3
00003770  4E75                    4262      RTS         *-got the bit 6 and 7
00003772                          4263  
00003772                          4264  -------------------- end include --------------------
00003772                          4265              
00003772                          4266              
00003772                          4267  
00003772                          4268  
00003772                          4269  
00003772                          4270  
00003772                          4271  
00003772                          4272  
00003772                          4273  
00003772                          4274              
00003772                          4275             
00003772                          4276  
00003772                          4277              
00003772                          4278  opError                             
00003772  2608                    4279              MOVE.L  A0,D3
00003774  2C03                    4280              MOVE.L  D3,D6
00003776  45F9 00003994           4281              LEA     bad_code_buffer,A2
0000377C  7E02                    4282              MOVE.L  #2,D7
0000377E  4EB8 10E8               4283              JSR     write_data_in_D3_to_buffer
00003782                          4284              
00003782  14FC 0020               4285              MOVE.B  #' ',(A2)+      ;print spaces
00003786  14FC 0020               4286              MOVE.B  #' ',(A2)+      ;print spaces
0000378A  14FC 0020               4287              MOVE.B  #' ',(A2)+      ;print spaces
0000378E  14FC 0020               4288              MOVE.B  #' ',(A2)+      ;print spaces
00003792  14FC 0044               4289              MOVE.B  #'D',(A2)+      ;print D
00003796  14FC 0041               4290              MOVE.B  #'A',(A2)+      ;print A
0000379A  14FC 0054               4291              MOVE.B  #'T',(A2)+      ;print T
0000379E  14FC 0041               4292              MOVE.B  #'A',(A2)+      ;print A
000037A2  14FC 0020               4293              MOVE.B  #' ',(A2)+      ;print spaces
000037A6  14FC 0020               4294              MOVE.B  #' ',(A2)+      ;print spaces
000037AA  14FC 0020               4295              MOVE.B  #' ',(A2)+      ;print spaces
000037AE  14FC 0020               4296              MOVE.B  #' ',(A2)+      ;print spaces
000037B2                          4297              
000037B2                          4298              
000037B2  14FC 0046               4299              MOVE.B  #'F',(A2)+      ;print spaces
000037B6  14FC 0046               4300              MOVE.B  #'F',(A2)+      ;print spaces
000037BA  14FC 0046               4301              MOVE.B  #'F',(A2)+      ;print spaces
000037BE  14FC 0046               4302              MOVE.B  #'F',(A2)+      ;print spaces
000037C2                          4303              
000037C2                          4304              
000037C2                          4305              ;MOVE.L  (A0),D3
000037C2                          4306              ;MOVE.L  D3,D6
000037C2                          4307              ;MOVE.L  #1,D7
000037C2                          4308              ;JSR     write_data_in_D3_to_buffer
000037C2                          4309              
000037C2  14BC 0000               4310              MOVE.B  #$00,(A2) * add NULL value to print string
000037C6  43F9 00003994           4311              LEA     bad_code_buffer,A1
000037CC  103C 000D               4312              MOVE.B  #13,D0
000037D0  4E4F                    4313              TRAP    #15   
000037D2                          4314           
000037D2  6000 D8D2               4315              BRA     get_next_instruction           
000037D6                          4316  printCode   
000037D6  14BC 0000               4317              MOVE.B  #$00,(A2)   * add NULL value to print string
000037DA  070A 0000               4318              MOVEP   (A2),D3
000037DE  43F9 0000393C           4319              LEA     good_code_buffer,A1 * load buffer for good code to print
000037E4  700D                    4320              MOVEQ   #13,D0
000037E6  4E4F                    4321              TRAP    #15         * display code
000037E8                          4322    
000037E8  6000 D8BC               4323              BRA     get_next_instruction                     
000037EC                          4324  * OP Codes -------------------------------------------------
000037EC  =00000000               4325  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
000037EC  =00000001               4326  bin0001     EQU     %0001   ;MOVE.B
000037EC  =00000002               4327  bin0010     EQU     %0010   ;MOVE.L
000037EC  =00000003               4328  bin0011     EQU     %0011   ;MOVE.W
000037EC  =00000004               4329  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
000037EC  =00000005               4330  bin0101     EQU     %0101   ;SUBQ
000037EC  =00000006               4331  bin0110     EQU     %0110   ;Bcc
000037EC  =00000007               4332  bin0111     EQU     %0111   ;MOVEQ
000037EC  =00000008               4333  bin1000     EQU     %1000   ;DIVU.W
000037EC  =00000009               4334  bin1001     EQU     %1001   ;SUB, SUBA
000037EC  =0000000B               4335  bin1011     EQU     %1011   ;CMP, CMPA, EOR
000037EC  =0000000C               4336  bin1100     EQU     %1100   ;AND, MULS.W
000037EC  =0000000D               4337  bin1101     EQU     %1101   ;ADD, ADDA
000037EC  =0000000E               4338  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
000037EC                          4339  
000037EC                          4340  *Binary HEX values*---------------------------------------------------------------
000037EC  =00000000               4341  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
000037EC  =00000001               4342  hex_1   EQU     %0001 ;1
000037EC  =00000002               4343  hex_2   EQU     %0010 ;2    
000037EC  =00000003               4344  hex_3   EQU     %0011 ;3
000037EC  =00000004               4345  hex_4   EQU     %0100 ;4
000037EC  =00000005               4346  hex_5   EQU     %0101 ;5
000037EC  =00000006               4347  hex_6   EQU     %0110 ;6
000037EC  =00000007               4348  hex_7   EQU     %0111 ;7
000037EC  =00000008               4349  hex_8   EQU     %1000 ;8
000037EC  =00000009               4350  hex_9   EQU     %1001 ;9
000037EC  =0000000A               4351  hex_A   EQU     %1010 ;A
000037EC  =0000000B               4352  hex_B   EQU     %1011 ;B
000037EC  =0000000C               4353  hex_C   EQU     %1100 ;C
000037EC  =0000000D               4354  hex_D   EQU     %1101 ;D
000037EC  =0000000E               4355  hex_E   EQU     %1110 ;E
000037EC  =0000000F               4356  hex_F   EQU     %1111 ;F      
000037EC                          4357              
000037EC                          4358  ;LOOP:
000037EC                          4359                  *-compare the adress pointers current address with ending address to see if we need to continue
000037EC                          4360                  *- load the address registrer (pointer/ this helps us look at data)
000037EC                          4361                  *-load address register number into data register
000037EC                          4362                  
000037EC                          4363                  ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
000037EC                          4364                  ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
000037EC                          4365                  ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
000037EC                          4366                  ;CMP.L   d2,d3       ;if the current poiinter is the same as 
000037EC                          4367                  ;BEQ     FINISH      ;finish they are equal
000037EC                          4368                  ;RTS
000037EC                          4369  
000037EC                          4370          
000037EC                          4371          *----------END OF I/O SECTION*---
000037EC                          4372          
000037EC                          4373  FINISH:
000037EC                          4374          *INCLUDE 'opcode_subroutine.x68'
000037EC  2608                    4375              MOVE.L  A0,D3
000037EE  2C03                    4376              MOVE.L  D3,D6
000037F0  45F9 0000393C           4377              LEA     good_code_buffer,A2
000037F6                          4378   
000037F6                          4379              
000037F6  14FC 0046               4380              MOVE.B  #'F',(A2)+      ;print spaces
000037FA  14FC 0049               4381              MOVE.B  #'I',(A2)+      ;print spaces
000037FE  14FC 0049               4382              MOVE.B  #'I',(A2)+      ;print spaces
00003802  14FC 004E               4383              MOVE.B  #'N',(A2)+      ;print spaces
00003806  14FC 0049               4384              MOVE.B  #'I',(A2)+      ;print D
0000380A  14FC 0053               4385              MOVE.B  #'S',(A2)+      ;print A
0000380E  14FC 0048               4386              MOVE.B  #'H',(A2)+      ;print T
00003812  14FC 0041               4387              MOVE.B  #'A',(A2)+      ;print A
00003816  14FC 0041               4388              MOVE.B  #'A',(A2)+      ;print spaces
0000381A  14FC 0041               4389              MOVE.B  #'A',(A2)+      ;print spaces
0000381E  14FC 0048               4390              MOVE.B  #'H',(A2)+      ;print spaces
00003822  14FC 0041               4391              MOVE.B  #'A',(A2)+      ;print spaces
00003826  14FC 0052               4392              MOVE.B  #'R',(A2)+
0000382A  2610                    4393              MOVE.L  (A0),D3
0000382C  2C03                    4394              MOVE.L  D3,D6
0000382E  7E01                    4395              MOVE.L  #1,D7
00003830                          4396  
00003830                          4397              
00003830  14BC 0000               4398              MOVE.B  #$00,(A2) * add NULL value to print string
00003834  43F9 0000393C           4399              LEA     good_code_buffer,A1
0000383A  103C 000D               4400              MOVE.B  #13,D0
0000383E  4E4F                    4401              TRAP    #15   
00003840  FFFF FFFF               4402              SIMHALT
00003844                          4403  
00003844                          4404  *-390 -> 406 WITH NOP AT 400
00003844                          4405  
00003844                          4406  
00003844                          4407  hexToAscii:
00003844                          4408  ones:
00003844  3A02                    4409      MOVE.W  D2,D5
00003846  CAFC 0008               4410      MULU    #8,D5       value adjusted for jumping
0000384A  4FF8 1418               4411      LEA     numTable ,A7 Load the table into A7
0000384E  4EB7 5000               4412      JSR     (A7,D5)     Jump to subroutine of value at D1 
00003852                          4413      *-adding res
00003852                          4414      ;ADD     D2,D7
00003852                          4415      
00003852                          4416  
00003852  4E75                    4417      RTS
00003854                          4418  
00003854                          4419  
00003854                          4420  
00003854                          4421  
00003854                          4422  
00003854                          4423  
00003854                          4424  
00003854                          4425  
00003854                          4426  
00003854                          4427  
00003854                          4428  
00003854                          4429  
00003854                          4430  
00003854                          4431  *-Parses input - take input from user to create a memory address
00003854                          4432  *- entry is parsed to make sure it falls within a valid range
00003854                          4433  *-good inputs are converteed to hex
00003854                          4434  *-the entered addres get's stored in d3
00003854                          4435  *-
00003854                          4436  *-
00003854                          4437  
00003854                          4438  
00003854                          4439  
00003854  7C00                    4440  parse_input     MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
00003856  7A00                    4441                  MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00003858                          4442                  
00003858                          4443                  *-CHECK TO SEE INPUT DATA
00003858  B205                    4444                  CMP.B   D5,D1   D5 IS 0
0000385A  6700 0086               4445                  BEQ     error_no_input no input was found
0000385E  0C41 0008               4446                  CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
00003862  6E00 0090               4447                  BGT     error_bad_entry
00003866                          4448                  ;BGT     error_inv_to_many_char
00003866  6000 0018               4449                  BRA     parse_each
0000386A                          4450  
0000386A  7C00                    4451  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
0000386C  7A00                    4452                  MOVEQ   #$0,D5  CLEARS D5
0000386E  B205                    4453                  CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00003870  6700 0070               4454                  BEQ     error_no_input
00003874  0C41 0008               4455                  CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00003878  6E00 007A               4456                  BGT     error_bad_entry
0000387C                          4457                  ;BGT     error_to_many_char
0000387C  6000 0002               4458                  BRA     parse_each        
00003880                          4459  
00003880                          4460  *parse each analyzes each ind character entered
00003880                          4461  *in ASCII table lower case 'f' is tyhe highest character code (102)
00003880                          4462  
00003880  1419                    4463  parse_each      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
00003882  B405                    4464                  CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
00003884  6700 0058               4465                  BEQ     parse_complete  end of user input
00003888  B43C 0066               4466                  CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
0000388C  6E00 0012               4467                  BGT     hex_compare
00003890                          4468                  
00003890                          4469                  *-
00003890                          4470                  *Comapare the decimal number values betyween 0 -9 first
00003890                          4471                  *
00003890                          4472                  *-
00003890  B43C 002F               4473  dec_compare     CMP.B   #47,D2      if its lower than 47 that means its invalid character
00003894                          4474                                      *-for decimal values between [47, 57] are valid
00003894  6F00 0056               4475                  BLE     error_char 
00003898  B43C 003A               4476                  CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
0000389C  6D00 0022               4477                  BLT     dec_convert
000038A0                          4478                  *-
000038A0                          4479                  *there are no number values, lets check alpha characters
000038A0                          4480                  *->IF the value is not less than 65 which is 'A' and the value is NO more than
000038A0                          4481                  *->71 'G' then we should go and convert to hex range A-F
000038A0                          4482                  *-UPPER case
000038A0                          4483                  *-      
000038A0  B43C 0041               4484  hex_compare     CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
000038A4  6D00 0046               4485                  BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
000038A8  B43C 0047               4486                  CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
000038AC  6D00 001C               4487                  BLT     upper_ascii VALUE FELL IN RANGE A-F                 
000038B0  B43C 0061               4488  low_hex_compare CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
000038B4  6D00 0036               4489                  BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
000038B8  B43C 0067               4490                  CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
000038BC  6D00 0016               4491                  BLT     lower_ascii
000038C0                          4492                  
000038C0                          4493           
000038C0  0402 0030               4494  dec_convert     SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
000038C4                          4495                  *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
000038C4  E986                    4496                  ASL.L   #4,D6
000038C6  DC02                    4497                  ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
000038C8  60B6                    4498                  BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
000038CA                          4499                                      *- 97 - 103
000038CA                          4500                  
000038CA                          4501                              
000038CA                          4502  *- ASCII conversions UPPER case to hex value by substracting 55
000038CA                          4503  
000038CA  0402 0037               4504  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
000038CE  E986                    4505                  ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
000038D0  DC02                    4506                  ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
000038D2  60AC                    4507                  BRA     parse_each  parse next item
000038D4                          4508  *-ASCI lower case to hex value by subtracting 87
000038D4  0402 0057               4509  lower_ascii     SUBI.B  #87,D2
000038D8  E986                    4510                  ASL.L   #4,D6
000038DA  DC02                    4511                  ADD.B   D2,D6
000038DC  60A2                    4512                  BRA     parse_each
000038DE                          4513  
000038DE  7801                    4514  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
000038E0  4E75                    4515                  RTS             JUMP FROM SUBROUTINE                
000038E2  43F9 000039B2           4516  error_no_input  LEA no_entry,A1 load bad entry statment
000038E8  7001                    4517                  MOVE.L  #1,D0
000038EA  4E4F                    4518                  TRAP    #15
000038EC                          4519                  ;JMP     get_input
000038EC  43F9 000039DA           4520  error_char      LEA bad_char,A1
000038F2  4E4F                    4521                  trap #15
000038F4                          4522                  ;JMP get_input0
000038F4  43F9 000039C5           4523  error_bad_entry LEA bad_entry,A1
000038FA  4E4F                    4524                  TRAP #15
000038FC                          4525                  ;JMP  get_input
000038FC                          4526  
000038FC                          4527  
000038FC  FFFF FFFF               4528      SIMHALT             ; halt simulator
00003900                          4529  
00003900                          4530  * Put variables and constants here
00003900= 48 65 6C 6C 6F 20 ...   4531  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
0000393C                          4532  
0000393C                          4533  
0000393C                          4534  good_code_buffer    DS.B    88
00003994                          4535  
00003994                          4536  bad_code_buffer     DS.B    30
000039B2= 4E 6F 20 45 6E 74 ...   4537  no_entry    DC.B    'No Entry detected.',0
000039C5= 42 61 64 20 45 6E ...   4538  bad_entry   DC.B    'Bad Entry Dectected.',0
000039DA= 42 61 64 20 43 68 ...   4539  bad_char    DC.B    'Bad Char detected.',0
000039ED                          4540  *-errors
000039ED                          4541  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
000039ED= 45 6E 74 65 72 20 ...   4542  enter_start_AD  DC.B    'Enter a starting address: ',0
00003A08                          4543  userStartAddrInput  DS.B    50  address used to store the data input from user
00003A3A                          4544  userEndAddrInput    DS.B    50  address used to stoer the data input from user
00003A6C                          4545  
00003A6C= 45 6E 74 65 72 20 ...   4546  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00003AA1                          4547  
00003AA1                          4548  userEndInput    DS.B    50  addresse used to store the data input from user
00003AD4  43F8 39B2               4549  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
00003AD8  7001                    4550                          MOVE.L  #1,D0
00003ADA  4E4F                    4551                          TRAP    #15
00003ADC                          4552                          ;JMP     get_input
00003ADC                          4553  
00003ADC                          4554  *-i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
00003ADC                          4555  
00003ADC                          4556      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_L              1E7A
ADDA_W              1E3E
ADDD_8              2BD0
ADDI_B              25DE
ADDI_L              26CE
ADDI_W              2656
ADDQ_B              28E8
ADDQ_L              29E0
ADDQ_W              2964
ADDRESSCOUNT        1094
ADD_B               1CEE
ADD_B_EA            1D96
ADD_L               1D3E
ADD_L_EA            1DE6
ADD_W               1D16
ADD_W_EA            1DBE
ASRB_IN             3158
ASRB_RN             30F4
ASRL_IN             32B4
ASRL_RN             3250
ASRW_IN             3206
ASRW_RN             31A2
BAD_CHAR            39DA
BAD_CODE_BUFFER     3994
BAD_ENTRY           39C5
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CR                  D
DECOD1000_DN        2422
DECODE0000          28A4
DECODE0010          1C22
DECODE0011          1B1E
DECODE1000_EA       2412
DECODEADDA          1EB6
DECODEMOVEM         16B2
DEC_COMPARE         3890
DEC_CONVERT         38C0
DESDECODE0001       1A84
DESDECODE0010       1C5A
DESDECODE0011       1B56
DESDECODE1101       1EC6
DESDECODELEA        17EA
DISPLACEMENTDECODE  1982
DIVU_W              2384
DNEADECODEADD       1E0E
EADECODE1000_DN     24D8
EADECODE1000_EA     24EE
EADNDECODEADD       1D66
EAIMMAB1000_DN      2502
EAIMMAB1000_DN_JUMP  2512
EASIZEADJUST1000_DN  251E
ENTER_START_AD      39ED
ERROR_BAD_ENTRY     38F4
ERROR_CHAR          38EC
ERROR_INV_TO_MANY_CHAR  3AD4
ERROR_NO_INPUT      38E2
FINISH              37EC
FOUNDSMALLAN        1730
FOUNDSMALLDN        16F8
GET_0TO2_BIT        14F8
GET_3TO5_BIT        1510
GET_6TO8_BIT        152A
GET_9TO11_BIT       1544
GET_BIT_0_2         3740
GET_BIT_9_11        374A
GET_BIT_9_11_ADDQ   2BD4
GET_NEXT_INSTRUCTION  10A6
GET_SHIFT_NORMAL    3756
GET_SHIFT_SIZE      3766
GOOD_CODE_BUFFER    393C
HEXTOASCII          3844
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         38A0
HEX_D               D
HEX_E               E
HEX_F               F
IA000               11A0
IA001               1206
IA010               1180
IA011               118C
IA100               12CA
IMMAB0001           1A94
IMMAB0010           1C8E
IMMAB0011           1B8A
IMMAB1000_DN        243C
IMMAB1000_DN_JUMP   244C
IMMAB1101           1EE0
IMMABJSR            1850
IMMABLEA            1860
IMMABTABLE          1158
IMMLONG             1CA4
JUMPIMMAB0010       1C96
LF                  A
LOOPSMALLAN         171C
LOOPSMALLDN         16E4
LOWER_ASCII         38D4
LOW_HEX_COMPARE     38B0
LSLB_IN             3362
LSLB_RN             32FE
LSLL_IN             34BE
LSLL_RN             345A
LSLW_IN             3410
LSLW_RN             33AC
LSRB_IN             356C
LSRB_RN             3508
LSRL_IN             36C8
LSRL_RN             3664
LSRW_IN             361A
LSRW_RN             35B6
M0000               133A
M0001               1346
M0010               1352
M0011               1366
M0100               137E
M0101               1396
M0110               1398
M0111               139A
MAINLOOP            1036
MODETABLE           12FA
MOVEA_L             1BF0
MOVEA_W             1AEC
MOVEINTPOINTERLONG  119C
MOVEINTPOINTERWORD  1198
MOVEINTPOINTERWORD0011  1BA0
MOVEINTPOINTERWORD1101  1EF6
MOVEM_W             16AA
MOVE_L              1BBE
MOVE_W              1ABA
MTOR                1746
N0000               1498
N0001               149E
N0010               14A4
N0011               14AA
N0100               14B0
N0101               14B6
N0110               14BC
N0111               14C2
N1000               14C8
N1001               14CE
N1010               14D4
N1011               14DA
N1100               14E0
N1101               14E6
N1110               14EC
N1111               14F2
NO_ENTRY            39B2
NUMTABLE            1418
ONES                3844
OP0000              25A2
OP0001              1A42
OP0010              1BA6
OP0011              1AA2
OP0100              1630
OP0101              28B4
OP0110              1870
OP0111              2522
OP1000              230E
OP1001              1EFC
OP1101              1CAA
OP1110              2BE4
OPERROR             3772
OR_B                235A
OR_B_EA             245A
OR_L                23E8
OR_L_EA             24AE
OR_W                23BE
OR_W_EA             2484
PARSE_COMPLETE      38DE
PARSE_EACH          3880
PARSE_END           386A
PARSE_INPUT         3854
PRINTCODE           37D6
PRINTLIST           1758
PRINT_ADDRESS       19EA
PRINT_LONG          155C
PRINT_WORD          10FE
REGISTERPRINT       139C
REGNUMTABLE         13A8
RN0000              13E8
RN0001              13EE
RN0010              13F4
RN0011              13FA
RN0100              1400
RN0101              1406
RN0110              140C
RN0111              1412
ROLB_IN             2F4E
ROLB_RN             2EEA
ROLL_IN             30AA
ROLL_RN             3046
ROLW_IN             2FFC
ROLW_RN             2F98
RORB_IN             2D44
RORB_RN             2CE0
RORL_IN             2EA0
RORL_RN             2E3C
RORW_IN             2D8E
RORW_RN             2DD8
RTOM                16DC
SHIFT_COMPLETE      3712
SHIFT_NOT_8         3730
SIZEADJUST1000_DN   2456
START               1000
STARTLOC            7000
SUBA_L              2104
SUBA_W              2082
SUBI_B_             2746
SUBI_L_             2832
SUBI_W_             27BC
SUBQ_B              2A5C
SUBQ_L              2B54
SUBQ_W              2AD8
SUB_B               1F08
SUB_B_EA            2186
SUB_L               2004
SUB_L_EA            2296
SUB_W               1F86
SUB_W_EA            2216
UPPER_ASCII         38CA
USEREND             3A6C
USERENDADDRINPUT    3A3A
USERENDINPUT        3AA1
USERSTARTADDRINPUT  3A08
WELCOME_MESSAGE     3900
WORDORLONG          1618
WRITE_DATA_IN_D3_TO_BUFFER  10E8
_16_BITD            19AE
_32_BITD            19D0
_BCC                18D4
_BGE                1948
_BLT                190E
_BRA                189A
_JSR                180A
_LEA                17A8
_NOP                175C
_RTS                1782
