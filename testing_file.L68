00000996 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 11:59:53 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000996                             7      ORG    $996
00000996                             8  
00000996                             9  *------
00000996                            10  *Test memory address between 996 and 9CF
00000996                            11  *
00000996                            12  *
00000996                            13  *----
00000996                            14  START:                  ; first instruction of program
00000996                            15      
00000996                            16  * Put program code here
00000996                            17  *----------------------------------------------------------
00000996                            18  * Testing: MOVE.B
00000996                            19  *----------------------------------------------------------
00000996                            20  * Direct Addressing
00000996                            21  *----------------------------------------------------------
00000996                            22  *    MOVE.B  D0,D1       ; Testing Dn
00000996                            23  *    MOVE.B  D0,D2       ; Testing Dn
00000996                            24  **   MOVE.B  A0,D1       ; Testing An
00000996                            25  *----------------------------------------------------------
00000996                            26  * Indriect Addressing
00000996                            27  *----------------------------------------------------------
00000996                            28  *    MOVE.B  (A1),D7     ; Testing  (An)
00000996                            29  *    MOVE.B  (A2),D7     ; Testing  (An)
00000996                            30  *    MOVE.B  (A3),D7     ; Testing  (An)
00000996                            31  *    MOVE.B  (A4),D7     ; Testing  (An)
00000996                            32  *----------------------------------------------------------
00000996                            33  * Indriect Addressing with Post Increment 
00000996                            34  *----------------------------------------------------------
00000996                            35  *    MOVE.B  (A7)+,D3     ; Testing  (An)+
00000996                            36  *    MOVE.B  (A6)+,D5     ; Testing  (An)+
00000996                            37  *----------------------------------------------------------
00000996                            38  * Indriect Addressing with Pre Decrement
00000996                            39  *----------------------------------------------------------
00000996                            40  *    MOVE.B  -(A5),D4     ; Testing  -(An)
00000996                            41  *    MOVE.B  -(A5),D4     ; Testing  -(An)
00000996                            42  *----------------------------------------------------------
00000996                            43  * Immediate Data
00000996                            44  *----------------------------------------------------------
00000996                            45      *MOVE.B  #34,D4 
00000996                            46  *     MOVE.B  #99,D5        
00000996                            47  *----------------------------------------------------------
00000996                            48  * Absolute Addressing - Word
00000996                            49  *----------------------------------------------------------
00000996                            50      * MOVE.B  $4214,D5
00000996                            51  *----------------------------------------------------------
00000996                            52  * Absolute Addressing - Long
00000996                            53  *----------------------------------------------------------
00000996                            54      * MOVE.B   $A000,D5
00000996                            55  *----------------------------------------------------------
00000996                            56  * end of MOVE.B
00000996                            57  *----------------------------------------------------------
00000996                            58  *-------------------------------------
00000996                            59  *   ADD
00000996                            60  *------------------------
00000996                            61  *    ADDA.L  D5,A5
00000996                            62  *    ADDA.W  D2,A7
00000996                            63  **    
00000996                            64  *    MOVE.B  #34,D5
00000996                            65  *    MOVE.B  D6,D7           
00000996                            66  *    ADDA.W  #34,A5
00000996                            67  *    MOVE.B  #$22,D5
00000996                            68       ;ADD     #$5,D5 ;ADDQ
00000996                            69      
00000996                            70      ;MOVE.B   #$22,D5
00000996                            71  ;    ADD.B   D6,D5
00000996                            72  *- BROken below, the buffer (A3) will not print the regnum 7, not sure why
00000996                            73  ;    ADD.W   A5,D6
00000996                            74  ; why does it print out wrong if i print multiple opcodes 
00000996                            75   
00000996                            76  *    ADD.L   D7,D4
00000996                            77  *    
00000996                            78  ;ISSUE (A3)/(A2) does not correctly print to the console if there are more than 1 OPCODE
00000996                            79  *    ADD.W   D6,D2
00000996                            80  *    ADD.L   D7,D1    
00000996                            81  *    
00000996                            82  *    ADD.W   D2,(A2)+
00000996                            83  
00000996                            84  
00000996                            85  
00000996  DB9C                      86      ADD.L   D5,(A4)+
00000998                            87  
00000998  9C02                      88      SUB.B   D2,D6
0000099A  9446                      89      SUB.W   D6,D2
0000099C                            90  
0000099C                            91  
0000099C                            92  
0000099C                            93  
0000099C                            94  
0000099C                            95  
0000099C                            96  
0000099C                            97  
0000099C                            98  
0000099C                            99  
0000099C                           100  
0000099C                           101  
0000099C                           102  
0000099C                           103  
0000099C                           104  
0000099C                           105  *-***********************************************************
0000099C                           106      
0000099C                           107      ;LEA     MESSAGE1,A1 *Loads message into address register A1
0000099C                           108      ;MOVE.B  #14,D0      *Moves number 14 into data regiter D0
0000099C                           109      ;TRAP    #15         *Displays Message
0000099C                           110     
0000099C                           111      ;LEA     inputbuffer,A1   ; Where to store input string
0000099C                           112      ;MOVE.B  #2,D0       ; from keyboard to store into input buffer Read string
0000099C                           113      ;TRAP    #15         ;execute the task
0000099C                           114  
0000099C                           115  
0000099C                           116      ;LEA test_buffer,A1  ;LOAD THE LOCATION where THIS STRING WILL BE PUT INTO
0000099C                           117      ; MOVE.B  #' ',(A1)+  ENTER space
0000099C                           118      ;MOVE.B  #' ',(A1)+  ENTER space
0000099C                           119      ;MOVE.B  #'D',(A1)+  load D
0000099C                           120      ;MOVE.B  #'A',(A1)+  load A
0000099C                           121      ;MOVE.B  #'N',(A1)+  Load N
0000099C                           122      ;MOVE.B  #'N',(A1)+  Load N    
0000099C                           123      ;MOVE.B  #'Y',(A1)+  Load Y
0000099C                           124      ; MOVE.B  #' ',(A1)+  ENTER space
0000099C                           125      ;  MOVE.B  #' ',(A1)+  ENTER space
0000099C                           126      ;   MOVE.B  #' ',(A1)+  ENTER space
0000099C                           127      
0000099C                           128      ;LEA     MESSAGE2,A1 *Loads message into address register A1
0000099C                           129      ;MOVE.B  #13,D0      *Moves number 14 into data regiter D0
0000099C                           130      ;TRAP    #15         *Displays Message
0000099C                           131  
0000099C                           132      ;LEA     test_buffer,A1   ;NOT SINCE THE STRING IS STORED AT THE BUFFER WHICH IS A LOCATIOIN FOR THE STRING TO LIVE is LOADED
0000099C                           133                              ; BACK INTO A1 for the trap task to execute what sin a1 String 
0000099C                           134      ;MOVE.B  #13,D0      ; Display string with newline
0000099C                           135      ;TRAP    #15
0000099C                           136  
0000099C                           137      ;MOVE.B   #9,D0
0000099C                           138      ;TRAP   #15          ; halt simulator
0000099C                           139     
0000099C                           140  ;    ds.w    0       ; force even address
0000099C                           141  ;buffer  ds.b    80  ; input string storage
0000099C                           142  
0000099C                           143  *    LEA     MSG,A1
0000099C                           144  *    MOVE.B  #14, D0
0000099C                           145  *    TRAP    #15
0000099C                           146      
0000099C                           147      
0000099C                           148  *    MOVE.B  #2,D0
0000099C                           149  *    TRAP    #15
0000099C                           150   
0000099C                           151  *    MOVEA.W $300,A2
0000099C                           152  *    MOVE.W  D1,D2   THE INPUT IS STORED INTO D1 WE MOVE IT TO D2
0000099C                           153      
0000099C                           154  *    MOVE.W  D2,(A2)
0000099C                           155      
0000099C                           156      
0000099C                           157      
0000099C                           158  
0000099C                           159      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
START               996
