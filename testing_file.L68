00000996 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/24/2017 3:21:01 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000996                             7      ORG    $996
00000996  =0000000D                  8  CR  EQU $0D
00000996  =0000000A                  9  LF  EQU $0A
00000996                            10  *------
00000996                            11  *Test memory address between 996 and 9CF
00000996                            12  *
00000996                            13  *
00000996                            14  *----
00000996                            15  START:                  ; first instruction of program
00000996                            16      
00000996                            17  * Put program code here
00000996                            18  *----------------------------------------------------------
00000996                            19  * Testing: MOVE.B
00000996                            20  *----------------------------------------------------------
00000996                            21  * Direct Addressing
00000996                            22  *----------------------------------------------------------
00000996                            23  *    MOVE.B  D0,D1       ; Testing Dn
00000996                            24  *    MOVE.B  D0,D2       ; Testing Dn
00000996                            25  **   MOVE.B  A0,D1       ; Testing An
00000996                            26  *----------------------------------------------------------
00000996                            27  * Indriect Addressing
00000996                            28  *----------------------------------------------------------
00000996                            29  *    MOVE.B  (A1),D7     ; Testing  (An)
00000996                            30  *    MOVE.B  (A2),D7     ; Testing  (An)
00000996                            31  *    MOVE.B  (A3),D7     ; Testing  (An)
00000996                            32  *    MOVE.B  (A4),D7     ; Testing  (An)
00000996                            33  *----------------------------------------------------------
00000996                            34  * Indriect Addressing with Post Increment 
00000996                            35  *----------------------------------------------------------
00000996                            36  *    MOVE.B  (A7)+,D3     ; Testing  (An)+
00000996                            37  *    MOVE.B  (A6)+,D5     ; Testing  (An)+
00000996                            38  *----------------------------------------------------------
00000996                            39  * Indriect Addressing with Pre Decrement
00000996                            40  *----------------------------------------------------------
00000996                            41  *    MOVE.B  -(A5),D4     ; Testing  -(An)
00000996                            42  *    MOVE.B  -(A5),D4     ; Testing  -(An)
00000996                            43  *----------------------------------------------------------
00000996                            44  * Immediate Data
00000996                            45  *----------------------------------------------------------
00000996                            46      *MOVE.B  #34,D4 
00000996                            47  *     MOVE.B  #99,D5        
00000996                            48  *----------------------------------------------------------
00000996                            49  * Absolute Addressing - Word
00000996                            50  *----------------------------------------------------------
00000996                            51      * MOVE.B  $4214,D5
00000996                            52  *----------------------------------------------------------
00000996                            53  * Absolute Addressing - Long
00000996                            54  *----------------------------------------------------------
00000996                            55      * MOVE.B   $A000,D5
00000996                            56  *----------------------------------------------------------
00000996                            57  * end of MOVE.B
00000996                            58  *----------------------------------------------------------
00000996                            59  *-------------------------------------
00000996                            60  *   ADD
00000996                            61  *------------------------
00000996                            62  *    ADDA.L  D5,A5
00000996                            63  *    ADDA.W  D2,A7
00000996                            64  **    
00000996                            65  *    MOVE.B  #34,D5
00000996                            66  *    MOVE.B  D6,D7           
00000996                            67  *    ADDA.W  #34,A5
00000996                            68  *    MOVE.B  #$22,D5
00000996                            69       ;ADD     #$5,D5 ;ADDQ
00000996                            70      
00000996                            71      ;MOVE.B   #$22,D5
00000996                            72  ;    ADD.B   D6,D5
00000996                            73  *- BROken below, the buffer (A3) will not print the regnum 7, not sure why
00000996                            74  ;    ADD.W   A5,D6
00000996                            75  ;    ADD.L   D7,D4
00000996                            76      
00000996                            77  *    ADD.W   D6,D2
00000996                            78  *    ADD.L   D7,D1    
00000996                            79  *    
00000996  D55A                      80      ADD.W   D2,(A2)+
00000998                            81      
00000998                            82      ;LEA     MESSAGE1,A1 *Loads message into address register A1
00000998                            83      ;MOVE.B  #14,D0      *Moves number 14 into data regiter D0
00000998                            84      ;TRAP    #15         *Displays Message
00000998                            85     
00000998                            86      ;LEA     inputbuffer,A1   ; Where to store input string
00000998                            87      ;MOVE.B  #2,D0       ; from keyboard to store into input buffer Read string
00000998                            88      ;TRAP    #15         ;execute the task
00000998                            89  
00000998                            90  
00000998                            91      ;LEA test_buffer,A1  ;LOAD THE LOCATION where THIS STRING WILL BE PUT INTO
00000998                            92      ; MOVE.B  #' ',(A1)+  ENTER space
00000998                            93      ;MOVE.B  #' ',(A1)+  ENTER space
00000998                            94      ;MOVE.B  #'D',(A1)+  load D
00000998                            95      ;MOVE.B  #'A',(A1)+  load A
00000998                            96      ;MOVE.B  #'N',(A1)+  Load N
00000998                            97      ;MOVE.B  #'N',(A1)+  Load N    
00000998                            98      ;MOVE.B  #'Y',(A1)+  Load Y
00000998                            99      ; MOVE.B  #' ',(A1)+  ENTER space
00000998                           100      ;  MOVE.B  #' ',(A1)+  ENTER space
00000998                           101      ;   MOVE.B  #' ',(A1)+  ENTER space
00000998                           102      
00000998                           103      ;LEA     MESSAGE2,A1 *Loads message into address register A1
00000998                           104      ;MOVE.B  #13,D0      *Moves number 14 into data regiter D0
00000998                           105      ;TRAP    #15         *Displays Message
00000998                           106  
00000998                           107      ;LEA     test_buffer,A1   ;NOT SINCE THE STRING IS STORED AT THE BUFFER WHICH IS A LOCATIOIN FOR THE STRING TO LIVE is LOADED
00000998                           108                              ; BACK INTO A1 for the trap task to execute what sin a1 String 
00000998                           109      ;MOVE.B  #13,D0      ; Display string with newline
00000998                           110      ;TRAP    #15
00000998                           111  
00000998                           112      ;MOVE.B   #9,D0
00000998                           113      ;TRAP   #15          ; halt simulator
00000998                           114     
00000998= 65 6E 74 65 72 20 ...    115  message1 dc.b 'enter your string: ',0
000009AC= 73 74 72 69 6E 67 ...    116  message2 dc.b 'string you have entered is: ',0
000009CA                           117  test_buffer ds.w    85    
00000A74                           118  ;    ds.w    0       ; force even address
00000A74                           119  ;buffer  ds.b    80  ; input string storage
00000A74                           120  
00000A74                           121  *    LEA     MSG,A1
00000A74                           122  *    MOVE.B  #14, D0
00000A74                           123  *    TRAP    #15
00000A74                           124      
00000A74                           125      
00000A74                           126  *    MOVE.B  #2,D0
00000A74                           127  *    TRAP    #15
00000A74                           128   
00000A74                           129  *    MOVEA.W $300,A2
00000A74                           130  *    MOVE.W  D1,D2   THE INPUT IS STORED INTO D1 WE MOVE IT TO D2
00000A74                           131      
00000A74                           132  *    MOVE.W  D2,(A2)
00000A74                           133      
00000A74                           134      
00000A74                           135      
00000A74                           136      
00000A74  FFFF FFFF                137      SIMHALT             ; halt simulator
00000A78                           138  
00000A78                           139  * Put variables and constants here
00000A78                           140  ;MSG     DC.L    'ENTER A NUMBER: ',0
00000A78                           141  inputbuffer    ds.w    9999  input string storage
00005896                           142  
00005896                           143      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CR                  D
INPUTBUFFER         A78
LF                  A
MESSAGE1            998
MESSAGE2            9AC
START               996
TEST_BUFFER         9CA
