00000996 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2017-05-05 ¿ÀÈÄ 12:18:39

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000996                             7      ORG    $996
00000996  =0000000D                  8  CR  EQU $0D
00000996  =0000000A                  9  LF  EQU $0A
00000996                            10  *------
00000996                            11  *Test memory address between 996 and 9CF
00000996                            12  *
00000996                            13  *
00000996                            14  *----
00000996                            15  START:                  ; first instruction of program
00000996                            16      
00000996                            17  * Put program code here
00000996                            18      
00000996  1001                      19      MOVE.B  D1,D0
00000998                            20              
00000998                            21   
00000998                            22      
00000998                            23      
00000998                            24      
00000998                            25      
00000998                            26      
00000998                            27      
00000998                            28      
00000998                            29      ;LEA     MESSAGE1,A1 *Loads message into address register A1
00000998                            30      ;MOVE.B  #14,D0      *Moves number 14 into data regiter D0
00000998                            31      ;TRAP    #15         *Displays Message
00000998                            32     
00000998                            33      ;LEA     inputbuffer,A1   ; Where to store input string
00000998                            34      ;MOVE.B  #2,D0       ; from keyboard to store into input buffer Read string
00000998                            35      ;TRAP    #15         ;execute the task
00000998                            36  
00000998                            37  
00000998                            38      ;LEA test_buffer,A1  ;LOAD THE LOCATION where THIS STRING WILL BE PUT INTO
00000998                            39      ; MOVE.B  #' ',(A1)+  ENTER space
00000998                            40      ;MOVE.B  #' ',(A1)+  ENTER space
00000998                            41      ;MOVE.B  #'D',(A1)+  load D
00000998                            42      ;MOVE.B  #'A',(A1)+  load A
00000998                            43      ;MOVE.B  #'N',(A1)+  Load N
00000998                            44      ;MOVE.B  #'N',(A1)+  Load N    
00000998                            45      ;MOVE.B  #'Y',(A1)+  Load Y
00000998                            46      ; MOVE.B  #' ',(A1)+  ENTER space
00000998                            47      ;  MOVE.B  #' ',(A1)+  ENTER space
00000998                            48      ;   MOVE.B  #' ',(A1)+  ENTER space
00000998                            49      
00000998                            50      ;LEA     MESSAGE2,A1 *Loads message into address register A1
00000998                            51      ;MOVE.B  #13,D0      *Moves number 14 into data regiter D0
00000998                            52      ;TRAP    #15         *Displays Message
00000998                            53  
00000998                            54      ;LEA     test_buffer,A1   ;NOT SINCE THE STRING IS STORED AT THE BUFFER WHICH IS A LOCATIOIN FOR THE STRING TO LIVE is LOADED
00000998                            55                              ; BACK INTO A1 for the trap task to execute what sin a1 String 
00000998                            56      ;MOVE.B  #13,D0      ; Display string with newline
00000998                            57      ;TRAP    #15
00000998                            58  
00000998                            59      ;MOVE.B   #9,D0
00000998                            60      ;TRAP   #15          ; halt simulator
00000998                            61     
00000998= 65 6E 74 65 72 20 ...     62  message1 dc.b 'enter your string: ',0
000009AC= 73 74 72 69 6E 67 ...     63  message2 dc.b 'string you have entered is: ',0
000009CA                            64  test_buffer ds.w    85    
00000A74                            65  ;    ds.w    0       ; force even address
00000A74                            66  ;buffer  ds.b    80  ; input string storage
00000A74                            67  
00000A74                            68  *    LEA     MSG,A1
00000A74                            69  *    MOVE.B  #14, D0
00000A74                            70  *    TRAP    #15
00000A74                            71      
00000A74                            72      
00000A74                            73  *    MOVE.B  #2,D0
00000A74                            74  *    TRAP    #15
00000A74                            75   
00000A74                            76  *    MOVEA.W $300,A2
00000A74                            77  *    MOVE.W  D1,D2   THE INPUT IS STORED INTO D1 WE MOVE IT TO D2
00000A74                            78      
00000A74                            79  *    MOVE.W  D2,(A2)
00000A74                            80      
00000A74                            81      
00000A74                            82      
00000A74                            83      
00000A74  FFFF FFFF                 84      SIMHALT             ; halt simulator
00000A78                            85  
00000A78                            86  * Put variables and constants here
00000A78                            87  ;MSG     DC.L    'ENTER A NUMBER: ',0
00000A78                            88  inputbuffer    ds.w    9999  input string storage
00005896                            89  
00005896                            90      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CR                  D
INPUTBUFFER         A78
LF                  A
MESSAGE1            998
MESSAGE2            9AC
START               996
TEST_BUFFER         9CA
