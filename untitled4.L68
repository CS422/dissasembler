00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/18/2017 3:34:44 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  *    MOVE.B #0, D1
00001000                            12  *    MOVE.B  #1,D2
00001000                            13      *-using D7 for original value in HEX
00001000                            14      *-Using D5 to hold temp value, result
00001000                            15      *-D3 for shifting operations
00001000                            16      
00001000                            17      *-D7 is end result
00001000                            18      *-D6 is remainder where we do computatioins
00001000                            19      *-D5 is used as a cache
00001000                            20      
00001000  3E3C 0000                 21      MOVE.W  #0,D7
00001004  3C3C 270F                 22      MOVE.W  #9999,D6
00001008                            23      ;MOVE.L  D6,D7
00001008                            24      *-result = D7
00001008                            25      *-original Number D6
00001008                            26  thousands:
00001008  BC7C 03E8                 27      CMP     #1000,D6
0000100C  6D00 0018                 28      BLT     hundreds
00001010  2A06                      29      MOVE.L    D6,D5
00001012  8AFC 03E8                 30      DIVU    #1000,D5
00001016  4845                      31      SWAP    D5
00001018  4246                      32      CLR     D6
0000101A  3C05                      33      MOVE.W  D5,D6
0000101C  E08D                      34      LSR.L   #8,D5
0000101E  E08D                      35      LSR.L   #8,D5
00001020  E18D                      36      LSL.L   #8,D5
00001022  E98D                      37      LSL.L   #4,D5
00001024  DE45                      38      ADD     D5,D7
00001026                            39      
00001026                            40  hundreds:                                        
00001026  BC7C 0064                 41      CMP     #100,D6
0000102A  2A06                      42      MOVE.L  D6,D5
0000102C  6D00 0010                 43      BLT     tens    if less than 100 then go to tens
00001030                            44      ;MOVE.W  D6,D7   MOVE to play with, D7 is result register
00001030                            45      
00001030                            46  
00001030  8AFC 0064                 47      DIVU    #100,D5 WE HAVE [REMAINDER][QUOTIENT]
00001034                            48      *-D7 Holds remainder
00001034                            49      *-move the remainder back into d6 to get remainder of coversion
00001034                            50      
00001034  4845                      51      SWAP    D5  get the remainder
00001036  4246                      52      CLR     D6
00001038  3C05                      53      MOVE.W  D5,D6 Move the remainder to D6
0000103A  E08D                      54      LSR.L   #8,D5
0000103C  DE45                      55      ADD     D5,D7   ;add the end result to D7   
0000103E                            56     
0000103E                            57  tens:
0000103E  2A06                      58      MOVE.L  D6,D5                         
00001040  BC7C 000A                 59      CMP     #10,D6
00001044  6F00 0010                 60      BLE     ones                               
00001048  8CFC 000A                 61      DIVU    #10,D6 splits the result in [Remainder][Quotient] each taking a word in size
0000104C                            62                                          
0000104C  E94E                      63      LSL     #4,D6   #add'0'
0000104E  DE46                      64      ADD.W   D6,D7   Add the current quotient to the RESULTING register
00001050  E08E                      65      LSR.L     #8,D6   Shift out the Quotient
00001052  E18E                      66      LSL.L     #8,D6   Shift back the deleted Quotient
00001054  4846                      67      SWAP    D6      D6 equald the remainder of the current computation
00001056                            68  *    MOVE.W  D6,D5 Move entire result to D5 to split
00001056                            69  *    ;Get the remainder from D6
00001056                            70  *    MOVE.L  D6,D3 get the remainder move D6 long-word to d3 to shift
00001056                            71  *                                        
00001056                            72  *    LSR.L   #8,D3 Shift right 16 bits to get the remainder by itself
00001056                            73  *    LSR.L   #8,D3
00001056                            74  *    LSL.W   #4,D5
00001056                            75  *
00001056                            76  *    ADD     D3,D5 Add the remainder to the end of the quotient
00001056                            77  ones:
00001056  DE46                      78      ADD     D6,D7
00001058                            79      
00001058                            80      
00001058                            81  
00001058                            82  *                                                
00001058                            83  *    MOVE.B  #34,D0
00001058                            84  *    MOVE.w  #122,D1
00001058                            85      
00001058  327C 1004                 86      MOVEA.W #$1004,A1    ;MOVE the address $1004 into address register, right before our immediate addressing code
0000105C  3419                      87      MOVE.W  (A1)+,D2
0000105E  3419                      88      MOVE.W  (A1)+,D2    ;our immediate addressing code is here stored in D2
00001060                            89      
00001060                            90      
00001060                            91      
00001060  FFFF FFFF                 92      SIMHALT             ; halt simulator
00001064                            93  
00001064                            94  * Put variables and constants here
00001064                            95  
00001064                            96      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
HUNDREDS            1026
ONES                1056
START               1000
TENS                103E
THOUSANDS           1008
